{"name":"DS2","statements":[{"name":"PROC DS2","description":"Specifies that the subsequent input is DS2 language statements.","help":"PROC DS2  [connection-options][processing-options];\n\t  ...DS2 language statements\n\tRUN ;\n\tRUN CANCEL ;\n\tQUIT ;","arguments":[{"name":"ANSIMODE","optional":true,"description":"specifies that nonexistent values in fixed-length character columns and DOUBLE columns are processed as ANSI SQL null values.","type":"standalone"},{"name":"ERRORSTOP","optional":true,"description":"specifies whether the procedure stops executing if it encounters an error.","type":"standalone"},{"name":"NOERRORSTOP","optional":true,"description":"specifies whether the procedure stops executing if it encounters an error.","type":"standalone"},{"name":"LABEL","optional":true,"description":"specifies whether to use the column label or the column name as the column heading.","type":"standalone"},{"name":"NOLABEL","optional":true,"description":"specifies whether to use the column label or the column name as the column heading.","type":"standalone"},{"name":"LIBS=","optional":true,"aliases":["LIBNAMES="],"description":"restricts the data source connection to the specified libref or librefs, and the default library.","help":"LIBS=*libref* | (*libref1**libref2* ...*librefn*)","type":"choice","arguments":[{"name":"libref","placeholder":true,"type":"dataSet"},{"name":"(libref1libref2librefn)","placeholder":true,"type":"dataSet"}]},{"name":"LOGICALEXPR=","optional":true,"description":"specifies how logical AND and OR expressions are evaluated.","help":"LOGICALEXPR=STANDARD | OPTIMIZED","type":"choice","arguments":[{"name":"STANDARD","type":"standalone"},{"name":"OPTIMIZED","type":"standalone"}]},{"name":"MEMSIZE=","optional":true,"description":"specifies a limit for the amount of memory that is used for an underlying query (such as a SELECT statement), so that allocated memory is available to support other PROC DS2 operations.","help":"MEMSIZE=n | nM | nG                         ","type":"choice","arguments":[{"name":"n","type":"standalone"},{"name":"nM","type":"standalone"},{"name":"nG","type":"standalone"}]},{"name":"MSGLIMIT=","optional":true,"description":"specifies the maximum number of error, warning, and note messages that can be written to the SAS log during the execution of the DS2 program.","help":"MSGLIMIT=n |                             MIN | MAX","type":"choice","arguments":[{"name":"n","type":"standalone"},{"name":"MIN","type":"standalone"},{"name":"MAX","type":"standalone"}]},{"name":"MSGORDER=","optional":true,"description":"specifies whether DS2 writes error, warning, and note messages to the SAS log as they are produced or after the DS2 program completes.","help":"MSGORDER=STANDARD | TEMPORAL","type":"choice","arguments":[{"name":"STANDARD","type":"standalone"},{"name":"TEMPORAL","type":"standalone"}]},{"name":"NUMBER","optional":true,"description":"specifies to include a column named Row, which is the row (observation) number of the data as the rows are retrieved.","type":"standalone"},{"name":"REPORTLINE","optional":true,"description":"specifies whether log line numbers are reported in DS2 program execution messages.","type":"standalone"},{"name":"NOREPORTLINE","optional":true,"description":"specifies whether log line numbers are reported in DS2 program execution messages.","type":"standalone"},{"name":"SCOND=","optional":true,"description":"specifies the level of messages that PROC DS2 displays in the SAS log for the DS2 variable declaration strict mode, which requires that every variable must be declared in the DS2 program.","help":"SCOND=WARNING | NONE | NOTE | ERROR","type":"choice","arguments":[{"name":"WARNING","description":"writes warning messages to the SAS log.","type":"standalone"},{"name":"NONE","description":"no messages are written to the SAS log.","type":"standalone"},{"name":"NOTE","description":"writes notes to the SAS log.","type":"standalone"},{"name":"ERROR","description":"writes error messages to the SAS log.","type":"standalone"}]},{"name":"SESSREF=","optional":true,"description":"specifies to run the DS2 statements in a CAS session. The CAS session is identified by its session name.","help":"SESSREF=*session-reference*","type":"value"},{"name":"SESSUUID=","optional":true,"description":"specifies to run the DS2 statements in a CAS session. The CAS session is identified by its universally unique identifier (UUID).","help":"SESSUUID=\"*session-uuid*\"","type":"value"},{"name":"STIMER","optional":true,"description":"specifies to write a subset of system performance statistics, such as time-elapsed statistics, to the SAS log.","type":"standalone"},{"name":"XCODE=","optional":true,"description":"controls the behavior of the SAS session when an NLS transcoding failure occurs.","help":"XCODE=ERROR | WARNING | IGNORE","type":"choice","arguments":[{"name":"ERROR","description":"specifies that a run-time error occurs, which causes row processing to halt. An error message is written to the SAS log. This is the default behavior.","type":"standalone"},{"name":"WARNING","description":"specifies that the incompatible character is set to a substitution character. A warning message is written to the SAS log.","type":"standalone"},{"name":"IGNORE","description":"specifies that the incompatible character is set to a substitution character. No messages are written to the SAS log.","type":"standalone"}]}]},{"name":"BY","description":"Controls the operation of a MERGE or SET statement in a DS2 program and sets up special grouping variables.","help":"BY  [DESCENDING]  *column* ... [DESCENDING]  *column*;","arguments":[{"name":"column","placeholder":true,"description":"names each column by which the table is sorted. These columns are referred to as BY variables.","help":"*column(s)*","type":"value"},{"name":"DESCENDING","optional":true,"description":"specifies that the tables are sorted in descending order by the variable that is specified. DESCENDING means largest to smallest numerically, or reverse alphabetical for character variables.","type":"standalone"}]},{"name":"CONTINUE","description":"Stops processing the current DO loop iteration and resumes with the next iteration.","help":"CONTINUE ;"},{"name":"DATA","aliases":["TABLE"],"description":"Begins a DS2 program and provides names for any output tables.","help":"DATA  [ <table-expression> ] [ ... <table-expression> ] ;  \n\t… program-body … \n[ENDDATA  ; ]\n<table-expression>::=  \n\ttable (table-options)  \n \n\t| _ROWSET_  (table-options) \n \n\t| _NULL_  ","arguments":[{"name":"table","placeholder":true,"description":"specifies the name of the table. table can be one of these forms.\n• <i>catalog</i>.<i>schema</i>.<i>table-name</i>\n• <i>schema</i>.<i>table-name</i>\n• <i>catalog</i>.<i>table-name</i>\n• <i>table-name</i>\n• <i>caslib</i>.<i>table-name</i>","type":"dataSet"},{"name":"_ROWSET_","description":"specifies that the DATA statement should not create a table, but it should instead return table rows to the client application.","type":"standalone"},{"name":"_NULL_","description":"specifies that the DATA statement should not create a table or return rows to the client application.","type":"standalone"},{"name":"table-options","placeholder":true,"description":"specifies optional arguments that the DS2 program applies when it writes rows to the output table. For more information about table options, see .","type":"dataSet"}]},{"name":"DECLARE","description":"Declares one or more DS2 variables or temporary arrays.","help":"DECLARE \n                [PRIVATE] { <data-type> <variable-list> [ <having-clause> ] } ;\n< data-type >::= \n\t<exact-numeric-type> |                     <approximate-numeric-type> | <binary-string-type> |                     <string-type> \n\t\t| <date-type>\n                \n\t<exact-numeric-type> ::= \n\t\t                             {INT  | BIGINT  |                             SMALLINT  | TINYINT \n\t\t\t |                             DECIMAL \n                        [(precision \n       [,scale] )] |                             NUMERIC \n                        [(precision \n       [,scale])] }\n                \n                \n\t<approximate-numeric-type> ::=\n\t\t{                             DOUBLE  | DOUBLE PRECISION  |                             FLOAT  | REAL  }\n                \n                \n\t<binary-string-type>::=\n\t\tBINARY (length)                         |                         VARBINARY (length)\n                \n                \n\t<string-type>::= \n\t\tNCHAR \n                        [ (          character-length ) ]\n                    \n\t\t| NVARCHAR \n                        [ (          character-length ) ]\n                    \n\t\t| CHAR \n                        [ (          character-length ) ]\n                        [CHARACTER SET character-set-identifier]\n                    \n\t\t| VARCHAR \n                        [ (          character-length ) ]\n                        [CHARACTER SET character-set-identifier]\n                \n                \n\t<date-type>::= \n\t\t{ TIME  |                             TIMESTAMP  }                         [ (          precision ) ] | DATE \n                \n            \n<variable-list>::= \n\t{ variable\n                    [ ...variable] }\n                \n\t| { variable                     <array-declaration>                     [variable ...<array-declaration>      ] } \n\t\t<array-declaration>::= \n\t\t\t\\[                             <array-bound>                             [,  ...< array-bound>         ]                             \\]                             | \\[ *                             \\]\n                    \n                    \n\t\t<array-bound>::= \n\t\t\t{ [dim-lower:]\n                            dim-upper} | {                             [dim-lower:]                             {DIM (a[,n]) }\n                    \n                \n            \n<having-clause>::= \n\tHAVING                      <having-option> [ ... <having-option> ]\n                    \n\t\t<having-option>::= \n\t\t\tLABEL                              'string' |                             n'string'\n                        \n\t\t\t| FORMAT \n                            format\n                        \n\t\t\t| INFORMAT \n                            format\n                    \n                \n            ","arguments":[{"name":"INT","aliases":["INTEGER"],"description":"specifies an integer variable or array.","type":"standalone"},{"name":"BIGINT","description":"specifies an integer variable or array.","type":"standalone"},{"name":"SMALLINT","description":"specifies an integer variable or array.","type":"standalone"},{"name":"TINYINT","description":"specifies an integer variable or array.","type":"standalone"},{"name":"DECIMAL","description":"specifies an exact numeric variable or array.","help":"DECIMAL        [(*precision* [,        *scale*])]","type":"value","arguments":[{"name":"precision","placeholder":true,"description":"specifies the maximum total number of decimal digits that can be stored, both to the left and to the right of the decimal point","type":"value"},{"name":"scale","placeholder":true,"description":"specifies the maximum number of decimal digits that can be stored to the right of the decimal point","type":"value"}]},{"name":"NUMERIC","description":"specifies an exact numeric variable or array.","help":"NUMERIC         [(*precision* [,         *scale*])]","type":"choice","arguments":[{"name":"precision","placeholder":true,"description":"specifies the maximum total number of decimal digits that can be stored, both to the left and to the right of the decimal point","type":"value"},{"name":"scale","placeholder":true,"description":"specifies the maximum number of decimal digits that can be stored to the right of the decimal point","type":"value"}]},{"name":"DOUBLE","description":"specifies a floating-point variable or array.","help":" <br/> DOUBLE PRECISION","type":"standalone"},{"name":"FLOAT","description":"specifies a floating-point variable or array.","type":"choice","arguments":[{"name":"FLOAT","type":"standalone"}]},{"name":"REAL","description":"specifies a floating-point variable or array.","type":"choice","arguments":[{"name":"REAL","type":"standalone"}]},{"name":"BINARY","description":"specifies a binary variable or array.","help":"BINARY        (*length*)","type":"value"},{"name":"VARBINARY","aliases":["BINARY VARYING"],"description":"specifies a varying-length binary variable or array.","help":"VARBINARY        (*length*)","type":"value"},{"name":"NCHAR","aliases":["NATIONAL CHARACTER","NATIONAL CHAR"],"description":"specifies a character variable or array.","type":"standalone"},{"name":"NVARCHAR","aliases":["NATIONAL CHARACTER VARYING,","NATIONAL CHAR VARYING"],"description":"specifies a character variable or array.","type":"standalone"},{"name":"CHAR","aliases":["CHARACTER"],"description":"specifies a character variable or array.","type":"standalone"},{"name":"VARCHAR","aliases":["CHARACTER VARYING"],"description":"specifies a character variable or array.","type":"standalone"},{"name":"character-length","placeholder":true,"description":"specifies the maximum number of characters that the string can hold for NCHAR, NVARCHAR, CHAR, and VARCHAR data types.","type":"value"},{"name":"CHARACTER","description":"specifies character set encoding information for CHAR and VARCHAR data types.","help":"CHARACTER SET        *character-set-identifier*","type":"value"},{"name":"TIME","description":"specifies a time variable or array.","type":"standalone"},{"name":"TIMESTAMP","description":"specifies both a date and time variable or array.","type":"standalone"},{"name":"precision","placeholder":true,"description":"specifies the precision for a TIME or TIMESTAMP data type.","type":"value"},{"name":"DATE","description":"specifies a date variable or array.","type":"standalone"},{"name":"variable","placeholder":true,"description":"specifies the scalar variable or array name. You can specify one or more variables or arrays. However, variable can only be of the type specified in data-type. You can mix scalar and array variables of the same type.","type":"value"},{"name":"and","description":"specifies a positive or negative integer that defines the number and size of the array boundary for a fixed temporary array.","help":"*dim-lower*       and *dim-upper*","type":"value"},{"name":"\\[","description":"specifies to create a temporary array that has dynamic bounds.","help":"\\[ *       \\]","type":"standalone"},{"name":"DIM","description":"specifies that the size of the upper bounds of the array is determined by the number of elements in a dimension of a previously declared array by using a DIM function call.","help":"DIM(*a*[,        *n*])","type":"value","arguments":[{"name":"a","placeholder":true,"description":"specifies the name of a previously declared array.","type":"value"},{"name":"n","placeholder":true,"description":"specifies the dimension, in a multidimensional array, for which you want to know the number of elements.","type":"value"}]},{"name":"LABEL","description":"assigns a descriptive label to the variable or array. The label can be a CHAR literal (string) or NCHAR literal (nstring).","help":"LABEL        '*string*'","type":"value"},{"name":"n''","description":"assigns a descriptive label to the variable or array. The label can be a CHAR literal (string) or NCHAR literal (nstring).","help":"n'*string*'","type":"value"},{"name":"FORMAT","description":"Associates any valid DS2 format with the variable or array.","help":"FORMAT        *format*","type":"value"},{"name":"INFORMAT","description":"Associates any valid SAS informat with the variable or array.","help":"INFORMAT        *informat*","type":"value"},{"name":"PRIVATE","optional":true,"description":"specifies variables that can be accessed only from within the package.","type":"standalone"}]},{"name":"DECLARE PACKAGE","description":"Creates a package variable and optionally creates a package instance.","help":"DECLARE \n        [PRIVATE]           PACKAGE \n        package\n        [(table-options)]\n\t\n        <package-variable>\n        [ ...<package-variable>];\n<package-variable::= \n\t{ scalar-package-variable\n          [(constructor-arguments)]           }\n        \n\t| {           array-package-variable\\[           array-bounds \\] } \n        \n        \n\t| {           array-package-variable\\[           array-bounds \\] := \\[           (constructor-arguments-1),            ...(constructor-arguments-N)           \\] } \n        \n      <array-bounds>::= \n\t\n          { \\[ <array-bound> [,  ...<array-bound> \\] ]} | \n\t\t{ \\[ * \\] }\n          \n        \n      <array-bound>::= \n\t{ [dim-lower:]\n          dim-upper } \n        \n\t{ dim-lower :=           n }\n        \n\t{ dim-upper:           n |  }  { DIM (array-name[, n]) }\n      ","arguments":[{"name":"catalog","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL catalog, which is a data container object that groups logically related schemas. The catalog is the first-level (top) grouping mechanism in a data organization hierarchy that is used along with a schema to provide a means of qualifying names. A catalog is a metadata object in a SAS Metadata Repository.","type":"dataSet"},{"name":"schema","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL schema, which is a data container object that groups files such as tables and views and other objects supported by a data source such as stored procedures. The schema provides a grouping object that is used along with a catalog to provide a means of qualifying names.","type":"value"},{"name":"package","placeholder":true,"description":"is the name of the package.","type":"value"},{"name":"package-variable","placeholder":true,"description":"specifies whether to create a scalar package variable or an array package variable. You can specify to create multiple package variables with the DECLARE PACKAGE statement.","type":"value"},{"name":"PRIVATE","optional":true,"description":"specifies that the package variables can be accessed only from within the package.","type":"standalone"},{"name":"scalar-package-variable","optional":true,"description":"specifies a name that can reference an instance of the package.","type":"standalone"},{"name":"array-package-variable\\[","optional":true,"description":"specifies a name that can reference multiple instances of the package.","help":"array-package-variable\\[ *array-bounds* \\]","type":"value"},{"name":"and","optional":true,"description":"specifies a positive or negative integer that defines the number and size of the array boundary for a fixed array package variable.","help":"*dim-lower* and *dim-upper*","type":"value"},{"name":"DIM","optional":true,"description":"specifies that the size of the upper bound of the array package variable is determined by the number of elements in a dimension of a previously declared array package variable by using a DIM function call.","help":"DIM(*array-name*[, n])","type":"value"},{"name":"\\[","optional":true,"description":"specifies to create an array package variable that has dynamic bounds.","help":"\\[ * \\]","type":"standalone"},{"name":"table-options","optional":true,"placeholder":true,"description":"specifies optional arguments that the DS2 program applies when it creates a package. For more information about table options, see .","type":"dataSet"},{"name":"constructor-arguments","optional":true,"placeholder":true,"description":"specifies any constructor arguments that are passed to the constructor of the package instance.","type":"value"}]},{"name":"DECLARE THREAD","description":"Creates an instance of a thread.","help":"DECLARE THREAD  *thread* [(*table-options*)] *instance*( *argument* ) [ ...*instance* ( *argument* )];","arguments":[{"name":"catalog","placeholder":true,"description":"is an implementation of the ANSI SQL standard for a SQL catalog. A SQL catalog is a data container object that groups logically related schemas. The catalog is the first-level (top) grouping mechanism in a data organization hierarchy that is used along with a schema to provide a means of qualifying names. A catalog is a metadata object in a SAS Metadata Repository.","type":"dataSet"},{"name":"schema","placeholder":true,"description":"is an implementation of the ANSI SQL standard for a SQL schema. A SQL schema is a data container object that groups files such as tables and views and other objects supported by a data source such as stored procedures. The schema provides a grouping object that is used along with a catalog to provide a means of qualifying names.","type":"value"},{"name":"thread","placeholder":true,"description":"is the name of the thread.","type":"value"},{"name":"instance","placeholder":true,"description":"specifies a name that identifies an instance of the thread.","type":"value"},{"name":"argument","placeholder":true,"description":"specifies arguments used with instance.","type":"value"},{"name":"table-options","optional":true,"placeholder":true,"description":"specifies optional arguments that the DS2 program applies when it creates a thread. For more information about table options, see .","type":"dataSet"}]},{"name":"DO","description":"Specifies a group of statements to be executed as a unit.","help":"DO  [<numeric-data-type>][index-variable =  <index-variable-clause>] [ <conditional-clause> ]\n\t [,  ...[<index-variable-clause>] [ <conditional-clause> ]];  \n\t ...statement-list ... \nEND  [end-label] ; \n< numeric-data-type >::= \n\t<exact-numeric-type> | <approximate-numeric-type>   \n\t<exact-numeric-type> ::=  \n\t\t {INT  | BIGINT  | SMALLINT  | TINYINT \n\t\t\t | DECIMAL  [(precision [,scale] )] | NUMERIC   [(precision [,scale])] } \n        \n\t<approximate-numeric-type> ::=\n\t\t{ DOUBLE  | DOUBLE PRECISION  | FLOAT  | REAL  } \n \n<index-variable-clause>::=  \n\tstart  [TO stop[BY increment]] \n \n<conditional-clause>::=  \n\tWHILE    ( expression ) | UNTIL    ( expression ) ","arguments":[{"name":"statement-list","placeholder":true,"description":"specifies any valid DS2 statements.","type":"value"},{"name":"INT","optional":true,"aliases":["INTEGER for INT"],"description":"specifies an integer variable or array.","type":"standalone"},{"name":"BIGINT","optional":true,"aliases":["INTEGER for INT"],"description":"specifies an integer variable or array.","type":"standalone"},{"name":"SMALLINT","optional":true,"aliases":["INTEGER for INT"],"description":"specifies an integer variable or array.","type":"standalone"},{"name":"TINYINT","optional":true,"aliases":["INTEGER for INT"],"description":"specifies an integer variable or array.","help":"TINYINT ","type":"standalone"},{"name":"DECIMAL[","optional":true,"description":"specifies an exact numeric variable or array.","help":"DECIMAL[(*precision* [, *scale*])]","type":"value","arguments":[{"name":"precision","placeholder":true,"description":"specifies the maximum total number of decimal digits that can be stored, both to the left and to the right of the decimal point","type":"value"},{"name":"scale","placeholder":true,"description":"specifies the maximum number of decimal digits that can be stored to the right of the decimal point","type":"value"}]},{"name":"NUMERIC[","optional":true,"description":"specifies an exact numeric variable or array.","help":"NUMERIC[(*precision* [, *scale*])]","type":"value","arguments":[{"name":"precision","placeholder":true,"description":"specifies the maximum total number of decimal digits that can be stored, both to the left and to the right of the decimal point","type":"value"},{"name":"scale","placeholder":true,"description":"specifies the maximum number of decimal digits that can be stored to the right of the decimal point","type":"value"}]},{"name":"DOUBLE","optional":true,"description":"specifies a floating-point variable or array.","help":" <br/> DOUBLE PRECISION","type":"standalone"},{"name":"FLOAT","optional":true,"description":"specifies a floating-point variable or array.","type":"standalone"},{"name":"REAL","optional":true,"description":"specifies a floating-point variable or array.","type":"standalone"},{"name":"index-variable","optional":true,"placeholder":true,"description":"names a variable that is used as an index counter for the loop.","type":"value"},{"name":"end-label","optional":true,"placeholder":true,"description":"The END statement closes the DO loop. The optional end-label argument specifies an identifier. This label, created by using the Labels statement, must match the label immediately preceding the DO statement, or an error will occur. For more information, see the .","type":"value"},{"name":"< index-variable-clause >","optional":true,"description":"specifies a numeric scalar expression or series of expressions that determines the number of times that the DO group will be executed.","type":"standalone","arguments":[{"name":"start","placeholder":true,"description":"specifies the initial value of the index variable. start can be any expression that resolves to a numeric value.","type":"value"},{"name":"TO","description":"specifies the ending value of the index variable. stop can be any expression that resolves to a numeric value.","help":"TO *stop*","type":"value"},{"name":"BY","description":"specifies a positive or negative value that controls the incrementing or decrementing of index-variable. increment can be any expression that resolves to a numeric value.","help":"BY *increment*","type":"value"}]},{"name":"<conditional-clause>","optional":true,"description":"specifies a clause that returns true or false.","type":"standalone","arguments":[{"name":"WHILE","description":"causes DO group statements to execute repetitively while a condition is true.","help":"WHILE ( *expression* )","type":"value"},{"name":"UNTIL","description":"causes DO group statements to execute repetitively until a condition is true.","help":"UNTIL ( *expression* )","type":"value"}]}]},{"name":"DROP","description":"Excludes columns from output tables.","help":"DROP   *column-list* | *vararray*;","arguments":[{"name":"column-list","placeholder":true,"description":"specifies the name of one or more columns to omit from the output tables.","type":"value"},{"name":"vararray","placeholder":true,"description":"specifies the name of a variable array.","type":"value"}]},{"name":"DROP PACKAGE","description":"Deletes a DS2 package.","help":"DROP PACKAGE  package [(table-options)];\n\tRUN;","arguments":[{"name":"package","placeholder":true,"description":"specifies the name of the package to be deleted.","type":"value"},{"name":"table-options","optional":true,"placeholder":true,"description":"specifies optional arguments that the DS2 program applies when it deletes a package. For more information about table options, see .","type":"dataSet"}]},{"name":"DROP THREAD","description":"Deletes a DS2 thread program.","help":"DROP THREAD  *thread* [(*table-options*)];","arguments":[{"name":"thread","placeholder":true,"description":"specifies the name of the thread to be deleted.","type":"value"},{"name":"table-options","optional":true,"placeholder":true,"description":"specifies optional arguments that the DS2 program applies when it deletes a thread. For more information about table options, see .","type":"dataSet"}]},{"name":"DS2_OPTIONS","description":"Specifies or changes the default behavior of a DS2 program.","help":"DS2_OPTIONS \n                options;","arguments":[{"name":"DIVBYZERO=","description":"specifies how DS2 processes a division by zero operation.","help":"DIVBYZERO=ERROR | IGNORE","type":"choice","arguments":[{"name":"ERROR","type":"standalone"},{"name":"IGNORE","type":"standalone"}]},{"name":"LOGICALEXPR=","description":"specifies how logical AND and OR expressions in the next program block are evaluated.","help":"LOGICALEXPR=STANDARD | OPTIMIZED","type":"choice","arguments":[{"name":"STANDARD","type":"standalone"},{"name":"OPTIMIZED","type":"standalone"}]},{"name":"MISSING_NOTE","description":"writes a note to the SAS log when an invalid function argument generates a missing value.","type":"standalone"},{"name":"MODE=","description":"specifies how nonexistent values in fixed character columns and DOUBLE columns are processed.","help":"MODE=ANSI | SAS","type":"choice","arguments":[{"name":"ANSI","type":"standalone"},{"name":"SAS","type":"standalone"}]},{"name":"MSGLIMIT=","description":"specifies the maximum number of error, warning, and note messages that can be written to the SAS log during the execution of the DS2 program.","help":"MSGLIMIT=n |  MIN | MAX","type":"choice","arguments":[{"name":"n","type":"standalone"},{"name":"MIN","type":"standalone"},{"name":"MAX","type":"standalone"}]},{"name":"MSGORDER=","description":"specifies whether DS2 writes error, warning, and note messages to the SAS log as they are produced or after the DS2 program completes.","help":"MSGORDER=STANDARD | TEMPORAL","type":"choice","arguments":[{"name":"STANDARD","type":"standalone"},{"name":"TEMPORAL","type":"standalone"}]},{"name":"REPORTLINE=","description":"specifies whether log line numbers for the next program block are reported in DS2 program execution messages. The log line numbers are included in error, warning, and note messages and indicate the location of the DS2 statement that was being executed when the message was generated. Line numbers that are reported for stored packages and threads are the line numbers that are offset from the start of the package or thread block rather than SAS log line numbers.","help":"REPORTLINE=YES | NO","type":"choice","arguments":[{"name":"YES","description":"generates line numbers for DS2 program execution messages.","type":"standalone"},{"name":"NO","description":"suppresses generation of the log line numbers.","type":"standalone"}]},{"name":"SAS","description":"specifies that nonexistent values in fixed character columns and DOUBLE columns are processed as SAS missing values.","type":"standalone"},{"name":"SCOND","description":"specifies the level of messages that is displayed in the SAS log for the DS2 variable declaration strict mode, which requires that every variable must be declared in the DS2 program. For more information about the DS2 variable declaration strict mode, see .","type":"standalone"},{"name":"TRACEVARIABLES","description":"enables tracing of variable value changes during DS2 program execution.","type":"standalone"},{"name":"TREEALGORITHM=","description":"changes the default algorithm that the DS2 compiler uses to build the syntax tree. If you are using the RECURSIVE option and you encounter a stack overflow error, changing the algorithm can sometimes resolve stack overflow errors.","help":"TREEALGORITHM=ITERATIVE | RECURSIVE","type":"choice","arguments":[{"name":"ITERATIVE","type":"standalone"},{"name":"RECURSIVE","type":"standalone"}]},{"name":"TYPEWARN","description":"prints a warning to the SAS log when an implicit type conversion occurs.","type":"standalone"}]},{"name":"ENDDATA","aliases":["ENDTABLE"],"description":"Marks the end of a DATA statement.","help":"ENDDATA ;"},{"name":"ENDPACKAGE","description":"Marks the end of a PACKAGE statement.","help":"ENDPACKAGE ;"},{"name":"ENDTHREAD","description":"Marks the end of a THREAD statement.","help":"ENDTHREAD ;"},{"name":"FORWARD","description":"Indicates that the method definition follows the method expression.","help":"FORWARD  *method* [ ...*method*];","arguments":[{"name":"method","placeholder":true,"description":"specifies the name of the method to be defined.","type":"value"}]},{"name":"GOTO","description":"Transfers execution immediately to a labeled statement.","help":"GOTO  *label*;","arguments":[{"name":"label","placeholder":true,"description":"specifies a statement label that identifies the GOTO destination.","type":"value"}]},{"name":"IF","description":"Continues processing only those rows that meet the condition.","help":"IF  *expression*;","arguments":[{"name":"expression","placeholder":true,"description":"is any valid expression that evaluates to true or false.","type":"value"}]},{"name":"IF-THEN/ELSE","description":"Executes a statement for rows that meet specific conditions.","help":"IF  expression THEN  statement; \n\t [ELSE statement ;]","arguments":[{"name":"expression","placeholder":true,"description":"is any valid expression that evaluates to true or false and is a required argument.","type":"value"},{"name":"statement","placeholder":true,"description":"can be any executable statement or DO group.","type":"value"}]},{"name":"KEEP","description":"Includes columns in output tables.","help":"KEEP  *column-list* | *vararray*;","arguments":[{"name":"column-list","placeholder":true,"description":"specifies the names of one or more columns to write to the output table.","type":"value"},{"name":"vararray","placeholder":true,"description":"specifies the name of a variable array.","type":"value"}]},{"name":"Labels","description":"Identifies a statement that is referred to by another statement.","help":"*label*: *statement*; [ ...*statement*];","arguments":[{"name":"label","placeholder":true,"description":"specifies any identifier, which is followed by a colon (:). You must specify the label argument.","type":"value"},{"name":"statement","placeholder":true,"description":"specifies any executable statement, including a null statement (;). You must specify the statement argument.","type":"value"}]},{"name":"LEAVE","description":"Stops processing the current DO loop and transfers execution to either the statement following the current DO statement, or a labeled DO statement that encloses the current DO statement.","help":"LEAVE  [*identifier*] ;","arguments":[{"name":"identifier","optional":true,"placeholder":true,"description":"label associated with the target DO statement.","type":"value"}]},{"name":"MERGE","description":"Joins rows from two or more tables into a single row.","help":" MERGE  <table-reference> <table-reference> [ ... <table-reference>] [/RETAIN];\n<table-reference>::=  \n\t{ table [ (table-options) ] } \n  ","arguments":[{"name":"table","placeholder":true,"description":"specifies the name of the table. table can be one of these forms.\n• <i>catalog</i>.<i>schema</i>.<i>table-name</i>\n• <i>schema</i>.<i>table-name</i>\n• <i>catalog</i>.<i>table-name</i>\n• <i>table-name</i>\n• <i>caslib</i>.<i>table-name</i>","type":"dataSet"},{"name":"(table-options)","optional":true,"placeholder":true,"description":"specifies optional arguments that the DS2 program applies when it writes rows to the output table.","help":" (*table-options*)","type":"dataSet"},{"name":"/RETAIN","optional":true,"description":"specifies that the final row of a data set in a particular BY group be used repeatedly until there are no more rows in any of the contributing data sets.","type":"standalone"}]},{"name":"METHOD","description":"Defines a block of code that can be called and executed multiple times.","help":"[PRIVATE]\n        METHOD \n        method         ([[IN_OUT] <parameter> [,  ...\n              [IN_OUT]<                   parameter>]] ) \n\t\n          [RETURNS data-type];\n\t\t\n           ...method-body\n           ...\n        END ;\n<parameter>::= \n\t<data-type>           variable\n        \n      \n< data-type >::= \n\t<exact-numeric-type> |           <approximate-numeric-type> | <binary-string-type> | <string-type>           \n\t\t| <date-type>\n        \n\t<exact-numeric-type> ::= \n\t\t               {INT  | BIGINT  | SMALLINT  |               TINYINT \n\t\t\t | DECIMAL \n            [(precision\n                [,scale] )] | NUMERIC \n            [(precision\n                [,scale])] }\n        \n        \n\t<approximate-numeric-type> ::=\n\t\t{ DOUBLE  |               DOUBLE PRECISION  | FLOAT  |               REAL  }\n        \n        \n\t<binary-string-type>::=\n\t\tBINARY (length)             |             VARBINARY (length)\n        \n        \n\t<string-type>::= \n\t\tNCHAR \n            [ ( character-length )               ]\n          \n\t\t| NVARCHAR \n            [ ( character-length )               ]\n          \n\t\t| CHAR \n            [ ( character-length )               ]\n            [CHARACTER SET character-set-identifier]\n          \n\t\t| VARCHAR \n            [ ( character-length )               ]\n            [CHARACTER SET character-set-identifier]\n        \n        \n\t<date-type>::= \n\t\t{ TIME  |               TIMESTAMP  } [ ( precision ) ] | DATE \n        \n      ","arguments":[{"name":"method","placeholder":true,"description":"specifies a name for the method. Method names have global scope.","type":"value"},{"name":"method-body","placeholder":true,"description":"comprises the variable declarations and executable DS2 code that runs when the method is called. All variables that are declared in the method body are local to the method.","type":"value"},{"name":"END","description":"marks the end of the method.","type":"standalone"},{"name":"PRIVATE","optional":true,"description":"specifies a method that can be accessed only from within the package.","type":"standalone"},{"name":"IN_OUT","optional":true,"description":"specifies that the argument is to be manipulated by reference, not by value. The IN_OUT parameter manipulates the argument rather than a copy of the argument.","type":"standalone"},{"name":"parameter","optional":true,"description":"specifies a parameter that is passed to the method. The type can be any valid character, numeric, or date type, or package. Parameters have scope that is local to the method and, by default, parameters are passed by value. A parameter is initialized to be a copy of the value of the argument that is specified for the parameter, unless it is specified with the IN_OUT parameter or is a package or an array. Package type variables and arrays are always passed by reference, even if the IN_OUT keyword is not specified.","type":"standalone"},{"name":"INT","optional":true,"aliases":["INTEGER for INT"],"description":"specifies an integer variable or array.","type":"standalone"},{"name":"BIGINT","optional":true,"aliases":["INTEGER for INT"],"description":"specifies an integer variable or array.","type":"standalone"},{"name":"SMALLINT","optional":true,"aliases":["INTEGER for INT"],"description":"specifies an integer variable or array.","type":"standalone"},{"name":"TINYINT","optional":true,"aliases":["INTEGER for INT"],"description":"specifies an integer variable or array.","type":"standalone"},{"name":"DECIMAL[","optional":true,"description":"specifies an exact numeric variable or array.","help":"DECIMAL[(*precision* [,               *scale*])]","type":"value","arguments":[{"name":"precision","placeholder":true,"description":"specifies the maximum total number of decimal digits that can be stored, both to the left and to the right of the decimal point","type":"value"},{"name":"scale","placeholder":true,"description":"specifies the maximum number of decimal digits that can be stored to the right of the decimal point","type":"value"}]},{"name":"NUMERIC[","optional":true,"description":"specifies an exact numeric variable or array.","help":"NUMERIC[(*precision* [,               *scale*])]","type":"value","arguments":[{"name":"precision","placeholder":true,"description":"specifies the maximum total number of decimal digits that can be stored, both to the left and to the right of the decimal point","type":"value"},{"name":"scale","placeholder":true,"description":"specifies the maximum number of decimal digits that can be stored to the right of the decimal point","type":"value"}]},{"name":"DOUBLE","optional":true,"description":"specifies a floating-point variable or array.","help":" <br/> DOUBLE PRECISION","type":"standalone"},{"name":"FLOAT","optional":true,"description":"specifies a floating-point variable or array.","type":"standalone"},{"name":"REAL","optional":true,"description":"specifies a floating-point variable or array.","type":"standalone"},{"name":"BINARY","optional":true,"description":"specifies a binary variable or array.","help":"BINARY               (*length*)","type":"value"},{"name":"VARBINARY","optional":true,"aliases":["BINARY VARYING"],"description":"specifies a varying-length binary variable or array.","help":"VARBINARY               (*length*)","type":"value"},{"name":"NCHAR","optional":true,"aliases":["NATIONAL CHARACTER, NATIONAL CHAR for NCHAR","NATIONAL CHARACTER VARYING, NATIONAL CHAR VARYING for NVARCHAR","CHARACTER for CHAR","CHARACTER VARYING for VARCHAR"],"description":"specifies a character variable or array.","type":"standalone"},{"name":"NVARCHAR","optional":true,"aliases":["NATIONAL CHARACTER, NATIONAL CHAR for NCHAR","NATIONAL CHARACTER VARYING, NATIONAL CHAR VARYING for NVARCHAR","CHARACTER for CHAR","CHARACTER VARYING for VARCHAR"],"description":"specifies a character variable or array.","type":"standalone"},{"name":"CHAR","optional":true,"aliases":["NATIONAL CHARACTER, NATIONAL CHAR for NCHAR","NATIONAL CHARACTER VARYING, NATIONAL CHAR VARYING for NVARCHAR","CHARACTER for CHAR","CHARACTER VARYING for VARCHAR"],"description":"specifies a character variable or array.","type":"standalone"},{"name":"VARCHAR","optional":true,"aliases":["NATIONAL CHARACTER, NATIONAL CHAR for NCHAR","NATIONAL CHARACTER VARYING, NATIONAL CHAR VARYING for NVARCHAR","CHARACTER for CHAR","CHARACTER VARYING for VARCHAR"],"description":"specifies a character variable or array.","type":"standalone"},{"name":"character-length","optional":true,"placeholder":true,"description":"specifies the maximum number of characters that the string can hold for NCHAR, NVARCHAR, CHAR, and VARCHAR data types.","type":"value"},{"name":"CHARACTER","optional":true,"description":"specifies character set encoding information for CHAR and VARCHAR data types.","help":"CHARACTER SET               *character-set-identifier*","type":"value"},{"name":"TIME","optional":true,"description":"specifies a time variable or array.","type":"standalone"},{"name":"TIMESTAMP","optional":true,"description":"specifies both a date and time variable or array.","type":"standalone"},{"name":"precision","optional":true,"placeholder":true,"description":"specifies the precision for a TIME or TIMESTAMP data type.","type":"value"},{"name":"DATE","optional":true,"description":"specifies a date variable or array.","type":"standalone"},{"name":"variable","optional":true,"placeholder":true,"description":"specifies the scalar variable or array name. You can specify one or more variables or arrays. However, variable can only be of the type specified in data-type. You can mix scalar and array variables of the same type.","type":"value"},{"name":"RETURNS","optional":true,"description":"specifies the data type of the value that the method returns. The type can be any valid character, numeric, or date type.","help":"RETURNS               *data-type*","type":"value"}]},{"name":"Null","description":"Creates an empty statement.","help":"; "},{"name":"OUTPUT","description":"Writes the current row to a table.","help":"OUTPUT  [ { *table*[ ...*table*] } | _ROWSET_  | _NULL_ ];","arguments":[{"name":"table","optional":true,"placeholder":true,"description":"specifies the name of the table to which to write rows. table can be one of these forms.\n• <i>catalog</i>.<i>schema</i>.<i>table-name</i>\n• <i>schema</i>.<i>table-name</i>\n• <i>catalog</i>.<i>table-name</i>\n• <i>table-name</i>\n• <i>caslib</i>.<i>table-name</i>","type":"dataSet"},{"name":"_ROWSET_","optional":true,"description":"specifies that the OUTPUT statement should not write rows to a table, but it should instead return table rows to the client application.","type":"standalone"},{"name":"_NULL_","optional":true,"description":"specifies that the OUTPUT statement should not write rows to either a table or the client application.","type":"standalone"}]},{"name":"PACKAGE","description":"Creates a DS2 package.","help":"Form 1: \nPACKAGE   package [/ENCRYPT=SAS | AES] [/table-options];  \n\t… package-body … ENDPACKAGE ;\nForm 2: \nPACKAGE   fcmp-package-name [/ENCRYPT=SAS | AES] [/table-options] \n\tLANGUAGE=[']FCMP['] TABLE='library-name'; \n\t… package-body … ENDPACKAGE ;","arguments":[{"name":"catalog","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL catalog, which is a data container object that groups logically related schemas. The catalog is the first-level (top) grouping mechanism in a data organization hierarchy that is used along with a schema to provide a means of qualifying names.","type":"dataSet"},{"name":"schema","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL schema, which is a data container object that groups files such as tables and views and other objects supported by a data source such as stored procedures. The schema provides a grouping object that is used along with a catalog to provide a means of qualifying names.","type":"value"},{"name":"package","placeholder":true,"description":"is the name of the package.","type":"value"},{"name":"package-body","placeholder":true,"description":"contains the declarations and methods in the package.","type":"value"},{"name":"fcmp-package-name","placeholder":true,"description":"specifies the name of the FCMP package.","type":"value"},{"name":"'library-name'","placeholder":true,"description":"specifies the name of the library where the FCMP function resides.","type":"dataSet"},{"name":"/ENCRYPT=","optional":true,"description":"specifies the encryption algorithm. SAS specifies the SAS Proprietary algorithm. AES specifies the Advanced Encryption Standard algorithm.","help":"/ENCRYPT=SAS | AES","type":"choice","arguments":[{"name":"SAS","type":"standalone"},{"name":"AES","type":"standalone"}]},{"name":"/table-options","optional":true,"placeholder":true,"description":"specifies optional arguments that the DS2 program applies when it creates a package. For more information about table options, see .","type":"dataSet"}]},{"name":"PUT","description":"Prints the values of program variables, arrays, and constants to the SAS log.","help":"PUT   < put-list > [ ... <put-list> ] ;  \n\t<put-list>::=  \n\t\t_ALL_ \n\t\t| 'character-string' \n \n\t\t| ['character-string']<eq-expression> [=] [[:]format[-L | -C | -R]]  \n \n\t<eq-expression>::=  \n\t\tidentifier  \n \n\t\t| array-reference \n \n\t\t| this-expression\n\t\t| package-attribute \n\t<package-attribute>::=\n\t\tpackage-variable. package-attribute\n\t\t| package-variable ...[. package-variableN]. package-attribute ","arguments":[{"name":"_ALL_","optional":true,"description":"prints the values of all variables, which includes predefined variables, to the SAS log.","type":"standalone"},{"name":"'character-string'","optional":true,"placeholder":true,"description":"specifies a string of text that is written to the SAS log.","type":"value"},{"name":"identifier","optional":true,"placeholder":true,"description":"names a variable whose value is written to the SAS log.","type":"value"},{"name":"array-reference","optional":true,"placeholder":true,"description":"specifies an array element. The subscript can be any SAS expression that resolves to an integer value when the PUT statement executes. Use the array subscript asterisk (*) to print all elements of the array.","type":"value"},{"name":"this-expression","optional":true,"placeholder":true,"description":"specifies a THIS expression.","type":"value"},{"name":"package-attribute","optional":true,"placeholder":true,"description":"specifies an attribute of a package that is referenced by a package-variable using a dot operator. This attribute can be a scalar attribute, an array attribute, or the element of an array attribute of the package.","type":"value"},{"name":"package-variable","optional":true,"placeholder":true,"description":"specifies an instance of a package. The name of the package instance must be followed by a dot operator and a package-attribute.","type":"value"},{"name":".","optional":true,"placeholder":true,"description":"(dot operator) invokes a call to access the right-hand operand from the left-hand operand.","type":"value"},{"name":"=","optional":true,"description":"If an equal sign is added after a variable or array element, then the output is preceded by the variable or array element name and an equal sign.","type":"value"},{"name":":","optional":true,"description":"enables you to specify a format that the PUT statement uses to print the variable value. All leading and trailing blanks are deleted, and each value is followed by a single blank.","type":"standalone"},{"name":"format","optional":true,"placeholder":true,"description":"specifies a format to use when the data value is written to the SAS log. If you use a colon modifier (:) with the format name, all leading and trailing blanks are deleted and each value is followed by a single blank. To override the default alignment, you can add an alignment specification to a format:","type":"value"}]},{"name":"RENAME","description":"Specifies new names for columns in output tables.","help":"RENAME  *old-name* {= | AS} *new-name*  [ ...*old-name*  {= | AS} *new-name*];","arguments":[{"name":"old-name","placeholder":true,"description":"specifies the name of a column as it appears in the input table, or in the current DS2 program for newly created columns.","type":"value"},{"name":"new-name","placeholder":true,"description":"specifies the name to use in the output table.","type":"value"}]},{"name":"RETAIN","description":"Specifies that all columns or all columns in the column list have their values retained between executions of the RUN method.","help":"Form 1: \nRETAIN ;\nForm 2: \nRETAIN  column-list;\nForm 3: \nRETAIN  column-list < constant-value >;\nForm 4: \nRETAIN  column-list ( < constant-value > …  < constant-value > );< constant-value >::=  \n\tbit_constant  \n \n\t| hex_constant \n \n\t| floating_constant \n \n\t| decimal_constant \n \n\t| sas_missing_value \n \n\t| integer_constant  \n \n\t| string_constant \n \n\t| null  \n \n\t| DATE  character_constant \n \n\t| TIME  character_constant \n \n\t| TIMESTAMP  character_constant \nForm 5: \nRETAIN  vararray;","arguments":[{"name":"column-list","placeholder":true,"description":"specifies column names whose values you want retained.","type":"value"},{"name":"vararray","placeholder":true,"description":"specifies the name of a variable array.","type":"value"}]},{"name":"RETURN","description":"Returns execution from a method to the method caller.","help":"RETURN  [*expression*];","arguments":[{"name":"expression","optional":true,"placeholder":true,"description":"specifies any valid expression that returns a single value. The expression's type is evaluated, and if necessary, converted to the type specified in the METHOD statement's RETURNS clause. The value of expression is then passed back to the caller of the method.","type":"value"}]},{"name":"SELECT","description":"Executes one of several statements or groups of statements.","help":"SELECT  [ ( select-expression ) ];   \n\t[ < when-list > [ …< when-list>  ] ] ; \n \n\t [OTHERWISE statement-list] ;  \nEND  [end-label];\n<when-list>::=  \n\tWHEN  ( when-expression ) [statement-list] ","arguments":[{"name":"select-expression","optional":true,"placeholder":true,"description":"specifies an expression that evaluates to a single value of any type other than VARBINARY.","type":"value"},{"name":"end-label","optional":true,"placeholder":true,"description":"The END statement closes the SELECT statement. The optional end-label argument specifies an identifier. This label, created by using the Labels statement, must match the label immediately preceding the SELECT statement, or an error will occur.","type":"value"},{"name":"when-expression","optional":true,"placeholder":true,"description":"specifies any expression.","type":"value"},{"name":"statement-list","optional":true,"placeholder":true,"description":"can be any executable statement or statements.","type":"value"}]},{"name":"SET","description":"Reads rows from one or more tables.","help":"SET  < table-reference > [ ... < table-reference > ] [INDSNAME=variable] ;\n [BY [DESCENDING ]column[ ...[DESCENDING ]column]]  ;\n< table-reference>::=  \n\t{ table [ (table-options) ] } \n \n\t| \\{  sql-text \\} ","arguments":[{"name":"table","placeholder":true,"description":"specifies the name of an input table. table can be one of these forms.\n• <i>catalog</i>.<i>schema</i>.<i>table-name</i>\n• <i>schema</i>.<i>table-name</i>\n• <i>catalog</i>.<i>table-name</i>\n• <i>table-name</i>\n• <i>caslib</i>.<i>table-name</i>","type":"dataSet"},{"name":"{sql-text}","placeholder":true,"description":"is any valid FedSQL code that resolves to a set of table rows.","type":"value"},{"name":"INDSNAME=","optional":true,"description":"creates and names a variable that stores the name of the table from which the current row is read. The stored name can be a table name or a physical name. The physical name is the name by which the operating environment recognizes the file.","help":"INDSNAME=*variable*","type":"value"},{"name":"column","optional":true,"placeholder":true,"description":"names each column by which the table is sorted.","type":"value"},{"name":"table-options","optional":true,"placeholder":true,"description":"specifies optional arguments that the DS2 program applies when it writes rows to the output table. For more information about table options, see .","type":"dataSet"},{"name":"DESCENDING","optional":true,"description":"specifies that the tables are sorted in descending order by the column that is specified. DESCENDING means largest to smallest for numeric columns, or reverse alphabetical for character columns.","type":"standalone"}]},{"name":"SET FROM","description":"Runs a DS2 program as one or more threads.","help":"SET   FROM  *thread* [THREADS =  *threads*];","arguments":[{"name":"catalog","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL catalog, which is a data container object that groups logically related schemas. The catalog is the first-level (top) grouping mechanism in a data organization hierarchy that is used along with a schema to provide a means of qualifying names.","type":"dataSet"},{"name":"schema","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL schema, which is a data container object that groups files such as tables and views and other objects supported by a data source such as stored procedures. The schema provides a grouping object that is used along with a catalog to provide a means of qualifying names.","type":"value"},{"name":"thread","placeholder":true,"description":"is the name of the thread.","type":"value"},{"name":"THREADS=","optional":true,"description":"specifies the number of threads that are run for thread.","help":"THREADS= *threads*","type":"value"}]},{"name":"STOP","description":"Stops execution of the current DS2 program.","help":"STOP ;"},{"name":"Sum","description":"Adds or subtracts the result of an expression to an accumulator variable.","help":"*variable* + *expression*;*variable* – *expression*;","arguments":[{"name":"variable","placeholder":true,"description":"specifies the name of the accumulator variable, which contains a numeric value.","type":"value"},{"name":"expression","placeholder":true,"description":"is any valid DS2 expression.","type":"value"}]},{"name":"THREAD","description":"Creates a DS2 program thread.","help":"THREAD  thread [ ( data-type variable [ ,  ... data-type variable ] ) ] \n\t  [/ENCRYPT=SAS | AES] [/table-options];  \n\t … thread-body … \nENDTHREAD ;","arguments":[{"name":"catalog","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL catalog, which is a data container object that groups logically related schemas. The catalog is the first-level (top) grouping mechanism in a data organization hierarchy that is used along with a schema to provide a means of qualifying names.","type":"dataSet"},{"name":"schema","placeholder":true,"description":"is an implementation of the ANSI SQL standard for an SQL schema, which is a data container object that groups files such as tables and views and other objects supported by a data source such as stored procedures. The schema provides a grouping object that is used along with a catalog to provide a means of qualifying names.","type":"value"},{"name":"thread","placeholder":true,"description":"is the name of the thread.","type":"value"},{"name":"thread-body","placeholder":true,"description":"contains the declarations and methods in the thread.","type":"value"},{"name":"data-type","optional":true,"placeholder":true,"description":"is an optional data type declaration. For more information, see .","type":"value"},{"name":"variable","optional":true,"placeholder":true,"description":"names an optional variable that identifies the parameter.","type":"value"},{"name":"/ENCRYPT=","optional":true,"description":"specifies the encryption algorithm. SAS specifies the SAS Proprietary algorithm. AES specifies the Advanced Encryption Standard algorithm.","help":"/ENCRYPT=SAS | AES","type":"choice","arguments":[{"name":"SAS","type":"standalone"},{"name":"AES","type":"standalone"}]},{"name":"/table-options","optional":true,"placeholder":true,"description":"specifies optional arguments that the DS2 program applies when it creates a thread. For more information about table options, see .","type":"dataSet"}]},{"name":"VARARRAY","description":"Declares one or more DS2 variable arrays.","help":"VARARRAY  <data-type> array-name <array-declaration> [<variable-list>] [<having-clause>];\n< data-type >::= \n\t<exact-numeric-type> | <approximate-numeric-type> | <binary-string-type> | <string-type> \n\t\t| <date-type>  \n\t<exact-numeric-type> ::=  \n\t\t {INT  | BIGINT  | SMALLINT  | TINYINT \n\t\t\t | DECIMAL  [(precision [,scale] )] | NUMERIC   [(precision [,scale])] }          \n\t<approximate-numeric-type> ::=\n\t\t{ DOUBLE  | DOUBLE PRECISION  | FLOAT  | REAL  }\n\t<binary-string-type>::=\n\t\tBINARY (length) | VARBINARY (length)\n\t<string-type>::=  \n\t\tNCHAR  [ ( character-length ) ]   \n\t\t| NVARCHAR  [ ( character-length ) ]   \n\t\t| CHAR  [ ( character-length ) ]  [CHARACTER SET  character-set-identifier ] \n \n\t\t| VARCHAR  [ ( character-length ) ]  [CHARACTER SET  character-set-identifier ]  \n \n\t<date-type>::=  \n\t\t{ TIME  | TIMESTAMP  }  [ ( precision ) ] | DATE  \n   \n<array-declaration::=\\[array-bound>[,  ...<array-bound>]\\\n\t\n\t<array-bound>::= {[dim-lower:]dim-upper} | {[dim-lower:] {DIM(a[, n]) | *} }\n<variable-list>::=  \n\tname-varlist | \n\t\t| numbered-range-varlist\n\t\t|  name-range-list\n\t\t| name-prefix-list\n\t\t| type-varlist\n\t\t| special-name-list\n<having-clause>::=  \n\tHAVING  <having-option> [… <having-option> ]  \n\t\t<having-option>::=  \n\t\t\tLABEL  'string' | n'string'  \n\t\t\t| FORMAT  format \n \n\t\t\t| INFORMAT  format   ","arguments":[{"name":"INT","aliases":["INTEGER for INT"],"description":"specifies an integer array.","type":"standalone"},{"name":"BIGINT","aliases":["INTEGER for INT"],"description":"specifies an integer array.","type":"standalone"},{"name":"SMALLINT","aliases":["INTEGER for INT"],"description":"specifies an integer array.","type":"standalone"},{"name":"TINYINT","aliases":["INTEGER for INT"],"description":"specifies an integer array.","type":"standalone"},{"name":"DECIMAL[","description":"specifies an exact numeric variable or array.","help":"DECIMAL[(*precision* [, *scale*])]","type":"value","arguments":[{"name":"precision","placeholder":true,"description":"specifies the maximum total number of decimal digits that can be stored, both to the left and to the right of the decimal point","type":"value"},{"name":"scale","placeholder":true,"description":"specifies the maximum number of decimal digits that can be stored to the right of the decimal point","type":"value"}]},{"name":"NUMERIC[","description":"specifies an exact numeric variable or array.","help":"NUMERIC[(*precision* [, *scale*])]","type":"value","arguments":[{"name":"precision","placeholder":true,"description":"specifies the maximum total number of decimal digits that can be stored, both to the left and to the right of the decimal point","type":"value"},{"name":"scale","placeholder":true,"description":"specifies the maximum number of decimal digits that can be stored to the right of the decimal point","type":"value"}]},{"name":"DOUBLE","description":"specifies a floating-point array.","help":" <br/> DOUBLE PRECISION","type":"standalone"},{"name":"FLOAT","description":"specifies a floating-point array.","type":"standalone"},{"name":"REAL","description":"specifies a floating-point array.","type":"standalone"},{"name":"BINARY","description":"specifies a binary variable or array.","help":"BINARY (*length*)","type":"value"},{"name":"VARBINARY","aliases":["BINARY VARYING"],"description":"specifies a fixed-length or varying-length binary array.","help":"VARBINARY (*length*)","type":"value"},{"name":"BINARY","aliases":["BINARY VARYING"],"description":"specifies a fixed-length or varying-length binary array.","help":"BINARY  (*length*)","type":"value"},{"name":"NCHAR","aliases":["NATIONAL CHARACTER, NATIONAL CHAR for NCHAR","NATIONAL CHARACTER VARYING, NATIONAL CHAR VARYING for NVARCHAR","CHARACTER for CHAR","CHARACTER VARYING for VARCHAR"],"description":"specifies a character array.","type":"standalone"},{"name":"NVARCHAR","aliases":["NATIONAL CHARACTER, NATIONAL CHAR for NCHAR","NATIONAL CHARACTER VARYING, NATIONAL CHAR VARYING for NVARCHAR","CHARACTER for CHAR","CHARACTER VARYING for VARCHAR"],"description":"specifies a character array.","type":"standalone"},{"name":"CHAR","aliases":["NATIONAL CHARACTER, NATIONAL CHAR for NCHAR","NATIONAL CHARACTER VARYING, NATIONAL CHAR VARYING for NVARCHAR","CHARACTER for CHAR","CHARACTER VARYING for VARCHAR"],"description":"specifies a character array.","type":"standalone"},{"name":"VARCHAR","aliases":["NATIONAL CHARACTER, NATIONAL CHAR for NCHAR","NATIONAL CHARACTER VARYING, NATIONAL CHAR VARYING for NVARCHAR","CHARACTER for CHAR","CHARACTER VARYING for VARCHAR"],"description":"specifies a character array.","type":"standalone"},{"name":"TIME","description":"specifies a time array.","type":"standalone"},{"name":"TIMESTAMP","description":"specifies both a date and time array.","type":"standalone"},{"name":"DIM","description":"specifies that the size of the upper bounds of the array is determined by the number of elements in a dimension of a previously declared array by using a DIM function call.","help":"DIM(*a*[, *n*])","type":"value","arguments":[{"name":"a","placeholder":true,"description":"specifies the name of a previously declared array.","type":"value"},{"name":"n","placeholder":true,"description":"specifies the dimension, in a multidimensional array, for which you want to know the number of elements.","type":"value"}]},{"name":"*","description":"specifies a one-dimensional array in which the lower bound is 1 and the upper bound is the number of variables in the variable list.","type":"standalone"},{"name":"character-length","optional":true,"placeholder":true,"description":"specifies the maximum number of characters that the string can hold for NCHAR, NVARCHAR, CHAR, and VARCHAR data types.","type":"value"},{"name":"CHARACTER","optional":true,"description":"specifies character set encoding information for CHAR and VARCHAR data types.","help":"CHARACTER SET *character-set-identifier*","type":"value"},{"name":"precision","optional":true,"placeholder":true,"description":"specifies the precision for a TIME or TIMESTAMP data type.","type":"value"},{"name":"DATE","optional":true,"description":"specifies a date array.","type":"standalone"},{"name":"and","optional":true,"description":"specifies a positive or negative integer used to define the number and size of the array boundary.","help":"*dim-lower* and *dim-upper*","type":"value"},{"name":"<variable-list>","optional":true,"description":"specifies the name of the variable(s) that is to be referenced by the elements of the array.","type":"standalone"},{"name":"LABEL","optional":true,"description":"assigns a descriptive label to the variable array. The label can be a CHAR literal (string) or NCHAR literal (nstring).","help":"LABEL ","type":"standalone"},{"name":"'string'","optional":true,"placeholder":true,"description":"assigns a descriptive label to the variable array. The label can be a CHAR literal (string) or NCHAR literal (nstring).","type":"value"},{"name":"n''","optional":true,"description":"assigns a descriptive label to the variable array. The label can be a CHAR literal (string) or NCHAR literal (nstring).","help":"n'*string*'","type":"value"},{"name":"FORMAT","optional":true,"description":"Associates any valid DS2 format with the variable or array.","help":"FORMAT *format*","type":"value"},{"name":"INFORMAT","optional":true,"description":"Associates any valid SAS informat with the variable or array.","help":"INFORMAT *informat*","type":"value"}]},{"name":"VARLIST","description":"Creates a named variable list.","help":"VARLIST  *list-name* \\[*variable-list*\\];","arguments":[{"name":"list-name","placeholder":true,"description":"specifies the name of the variable list.","type":"value"},{"name":"[variable-list]","placeholder":true,"description":"specifies the variables that are to be referenced by the list.","type":"value"}]}],"interactive":true,"supportSiteInformation":{"docsetId":"proc","docsetVersion":"v_002","docsetTargetFile":"n0ujllmd28quj5n17r2ibrdya9ld.htm"}}