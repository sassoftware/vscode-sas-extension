{"name":"FACTMAC","statements":[{"name":"PROC FACTMAC","description":"The FACTMAC procedure implements the factorization machine model in SAS Viya. The flexible factorization machine model has applications in predictive modeling and recommendation (Rendle 2012). Factorization machines generalize matrix factorization, among other techniques. You can use the FACTMAC procedure to read and write data in distributed form, and to perform factorization in parallel by making full use of multicore computers or distributed computing environments. The FACTMAC procedure estimates factors for each of the nominal input variables you specify, in addition to estimating a global bias and a bias for each level of those nominal input variables. You also specify an interval target variable. The procedure computes the biases and factors by using the stochastic gradient descent (SGD) algorithm, which minimizes the root mean square error (RMSE) criterion on the input data table that you provide. In this method, each iteration attempts to reduce the RMSE. The SGD algorithm proceeds until the maximum number of iterations is reached. PROC FACTMAC stores the results of the factorization an output data table, which is produced by the OUTMODEL= option. This data table contains the factors in addition to the global bias and the biases for all the levels of the input variables, in addition to the factors. The corresponding level names are listed for ease of reference. The biases and factors are used for scoring.","help":"PROC FACTMAC <options>;                 \n\tAUTOTUNE <options>;                 \n\tCODE  FILE=filename;                 \n\tCROSSVALIDATION <options>;                 \n\tDISPLAY <table-list></ options>;                 \n\tDISPLAYOUT  table-spec-list </ options>;                 \n\tFREQ variable;                 \n\tID variables;                 \n\tINPUT  variables < LEVEL={INTERVAL | NOMINAL}>;                 \n\tOUTPUT  OUT=libref.data-table<options>;                 \n\tPARTITION  partition-option;                 \n\t SAVESTATE RSTORE=libref.data-table;                 \n\tTARGET  variable <LEVEL=INTERVAL>;                 \n\tWEIGHT variable;                 ","arguments":[{"name":"APPLYROWORDER","optional":true,"description":"uses a data distribution and row order as determined by a previous partition action call","type":"standalone"},{"name":"DATA=","optional":true,"description":"names the input data table for PROC FACTMAC to use. The default is the most recently created data table.","help":"DATA=*libref.data-table*","type":"dataSet"},{"name":"LEARNSTEP=","optional":true,"description":"specifies the learning step size for the stochastic gradient descent (SGD) algorithm, where number is a positive real number. The learning step size controls the amount by which the factors are updated at each iteration. By default, LEARNSTEP=0.001. This value can be tuned with the AUTOTUNE statement.","help":"LEARNSTEP=*number*","type":"value"},{"name":"MAXITER=","optional":true,"description":"specifies the maximum number of iterations for the algorithm to perform, where number is an integer greater than or equal to 1. In each iteration of the SGD method, the factors are recomputed. By default, MAXITER=1. This value can be tuned with the AUTOTUNE statement.","help":"MAXITER=*number*","type":"value"},{"name":"NFACTORS=","optional":true,"description":"specifies the number of factors to estimate for the model, where number is an integer greater than or equal to 1. By default, NFACTORS=1. This value can be tuned with the AUTOTUNE statement.","help":"NFACTORS=*number*","type":"value"},{"name":"NONNEGATIVE","optional":true,"description":"performs nonnegative factorization, in which the estimated factors are greater than or equal to 0 and the estimated biases are 0. By default, nonnegative factorization is not performed.","type":"standalone"},{"name":"NOPRINT","optional":true,"description":"suppresses ODS output","type":"standalone"},{"name":"NTHREADS=","optional":true,"description":"specifies the number of threads to use for the computation, where number-of-threads is an integer from 1 to 64, inclusive. The default value is the maximum number of available threads per computer.","help":"NTHREADS=*number-of-threads*","type":"value"},{"name":"OUTMODEL=","optional":true,"description":"specifies the output model data table to contain the computed factor parameters. libref.data-table is a two-level name, where libref refers to the library, and data-table specifies the name of the output data table.","help":"OUTMODEL=*libref.data-table*","type":"dataSet"},{"name":"SEED=","optional":true,"description":"specifies an integer that is used to start the pseudorandom number generator. This option enables you to reproduce the same sample output, but only when NTHREADS=1. If you do not specify a seed or you specify a value less than or equal to 0, the seed is generated from reading the time of day from the computerâ€™s clock. By default, SEED=0.","help":"SEED=*random-seed*","type":"value"}]},{"name":"AUTOTUNE","description":"searches for the best combination of values of the NFACTORS=, LEARNSTEP=, and MAXITER= options in the PROC FACTMAC statement. You cannot specify both the OUTPUT and AUTOTUNE statements in the same run of PROC FACTMAC. You cannot specify both the AUTOTUNE statement and the CROSSVALIDATION statement in the same run of PROC FACTMAC.","help":"AUTOTUNE &lt;options&gt;;                                              ","arguments":[{"name":"TUNINGPARAMETERS=","optional":true,"aliases":["TUNEPARMS="],"description":"specifies which parameters to tune and which ranges to tune over. If USEPARAMETERS=STANDARD, this option is ignored.","help":"TUNINGPARAMETERS=(*suboption* |...| &lt;*suboption*&gt;)","type":"value","arguments":[{"name":"NFACTORS","description":"specifies information about the number of factors to use for tuning the factorization machine model.","help":"NFACTORS (LB=*number* UB=*number* VALUES=*value-list* INIT=*number* EXCLUDE)","type":"value","arguments":[{"name":"LB=","description":"specifies the minimum number of factors to consider during tuning. If you specify this suboption, you cannot specify the VALUES= suboption. By default, LB=5.","help":"LB=*number*","type":"value"},{"name":"UB=","description":"specifies the maximum number of factors to consider during tuning. If you specify this suboption, you cannot specify the VALUES= suboption. By default, UB=30.","help":"UB=*number*","type":"value"},{"name":"VALUES=","description":"specifies a list of values to consider for the number of factors during tuning, where value-list is a space-separated list of integer numbers greater than or equal to 1. If you specify this suboption, you cannot specify either the LB= or UB= suboption.","help":"VALUES=*value-list*","type":"value"},{"name":"INIT=","description":"specifies the initial number of factors for the tuner to use. By default, INIT=5.","help":"INIT=*number*","type":"value"},{"name":"EXCLUDE","description":"excludes the number of factors from the tuning process. If you specify this suboption, any specified LB=, UB=, VALUES=, and INIT= suboptions are ignored.","type":"standalone"}]},{"name":"LEARNSTEP","description":"specifies information about the learning step to use for tuning the factorization machine model.","help":"LEARNSTEP (LB=*number* UB=*number* VALUES=*value-list* INIT=*number* EXCLUDE)","type":"value","arguments":[{"name":"LB=","description":"specifies the minimum learning step to consider during tuning. If you specify this suboption, you cannot specify the VALUES= suboption. By default, LB=0.001.","help":"LB=*number*","type":"value"},{"name":"UB=","description":"specifies the maximum learning step to consider during tuning. If you specify this suboption, you cannot specify the VALUES= suboption. By default, UB=1.","help":"UB=*number*","type":"value"},{"name":"VALUES=","description":"specifies a list of learning steps to consider during tuning, where value-list is a space-separated list of numbers greater than 0. If you specify this suboption, you cannot specify either the LB= or UB= suboption.","help":"VALUES=*value-list*","type":"value"},{"name":"INIT=","description":"specifies the initial learning step for the tuner to use. By default, INIT=0.001.","help":"INIT=*number*","type":"value"},{"name":"EXCLUDE","description":"excludes the learning step from the tuning process. If you specify this suboption, any specified LB=, UB=, VALUES=, and INIT= suboptions are ignored.","type":"standalone"}]},{"name":"MAXITER","description":"specifies information about the maximum number of iterations to use for tuning the factorization machine model.","help":"MAXITER (LB=*number* UB=*number* VALUES=*value-list* INIT=*number* EXCLUDE)","type":"value","arguments":[{"name":"LB=","description":"specifies the minimum number of iterations to consider during tuning. If you specify this suboption, you cannot specify the VALUES= suboption. By default, LB=10.","help":"LB=*number*","type":"value"},{"name":"UB=","description":"specifies the maximum number of iterations to consider during tuning. If you specify this suboption, you cannot specify the VALUES= suboption. By default, UB=200.","help":"UB=*number*","type":"value"},{"name":"VALUES=","description":"specifies a list of numbers of trees to consider during tuning, where value-list is a space-separated list of positive integers. If you specify this suboption, you cannot specify either the LB= or UB= suboption.","help":"VALUES=*value-list*","type":"value"},{"name":"INIT=","description":"specifies the initial number of iterations for the tuner to use. By default, INIT=30.","help":"INIT=*number*","type":"value"},{"name":"EXCLUDE","description":"excludes the number of iterations from the tuning process. If you specify this suboption, any specified LB=, UB=, VALUES=, and INIT= suboptions are ignored.","type":"standalone"}]}]}]},{"name":"CODE","description":"generates SAS DATA step code that mimics the computations that are performed. The generated SAS DATA step code can be used for scoring new observations. Only one CODE statement is processed. If you specify multiple CODE statements, only the first one is used. The CODE statement is optional. If you do not include a CODE statement, no score code is generated.","help":"CODE  FILE=filename;                                              ","arguments":[{"name":"FILE=","optional":true,"description":"specifies the name of the file to write the SAS score code to.","help":"FILE=*filename*","type":"value"}]},{"name":"CROSSVALIDATION","description":"performs k-fold cross validation to find the average estimated validation error. You cannot specify this statement if you specify either the AUTOTUNE statement or the PARTITION statement.","help":"CROSSVALIDATION &lt;options&gt;;                                              ","arguments":[{"name":"KFOLD=","optional":true,"description":"specifies the number of partition folds in the cross validation process, where number is between 2 and 20, inclusive. By default, KFOLD=5.","help":"KFOLD=*number*","type":"value"},{"name":"NOPARALLEL","optional":true,"description":"specifies that k-fold cross validation not be run in parallel. By default, the process runs in parallel.","type":"standalone"},{"name":"NSUBSESSIONWORKERS=","optional":true,"description":"specifies the number of worker nodes to use in parallel subsessions. If you omit this option or if the number is 0, the number of worker nodes is determined automatically.","help":"NSUBSESSIONWORKERS=*number*","type":"value"}]},{"name":"DISPLAY","description":"enables you to specify a list of display tables to display or exclude. This statement is similar to the ODS SELECT, ODS EXCLUDE, and ODS TRACE statements. However, the DISPLAY statement can improve performance when a large number of tables could be generated (such as in BY-group processing). The procedure processes the DISPLAY statement on a CAS server and thus sends only a subset of ODS tables to the SAS client. Because ODS statements are processed on a SAS client, first all the generated display tables are sent to the client, and then the client creates a subset. If you use both DISPLAY and ODS statements together, the DISPLAY statement takes precedence over the ODS statements. Note that the ODS EXCLUDE statement processes tables that are sent to the client after they have been filtered by the DISPLAY statement. In some cases, it might appear that the ODS EXCLUDE statement is taking precedence because it can further filter the tables.","help":"DISPLAY &lt;table-list&gt;&lt;/ options&gt;;                                              ","arguments":[{"name":"CASESENSITIVE","optional":true,"followsDelimiter":"/","description":"performs a case-sensitive comparison of table names in the table-list to display table names when tables are subsetted for display. To preserve case, you must enclose table names in the table-list in quotation marks.","type":"standalone"},{"name":"EXCLUDE","optional":true,"followsDelimiter":"/","description":"displays all display tables except those that you specify in the table-list.","type":"standalone"},{"name":"EXCLUDEALL","optional":true,"followsDelimiter":"/","description":"suppresses display of all tables. This option takes precedence over the other options.","type":"standalone"},{"name":"TRACE","optional":true,"followsDelimiter":"/","description":"displays the display table names, labels, and paths.","type":"standalone"}]},{"name":"DISPLAYOUT","description":"enables you to create output tables from your displayed output. This statement is similar to the ODS OUTPUT statement. The table-spec-list specifies a list of output tables in key=value or key format. key=value specifies key as the ODS table name, path, or partial pathname, and value as the output table name. key is the ODS table name and the output table name. You cannot specify the ODS table named OutputCasTables in the table-spec-list. You also cannot specify the ODS tables that are created by the AUTOTUNE and CROSSVALIDATION statements. The DISPLAYOUT statement does not support regular expressions.","help":"DISPLAYOUT  table-spec-list &lt;/ options&gt;;                                            ","arguments":[{"name":"INCLUDEALL","optional":true,"followsDelimiter":"/","description":"creates output tables for all display tables. The name of the created output table is the same as the name of the corresponding display table. If you specify this option, the table-spec-list specification is ignored.","type":"standalone"},{"name":"NOREPLACE","optional":true,"followsDelimiter":"/","description":"does not replace any existing output table of the same name.","type":"standalone"},{"name":"REPEATED","optional":true,"followsDelimiter":"/","description":"replicates all output tables on all nodes.","type":"standalone"}]},{"name":"FREQ","description":"The variable in the FREQ statement identifies a numeric variable in the input data table that contains the frequency of occurrence of each observation. If the value of the variable for an observation is not an integer, it is truncated to an integer; if the value is less than 1 or missing, the observation is not used in the analysis. When the FREQ statement is omitted, each observation is assigned a frequency of 1.","help":"FREQ *variable*;                                              "},{"name":"ID","description":"lists one or more variables that are to be copied from the input data table to the output data tables that are specified in the OUT= option in the OUTPUT statement and the RSTORE= option in the SAVESTATE statement.","help":"ID *variables*;                                              "},{"name":"INPUT","description":"specifies the names of the variables to be used in the factorization. It names one or more input variables that use common options. If you want to use different options for different variables, you can specify multiple INPUT statements. By default, LEVEL=INTERVAL for numeric variables and LEVEL=NOMINAL for categorical variables. You must specify at least two nominal input variables. You can also specify any number of interval input variables.","help":"INPUT  variables &lt; LEVEL={INTERVAL | NOMINAL}&gt;;                                              ","arguments":[{"name":"LEVEL=","optional":true,"description":"specifies the level of measurement of the variables.","help":"LEVEL=INTERVAL | NOMINAL","type":"choice","arguments":[{"name":"INTERVAL","description":"specifies that the level of measurement of the variables is interval.","type":"standalone"},{"name":"NOMINAL","description":"specifies that the level of measurement of the variables is nominal.","type":"standalone"}]}]},{"name":"OUTPUT","description":"creates an output data table to contain the results of the procedure run. You cannot specify both the OUTPUT and AUTOTUNE statements in the same run of PROC FACTMAC.","help":"OUTPUT  OUT=*libref.data-table*&lt;options&gt;;                                              ","arguments":[{"name":"OUT=","optional":true,"description":"names the output data table for PROC FACTMAC to use. You must specify this option before any other options. libref.data-table is a two-level name, where libref refers to a collection of information that is defined in the LIBNAME statement and includes the library, which includes a path to where the data table is to be stored, and a session identifier, which defaults to the active session but which can be explicitly defined in the LIBNAME statement. data-table specifies the name of the output data table.","help":"OUT=*libref.data-table*","type":"dataSet"},{"name":"COPYVAR=","optional":true,"aliases":["COPYVARS=(variables)"],"description":"lists one or more variables from the input data table to be transferred to the output data table.","help":"COPYVAR={*variable*}","type":"value"},{"name":"ROLE","optional":true,"description":"specifies a numeric variable that indicates the role that each observation plays in fitting the model. The default name is _ROLE_. If you do not partition the input data by specifying a PARTITION statement, then the role variable value is 1 for all observations.","help":"ROLE&lt;=*variable*&gt;","type":"standaloneOrValue"}]},{"name":"PARTITION","description":"specifies how observations in the input data set are logically partitioned into disjoint subsets for model training, validation, and testing. Either you can designate a variable in the input data table and a set of formatted values of that variable to determine the role of each observation, or you can specify proportions to use for randomly assigning observations to each role.","help":"PARTITION  partition-option;                                              ","arguments":[{"name":"FRACTION","optional":true,"description":"randomly assigns specified proportions of the observations in the input data table to the roles. You specify the proportions for testing and validation by using the TEST= and VALIDATE= suboptions. If you specify both the TEST= and VALIDATE= suboptions, then the sum of the specified fractions must be less than 1 and the remaining fraction is the proportion of the observations assigned to the training role. The SEED= option specifies an integer that is used to start the pseudorandom number generator for random partitioning of data for training, testing, and validation. If you do not specify SEED=number or if number is less than or equal to 0, the seed is generated by reading the time of day from the computerâ€™s clock. NOTE: You cannot specify the FRACTION option and the AUTOTUNE statement at the same time.","help":"FRACTION(&lt;TEST=*fraction*&gt; &lt;VALIDATE=*fraction*&gt; &lt;SEED=*number*&gt;)","type":"standaloneOrValue"},{"name":"ROLE=","optional":true,"aliases":["ROLEVAR="],"description":"names the variable in the input data table whose values are used to assign roles to each observation. This variable cannot also appear as an analysis variable in other statements or options. The TEST=, TRAIN=, and VALIDATE= suboptions specify the formatted values of this variable that are used to assign observation roles. If you do not specify the TRAIN= suboption, then all observations whose role is not determined by the TEST= or VALIDATE= suboption are assigned to the training role.","help":"ROLE=*variable* (&lt;TEST=*'value'*&gt; &lt;TRAIN=*'value'*&gt; &lt;VALIDATE=*'value'*&gt;) ","type":"value"}]},{"name":"SAVESTATE","description":"creates an analytic store for the model and saves it as a binary object in a data table. You can use the analytic store in the ASTORE procedure to score new data.","help":"SAVESTATE RSTORE= *libref.data-table*;                                              ","arguments":[{"name":"RSTORE=","optional":true,"description":"specifies a data table in which to save the analytic store for the model. libref.data-table is a two-level name, where libref refers to the library, and data-table specifies the name of the output data table.","help":"RSTORE=*libref.data-table*","type":"dataSet"}]},{"name":"TARGET","description":"names the target variable whose values PROC FACTMAC predicts. The target must be interval and must be different from the variables in the INPUT statement.","help":"TARGET  variable &lt;LEVEL=INTERVAL&gt;;                                              ","arguments":[{"name":"LEVEL=","optional":true,"description":"specifies the level of measurement of the variables. PROC FACTMAC currently accepts only interval target variables.","help":"LEVEL=INTERVAL","type":"value"}]},{"name":"WEIGHT","description":"The variable in the WEIGHT statement is used as a weight to perform a weighted analysis of the data. Observations that have nonpositive or missing weights are not included in the analysis. When the WEIGHT statement is omitted, all observations that are used in the analysis are assigned a weight of 1.","help":"WEIGHT *variable*;                                              "}],"supportSiteInformation":{"docsetId":"casml","docsetVersion":"latest","docsetTargetFile":"casml_factmac_toc.htm"}}