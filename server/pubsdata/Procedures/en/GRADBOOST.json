{"name":"GRADBOOST","statements":[{"name":"PROC GRADBOOST","description":"The GRADBOOST procedure creates a predictive model called a gradient boosting model in SAS Viya. A gradient boosting model consists of multiple decision trees. A predictive model defines a relationship between input variables and a target variable. The purpose of a predictive model is to predict a target value from inputs. The GRADBOOST procedure creates the model by using training data in which the target values are known. The model can then be applied to observations in which the target is unknown. If the predictions fit the new data well, the model is said to generalize well. Good generalization is the primary goal of predictive tasks. A predictive model might fit the training data well but generalize poorly.","help":"PROC GRADBOOST \n        <options>; \n\t\n          VIICODE \n          <options>;\n        \n\tAUTOTUNE \n          <options>;\n        \n\tCODE \n          <options>;\n        \n\tCROSSVALIDATION \n          <options>;\n        \n\tID \n          variables;\n        \n\tINPUT \n          variables\n          <options>;\n        \n\tOUTPUT \n          <OUT=CAS-libref.data-table>\n          <options>;\n        \n\tPARTITION \n          <options>;\n        \n\tSAVESTATE \n          <RSTORE=CAS-libref.data-table>           ;\n        \n\tTARGET \n          <variable>\n          <LEVEL=<NOMINAL | INTERVAL>>           ;\n        \n\tTRANSFERLEARN \n          variable\n          <options>;\n        \n\tWEIGHT \n          variable;\n      ","arguments":[{"name":"ADDTREES","optional":true,"aliases":["ADDTREE"],"description":"Adds trees to an already generated gradient boosting model, which is specified in the INMODEL= option.","type":"standalone"},{"name":"ASSIGNMISSING=","optional":true,"description":"Specifies how to handle missing values during training and creates a splitting rule to handle missing values and unknown levels during scoring. An unknown level is a level of a categorical predictor variable that does not exist in the training data but is encountered during scoring.","help":"ASSIGNMISSING=NONE | MACSMALL | USEINSEARCH","type":"choice","arguments":[{"name":"NONE","description":"During training, excludes observations that have any missing variables from the model.","type":"standalone"},{"name":"MACSMALL","description":"During training, treats a missing value as a separate, legitimate value in the search for a split for the primary splitting rule.","type":"standalone"},{"name":"USEINSEARCH","description":"During training, treats a missing value as a separate, legitimate value in the search for a split for the primary splitting rule.","type":"standalone"}]},{"name":"BINMETHOD=","optional":true,"description":"Specifies how to bin interval input variables prior to growing the forest model. The number of bins that are created is determined by the NUMBIN= option.","help":"BINMETHOD=BUCKET | QUANTILE","type":"choice","arguments":[{"name":"BUCKET","description":"Bins interval input variables into fixed-width bins.","type":"standalone"},{"name":"QUANTILE","description":"Bins interval input variables into bins according to their quantile.","type":"standalone"}]},{"name":"DATA=","optional":true,"description":"Names the input data table for PROC GRADBOOST to use. The default is the most recently created data table. CAS-libref.data-table is a two-level name, where","help":"DATA=*CAS-libref.data-table*","type":"dataSet"},{"name":"EARLYSTOP=","optional":true,"description":"Specifies options for stopping the gradient boosting model training early.","help":"EARLYSTOP=STAGNATION= | TOLERANCE=","type":"choice","arguments":[{"name":"STAGNATION=","type":"value"},{"name":"TOLERANCE=","type":"value"}]},{"name":"INMODEL=","optional":true,"description":"Specifies the data table that you previously saved as a gradient boosting model by using the OUTMODEL= option in a previous run of PROC GRADBOOST. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the input data table.","help":"INMODEL=*CAS-libref.data-table*","type":"dataSet"},{"name":"LASSO=","optional":true,"aliases":["L1="],"description":"Specifies the L1 norm regularization parameter, where number must be nonnegative.","type":"value"},{"name":"LEARNINGRATE=","optional":true,"description":"Specifies the learning rate for the gradient boosting algorithm.","help":"LEARNINGRATE=*number*","type":"value"},{"name":"MAXBRANCH=","optional":true,"description":"Specifies the maximum number of children per node in the tree. PROC GRADBOOST tries to create this number of children unless it is impossible (for example, if a split variable does not have enough levels).","help":"MAXBRANCH=*b*","type":"value"},{"name":"MAXDEPTH=","optional":true,"description":"Specifies the maximum depth of the tree to be grown.","help":"MAXDEPTH=*number*","type":"value"},{"name":"MINLEAFSIZE=","optional":true,"description":"Specifies the minimum number of observations that each child of a split must contain in the training data table in order for the split to be considered.","help":"MINLEAFSIZE=*number*","type":"value"},{"name":"MINUSEINSEARCH=","optional":true,"description":"Specifies a threshold for using missing values in the split search when ASSIGNMISSING= USEINSEARCH. If the number of observations in which the splitting variable has missing values is greater than or equal to number, then PROC GRADBOOST uses the USEINSEARCH policy to handle missing values for that variable.","help":"MINUSEINSEARCH=*number*","type":"value"},{"name":"NOPRINT","optional":true,"description":"Suppresses ODS output.","type":"standalone"},{"name":"NTREES=","optional":true,"description":"Specifies the number of trees to grow in the gradient boosting model.","help":"NTREES=*number*","type":"value"},{"name":"NUMBIN=","optional":true,"description":"Specifies the number of bins in which to bin the interval input variables. PROC GRADBOOST bins continuous predictors to a fixed bin size. This option controls the number of bins and thereby also the size of the bins.","help":"NUMBIN=*number*","type":"value"},{"name":"OUTMODEL=","optional":true,"description":"Specifies the data table to which you want to save the gradient boosting model. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table. For more information, see the DATA= option and the section “Using CAS Sessions and CAS Engine Librefs” on page 50. If you do not specify a CAS-libref , the data-table is saved to the Work library.","type":"value"},{"name":"PRINTTARGET","optional":true,"description":"Outputs tables that indicate generated columns in the OUT= table from the OUTPUT statement.","type":"standalone"},{"name":"RBAIMP","optional":true,"description":"Creates a variable importance table by using random branch assignment (RBA).","type":"standalone"},{"name":"RIDGE=","optional":true,"aliases":["L2="],"description":"Specifies the L2 norm regularization parameter on prediction. The number must be nonnegative.","type":"value"},{"name":"SAMPLINGRATE=","optional":true,"description":"Specifies the fraction of the random sample of the training data to be used for growing each tree in the boosting model.","help":"SAMPLINGRATE=*number*","type":"value"},{"name":"SEED=","optional":true,"description":"Specifies the initial seed for random number generation for model building. The value of number must be an integer. If you do not specify a seed or you specify a value less than or equal to 0, the seed is generated from reading the time of day from the computer’s clock.","help":"SEED=*number*","type":"value"},{"name":"VARS_TO_TRY=","optional":true,"aliases":["M="],"description":"Specifies the number of input variables to consider splitting on in a node, where m ranges from 1 to the number of input variables.","help":"VARS_TO_TRY=*m*","type":"value"},{"name":"VII=","optional":true,"aliases":["INTERACTIONIMP="],"description":"Calculates the variable interaction importance, which is described in the section Variable nteraction Importance.","help":"VII=2 | 3","type":"choice","arguments":[{"name":"2","description":"Calculates the importance of all two-way variable interactions.","type":"standalone"},{"name":"3","description":"Calculates the importance of all three-way and all two-way variable interactions.","type":"standalone"}]}]},{"name":"VIICODE","description":"The VIICODE statement writes SAS DATA step code to a file or to a catalog entry. The SAS DATA step code creates new variables on the basis of the detected variable interactions.","help":" VIICODE <ADD>\n                                    <IMIT=number>\n                                    <MISS> ...","arguments":[{"name":"ADD","optional":true,"description":"Requests that the newly created variables be of the form V + W.","type":"standalone"},{"name":"IMIT=","optional":true,"description":"Specifies the maximum number of new variables to create. By default, LIMIT=200.","help":"IMIT=*number*","type":"value"},{"name":"MISS","optional":true,"description":"Requests that the generated code handle missing values.","type":"standalone"},{"name":"MULTIPLY","optional":true,"description":"Requests that the newly created variables be of the form V x W.","type":"standalone"},{"name":"SUBSTRACT","optional":true,"description":"Requests that the newly created variables be of the form V - W.","type":"standalone"},{"name":"THRESHOLD=","optional":true,"description":"Requests that interactions with an importance less than number times the maximum interaction importance be ignored, where number must be between 0 and 1. By default, THRESHOLD=0.0001.","help":"THRESHOLD=*number*","type":"value"}]},{"name":"AUTOTUNE","description":"The AUTOTUNE statement searches for the best combination of values of the LASSO=, LEARNINGRATE=, NTREES=, RIDGE=, SAMPLINGRATE=, and VARS_TO_TRY= options in the PROC GRADBOOST statement. You cannot specify both the AUTOTUNE statement and the CROSSVALIDATION statement in the same procedure run.","help":"AUTOTUNE <EVALHISTORY=<ALL | LOG | NONE>... >\n                                    <FRACTION=number>\n                                    <KFOLD=number> ...","arguments":[{"name":"EVALHISTORY=","optional":true,"description":"Specifies how to report the evaluation history of the tuner.","help":"EVALHISTORY=ALL | LOG | NONE | TABLE","type":"choice","arguments":[{"name":"ALL","description":"Reports each evaluation in the log and creates the EvaluationHistory ODS table.","type":"standalone"},{"name":"LOG","description":"Prints the following information to the log for each evaluation: evaluation number, objective value, best objective value up to that point, evaluation time, and elapsed time since the beginning of the tuning process.","type":"standalone"},{"name":"NONE","description":"Suppresses reporting of evaluations in the log and does not create the EvaluationHistory ODS table.","type":"standalone"},{"name":"TABLE","description":"Creates the EvaluationHistory ODS table, which contains all evaluated points. The table contains columns for the evaluation number, all tuning parameters, and the objective function value.","type":"standalone"}]},{"name":"FRACTION=","optional":true,"description":"Specifies the fraction of all data to be used for validation, where number must be between 0.01 and 0.99, inclusive. If you specify this option, the tuner uses a single partition validation for finding the objective value (validation error estimate). This option might not be advisable for small or unbalanced data tables where the random assignment of the validation subset might not provide a good estimate of error. For large, balanced data tables, a single validation partition is usually sufficient for estimating error; a single partition is more efficient than cross validation in terms of the total execution time. By default, FRACTION=0.3. You cannot specify this option in combination with the KFOLD= option.","help":"FRACTION=*number*","type":"value"},{"name":"KFOLD=","optional":true,"description":"Specifies the number of partition folds in the cross validation process, where number must be between 2 and 20, inclusive. If you specify this option, the tuner uses cross validation to find the objective value. In cross validation, each model evaluation requires number of training executions (on number–1 data folds) and number of scoring executions (on 1 hold-out fold). Thus, the evaluation time is increased by approximately number. For small to medium data tables or for unbalanced data tables, cross validation provides on average a better representation of error across the entire data table (a better generalization error). By default, KFOLD=5. You cannot specify this option in combination with the FRACTION= option.","help":"KFOLD=*number*","type":"value"},{"name":"MAXEVALS=","optional":true,"description":"Specifies the maximum number of configuration evaluations allowed for the tuner, where number must be an integer greater than or equal to 3. When the number of evaluations is reached, the tuner terminates the search and returns the results. To produce a single objective function value (validation error estimate), each configuration evaluation requires either a single model training and scoring execution on a validation partition, or a number of training and scoring executions equal to the value of the KFOLD= option for cross validation. The MAXEVALS= option might lead to termination before the value of the MAXITER= option or the MAXTIME= option is reached. By default, MAXEVALS=50.","help":"MAXEVALS=*number*","type":"value"},{"name":"MAXITER=","optional":true,"description":"Specifies the maximum number of iterations of the optimization tuner, where number must be greater than or equal to 1. Each iteration normally involves a number of objective evaluations up to the value of the POPSIZE= option. The MAXITER= option might lead to termination before the value of the MAXEVALS= option or the MAXTIME= option is reached. By default, MAXITER=5.","help":"MAXITER=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"Specifies the maximum time (in seconds) allowed for the tuner, where number must be greater than or equal to 1. When this value is reached, the tuner terminates the search and returns results. The actual run time for optimization might be longer because it includes the remaining time needed to finish the current evaluation. For long-running model training (large data tables), the actual run time might significantly exceed number. The MAXTIME= option might lead to termination before the value of the MAXEVALS= option or the MAXITER= option is reached. By default, MAXTIME=36000.","help":"MAXTIME=*number*","type":"value"},{"name":"NPARALLEL=","optional":true,"description":"Specifies the number of evaluations to be performed in parallel, where number must be greater than or equal to 0. When SEARCHMETHOD=GA is specified, the value of number is equal to the value of the POPSIZE= option minus one. When SEARCHMETHOD=LHS or SEARCHMETHOD=RANDOM is specified, the value of number is equal to the value of SAMPLESIZE= option.","help":"NPARALLEL=*number*","type":"value"},{"name":"NSUBSESSIONWORKERS=","optional":true,"description":"Specifies the number of workers to use in parallel subsessions. When evaluating alternative configurations in parallel, a number of subsessions is created by the tuner, with each subsession potentially using multiple workers. The number of workers used in a parallel subsession is determined by using either NSUBSESSIONWORKERS=number, if specified, or determined automatically based upon the size of the data.","help":"NSUBSESSIONWORKERS=*number*","type":"value"},{"name":"OBJECTIVE=","optional":true,"description":"Specifies which measure of model performance the tuner uses as the objective function.","help":"OBJECTIVE=ASE | AUC | F05 | F1 | GAMMA | GINI | KS | MAE | MCE | MCLL | MISC | MSE | MSLE | RASE | RMAE | RMSLE | TAU*function*","type":"value","arguments":[{"name":"ASE","description":"Uses average squared error as the objective function.","type":"standalone"},{"name":"AUC","description":"Uses area under the curve as the objective function (nominal type only).","type":"standalone"},{"name":"F05","description":"Uses the F0.5 coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"F1","description":"Uses the F1 coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"GAMMA","description":"Uses the gamma coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"GINI","description":"Uses the Gini coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"KS","description":"Uses the Kolmogorov-Smirnov coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"MAE","description":"Uses the mean absolute error as the objective function (interval type only).","type":"standalone"},{"name":"MCE","description":"Uses the misclassification rate as the objective function (nominal type only).","type":"standalone"},{"name":"MCLL","description":"Uses the multiclass log loss as the objective function (nominal type only).","type":"standalone"},{"name":"MISC","description":"Uses the misclassification error percentage as the objective function (nominal type only).","type":"standalone"},{"name":"MSE","description":"Uses the mean squared error as the objective function (interval type only).","type":"standalone"},{"name":"MSLE","description":"Uses the mean squared logarithmic error as the objective function (interval type only).","type":"standalone"},{"name":"RASE","description":"Uses the root average squared error as the objective function.","type":"standalone"},{"name":"RMAE","description":"Uses the root mean absolute error as the objective function (interval type only).","type":"standalone"},{"name":"RMSLE","description":"Uses the root mean squared logarithmic error as the objective function (interval type only).","type":"standalone"},{"name":"TAU","description":"Uses the tau coefficient as the objective function (nominal type only).","type":"standalone"}]},{"name":"POPSIZE=","optional":true,"description":"Specifies the maximum number of evaluations in one iteration (population), where number must be greater than or equal to 1. In some cases, the tuner algorithm might generate a number of new configurations smaller than number. By default, POPSIZE=10.","help":"POPSIZE=*number*","type":"value"},{"name":"SAMPLESIZE=","optional":true,"description":"Specifies the total number of evaluations, where number must be greater than or equal to 1. You can specify this option when SEARCHMETHOD=RANDOM or SEARCHMETHOD=LHS. This option is ignored when SEARCHMETHOD=GA.","help":"SAMPLESIZE=*number*","type":"value"},{"name":"SEARCHMETHOD=","optional":true,"description":"Specifies the search method to use for tuning.","help":"SEARCHMETHOD=BAYESIAN | GA | LHS | RANDOM","type":"choice","arguments":[{"name":"BAYESIAN","description":"Builds a Kriging surrogate model to approximate the objective value, and uses this surrogate model for generating new alternative configurations at each iteration.","type":"standalone"},{"name":"GA","description":"Uses an initial Latin hypercube sample that seeds a genetic algorithm to generate a new population of alternative configurations at each iteration.","type":"standalone"},{"name":"LHS","description":"Uses a Latin hypercube to generate a single sample of configurations that is uniform in each tuning parameter, but random in combinations.","type":"standalone"},{"name":"RANDOM","description":"Generates a single sample of purely random configurations.","type":"standalone"}]},{"name":"TARGETEVENT=","optional":true,"description":"Specifies the target event to use for calculating the selected objective function. This option is ignored when the value of the OBJECTIVE= option is not AUC, F1, F05, GINI, GAMMA, TAU, or KS.","help":"TARGETEVENT=*string*","type":"value"},{"name":"TUNINGPARAMETERS=","optional":true,"description":"Specifies which parameters to tune and which ranges to tune over. If USEPARAMETERS=STANDARD, this option is ignored.","help":"TUNINGPARAMETERS=NFACTORS | LB= | UB= | VALUES= | INIT= | EXCLUDE | LEARNSTEP | MAXITER","type":"choice","arguments":[{"name":"NFACTORS","type":"standalone"},{"name":"LB=","type":"value"},{"name":"UB=","type":"value"},{"name":"VALUES=","type":"value"},{"name":"INIT=","type":"value"},{"name":"EXCLUDE","type":"standalone"},{"name":"LEARNSTEP","type":"standalone"},{"name":"MAXITER","type":"standalone"}]},{"name":"USEPARAMETERS=","optional":true,"description":"Specifies how to handle the TUNINGPARAMETERS= option.","help":"USEPARAMETERS=STANDARD | CUSTOM | COMBINED*tuning-parameter-option*","type":"value","arguments":[{"name":"STANDARD","description":"Tunes using the default bounds and initial values for all parameters.","type":"standalone"},{"name":"CUSTOM","description":"Tunes only the parameters that are specified in the TUNINGPARAMETERS= option.","type":"standalone"},{"name":"COMBINED","description":"Tunes the parameters that are specified in the TUNINGPARAMETERS= option and uses default bounds and initial values to tune all other parameters.","type":"standalone"}]}]},{"name":"CODE","description":"The CODE statement writes SAS DATA step code for computing predicted values of the fitted model either to a file or to a catalog entry. This code can then be included in a DATA step to score new data.","help":"CODE <COMMENT>\n                                    <FILE=filename>\n                                    <FORMATWIDTH=width> ...","arguments":[{"name":"COMMENT","optional":true,"description":"Adds comments to the generated code.","type":"standalone"},{"name":"FILE=","optional":true,"description":"Names the file where the generated code is saved.","help":"FILE=*filename*","type":"value"},{"name":"FORMATWIDTH=","optional":true,"description":"Specifies the numeric format width for the regression coefficients.","help":"FORMATWIDTH=*width*","type":"value"},{"name":"INDENTSIZE=","optional":true,"description":"Specifies the number of spaces to indent the generated code.","help":"INDENTSIZE=*number*","type":"value"},{"name":"LABELID=","optional":true,"description":"Specifies a number used to construct names and labels.","help":"LABELID=*id*","type":"value"},{"name":"LINESIZE=","optional":true,"description":"Specifies the line size for the generated code.","help":"LINESIZE=*number*","type":"value"},{"name":"NOTRIM","optional":true,"description":"Compares formatted values, including blank padding.","type":"standalone"},{"name":"OUT=","optional":true,"description":"Creates a CAS table that contains the score code. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUT=*CAS-libref.data-table*","type":"dataSet"}]},{"name":"CROSSVALIDATION","description":"The CROSSVALIDATION statement performs a k-fold cross validation process to find the average estimated validation error. You cannot specify the CROSSVALIDATION statement if you specify either the AUTOTUNE statement or the PARTITION statement.","help":"CROSSVALIDATION <KFOLD=number>\n                              ","arguments":[{"name":"KFOLD=","optional":true,"description":"Specifies the number of partition folds in the cross validation process, where number must be between 2 and 20, inclusive.","help":"KFOLD=*number*","type":"value"}]},{"name":"ID","description":"The ID statement lists one or more variables that are to be copied from the input data table to the output data tables that are specified in the OUT= option in the OUTPUT statement and the RSTORE= option in the SAVESTATE statement.","help":"ID variables"},{"name":"INPUT","description":"The INPUT statement names input variables that share common options. The INPUT statement can be repeated.","help":"INPUT                                     <LEVEL=<NOMINAL | INTERVAL>>\n                              ","arguments":[{"name":"LEVEL=","optional":true,"followsDelimiter":"/","description":"Specifies the level of measurement of two variables.","help":"LEVEL=NOMINAL | INTERVAL","type":"choice","arguments":[{"name":"NOMINAL","followsDelimiter":"/","description":"Specifies that the level of measurement of the variables is nominal.","type":"standalone"},{"name":"INTERVAL","followsDelimiter":"/","description":"Specifies that the level of measurement of the variables is interval.","type":"standalone"}]}]},{"name":"OUTPUT","description":"The OUTPUT statement creates an output data table that contains the results of running PROC GRADBOOST.","help":"OUTPUT <COPYVAR=variable | COPYVARS=(variables)>\n                                    <OUT=CAS-libref.data-table>\n                                    <ROLE<=name>> ...","arguments":[{"name":"COPYVAR=","optional":true,"aliases":["COPYVARS="],"description":"Lists one or more variables from the input data table to be transferred to the output data table.","type":"value"},{"name":"OUT=","optional":true,"description":"Syntax: OUT=CAS-libref.data-table names the output data table for PROC GRADBOOST to use. CAS-libref.data-table is a two-level name, where","help":"OUT=*CAS-libref.data-table*","type":"dataSet"},{"name":"ROLE","optional":true,"description":"Generates a numeric variable that indicates the role played by each observation in fitting the model. By default, the variable is named _ROLE_.","type":"standalone"}]},{"name":"PARTITION","description":"The PARTITION statement specifies how observations in the input data set are logically partitioned into disjoint subsets for model training, validation, and testing","help":"PARTITION <FRACTION(< TEST=fraction > < VALIDATE=fraction > < SEED=number >)>\n                                    <ROLE=|ROLEVAR=variable (< TEST='value' > < TRAIN='value' > < VALIDATE='value' >)>\n                              ","arguments":[{"name":"FRACTION=","optional":true,"description":"Randomly assigns specified proportions of the observations in the input data table to the roles. You specify the proportions for testing and validation by using the TEST= and VALIDATE= suboptions. If you specify both the TEST= and VALIDATE= suboptions, then the sum of the specified fractions must be less than 1 and the remaining fraction of the observations are assigned to the training role. The SEED= option specifies an integer that is used to start the pseudorandom number generator for random partitioning of data for training, testing, and validation. If you do not specify SEED=number or if number is less than or equal to 0, the seed is generated by reading the time of day from the computer’s","help":"FRACTION=VALIDATE= | TEST= | SEED=","type":"choice","arguments":[{"name":"VALIDATE=","type":"value"},{"name":"TEST=","type":"value"},{"name":"SEED=","type":"value"}]},{"name":"ROLE=","optional":true,"aliases":["ROLEVAR="],"description":"Names the variable in the input data table whose values are used to assign roles to each observation. This variable cannot also appear as an analysis variable in other statements or options. The TEST=, TRAIN=, and VALIDATE= suboptions specify the formatted values of this variable that are used to assign observation roles. If you do not specify the TRAIN= suboption, then all observations whose role is not determined by the TEST= or VALIDATE= suboption are assigned to the training role.","help":"ROLE=TRAIN= | VALIDATE= | TEST=","type":"choice","arguments":[{"name":"TRAIN=","type":"value"},{"name":"VALIDATE=","type":"value"},{"name":"TEST=","type":"value"}]}]},{"name":"SAVESTATE","description":"The SAVESTATE statement creates an analytic store for the model and saves it as a binary object in a data table. You can use the analytic store in the ASTORE procedure to score new data.","help":"SAVESTATE \n            <RSTORE=CAS-libref.data-table>\n          ","arguments":[{"name":"RSTORE=","optional":true,"description":"Specifies a data table in which to save the analytic store for the model. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"RSTORE=*CAS-libref.data-table*","type":"dataSet"}]},{"name":"TARGET","description":"The TARGET statement names the variable whose values PROC GRADBOOST predicts.","help":"TARGET                                     <LEVEL=<NOMINAL | INTERVAL>>\n                              ","arguments":[{"name":"LEVEL=","optional":true,"followsDelimiter":"/","description":"Specifies the level of measurement.","help":"LEVEL=NOMINAL | INTERVAL","type":"choice","arguments":[{"name":"NOMINAL","followsDelimiter":"/","description":"Specifies that the level of measurement of the variables is nominal.","type":"standalone"},{"name":"INTERVAL","followsDelimiter":"/","description":"Specifies that the level of measurement of the variables is interval.","type":"standalone"}]}]},{"name":"TRANSFERLEARN","description":"The TRANSFERLEARN statement enables you to train the gradient boosting model by using auxiliary data that are added to your training data.","help":"TRANSFERLEARN <BURN=number>\n                                    <SHRINKAGE=number>\n                                    <TRIMMING=number> ...","arguments":[{"name":"BURN=","optional":true,"followsDelimiter":"/","description":"Specifies the number of trees to create before downweighting any observation in the auxiliary data.","help":"BURN=*number*","type":"value"},{"name":"SHRINKAGE=","optional":true,"followsDelimiter":"/","description":"Specifies the number to apply as the weighting factor for downweighting auxiliary data, where number must be between 0 and 1, exclusive. By default, SHRINKAGE=0.9.","help":"SHRINKAGE=*number*","type":"value"},{"name":"TRIMMING=","optional":true,"followsDelimiter":"/","description":"Specifies the number to use as a fraction of the distribution of gradients on the training data beyond which auxiliary observations are downweighted, where number must be greater than 0 less than or equal to 1/2.","help":"TRIMMING=*number*","type":"value"}]},{"name":"WEIGHT","description":"The variable in the WEIGHT statement is used as a weight to perform a weighted analysis of the data. Observations that have nonpositive or missing weights are not included in the analysis. If a WEIGHT statement is not included, all observations that are used in the analysis are assigned a weight of 1.","help":"WEIGHT variable"}],"supportSiteInformation":{"docsetId":"casml","docsetVersion":"latest","docsetTargetFile":"casml_gradboost_toc.htm"}}