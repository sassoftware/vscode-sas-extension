{"name":"HPCOUNTREG","statements":[{"name":"PROC HPCOUNTREG","description":"The HPCOUNTREG procedure is a high-performance procedure to fit regression models on the SAS appliance in which the dependent variable takes nonnegative integer or count values. With the HPCOUNTREG procedure you can read and write data in distributed form and perform analyses in parallel in SMP or MPP mode. † The HPCOUNTREG procedure is specifically designed to operate in the high-performance distributed environment. By default, PROC HPCOUNTREG performs computations in multiple threads. In contrast, the COUNTREG procedure executes in a single thread.","help":"PROC HPCOUNTREG <ABSCONV= | ABSTOL=r> <ABSFCONV=r<n> | ABSFTOL=r<n>> <ABSGCONV=r<n> | ABSGTOL=r<n>> <ABSXCONV= | ABSXTOL=r<n>> <CORRB> <COVB> <COVEST=OP | HESSIAN | QML> <COVOUT> <DAMPSTEP | DS <=r>> <DATA=SAS-data-set> <FCONV2= | FTOL2=r <n>> <FCONV=r | FTOL=r> <FSIZE=r> <GCONV=r | GTOL=r> <HESCAL=0 | 1 | 2... > <INHESSIAN<=r>> <INSTEP=r> <ITPRINT> <LINESEARCH=1 | 2 | 3... > <LSPRECISION=r | LSP=r | SPRECISION=r | SP=r> <MAXFUNC=i | MAXFU=i> <MAXITER= | MAXIT=i <n>> <MAXSTEP=r<n>> <MAXTIME=r> <METHOD=CG | DD | NRA... > <MINITER= | MINIT=i> <NOPRINT> <OUTEST=SAS-data-set> <PALL> <PHISTORY> <PHISTPARMS> <PINIT> <PRINTALL> <PSHORT> <PSUMMARY> <RESTART= | REST=i> <SOCKET=> <TECHNIQUE=CONGRA | DBLDOG | NMSIMP... > <UPDATE=BFGS | DBFGS | DDFP... > <XCONV= | XTOL=r <n>> <XSIZE=r>;     \n\tBOUNDS bound1 [, bound2 ...] ;     \n\tFREQ freq-variable ;     \n\tINIT initvalue1 [, initvalue2 ...] ;     \n\tMODEL <DIST=<POISSON | NEGBIN(P=1) | NEGBIN(P=2)>... > <NOINT> <OFFSET=variable> ...; \n   \n\tOUTPUT <OUT=SAS-data-set> <OUTVAR(SAS-variable-names)> <PRED=name> ...; \n   \n\tPERFORMANCE <COMMIT=n> <CPUCOUNT=<ACTUAL | <num>>> <DATASERVER=“name”> ...; \n   \n\tRESTRICT restriction1 [, restriction2 ...] ; \n   \n\tWEIGHT <NONORMALIZE> ; \n   \n\tZEROMODEL <LINK=<LOGISTIC | NORMAL>> <OFFSET=variable> ; ","arguments":[{"name":"ABSCONV=","optional":true,"aliases":["ABSTOL="],"description":"Specifies an absolute function convergence criterion.","type":"value"},{"name":"ABSFCONV=","optional":true,"aliases":["ABSFTOL="],"description":"Specifies an absolute function convergence criterion.","type":"value"},{"name":"ABSGCONV=","optional":true,"aliases":["ABSGTOL="],"description":"Specifies an absolute gradient convergence criterion. Termination requires the maximum absolute gradient element to be small.","type":"value"},{"name":"ABSXCONV=","optional":true,"aliases":["ABSXTOL="],"description":"Specifies the absolute parameter convergence criterion. Termination requires a small Euclidean distance between successive parameter vectors.","type":"value"},{"name":"CORRB","optional":true,"description":"Prints the correlation matrix of the parameter estimates. This option can also be specified in the MODEL statement.","type":"standalone"},{"name":"COVB","optional":true,"description":"Prints the covariance matrix of the parameter estimates.","type":"standalone"},{"name":"COVEST=","optional":true,"description":"Specifies the type of covariance matrix of the parameter estimates. The quasi-maximum likelihood estimates are computed with COVEST=QML. The default is COVEST=HESSIAN.","help":"COVEST=OP | HESSIAN | QML","type":"choice","arguments":[{"name":"OP","description":"Specifies the covariance from the outer product matrix.","type":"standalone"},{"name":"HESSIAN","description":"Specifies the covariance from the Hessian matrix.","type":"standalone"},{"name":"QML","description":"Specifies the covariance from the outer product and Hessian matrices.","type":"standalone"}]},{"name":"COVOUT","optional":true,"description":"Writes the covariance matrix for the parameter estimates to the OUTEST= data set. This option is valid only if the OUTEST= option is specified.","type":"standalone"},{"name":"DAMPSTEP=","optional":true,"aliases":["DS="],"description":"Specifies that the initial step-size value a⁰ for each line search (used by the QUANEW, CONGRA, or NEWRAP technique) cannot be larger than r times the step-size value used in the former iteration.","type":"value"},{"name":"DATA=","optional":true,"description":"Specifies the input SAS data set. If the DATA= option is not specified, PROC HPCOUNTREG uses the most recently created SAS data set.","help":"DATA=*SAS-data-set*","type":"dataSet"},{"name":"FCONV2=","optional":true,"aliases":["FTOL2="],"description":"Specifies a second function convergence criterion.","type":"value"},{"name":"FCONV=","optional":true,"aliases":["FTOL="],"description":"Specifies the relative function convergence criterion.","type":"value"},{"name":"FSIZE=","optional":true,"description":"Specifies the FSIZE parameter of the relative function and relative gradient termination criteria. The default value is r=0.","help":"FSIZE=*r*","type":"value"},{"name":"GCONV=","optional":true,"aliases":["GTOL="],"description":"Specifies the relative gradient convergence criterion.","type":"value"},{"name":"HESCAL=","optional":true,"aliases":["HS="],"description":"Specifies the scaling version of the Hessian or crossproduct Jacobian matrix used in NRRIDG, TRUREG, LEVMAR, NEWRAP, or DBLDOG optimization.","help":"HESCAL=0 | 1 | 2 | 3","type":"choice","arguments":[{"name":"0","description":"Specifies that no scaling is done.","type":"standalone"},{"name":"1","description":"Specifies the Moré (1978) scaling update","type":"standalone"},{"name":"2","description":"Specifies the Dennis, Gay, and Welsch (1981) scaling update","type":"standalone"},{"name":"3","description":"Specifies that di is reset in each iteration","type":"standalone"}]},{"name":"INHESSIAN=","optional":true,"description":"Specifies how the initial estimate of the approximate Hessian is defined for the quasi-Newton techniques QUANEW and DBLDOG.","type":"value"},{"name":"INSTEP=","optional":true,"aliases":["SALPHA=","RADIUS="],"description":"Reduces the length of the first trial step during the line search of the first iterations.","help":"INSTEP=*r*","type":"value"},{"name":"ITPRINT","optional":true,"description":"Prints the objective function and parameter estimates at each iteration. The objective function is the negative log-likelihood function.","type":"standalone"},{"name":"LINESEARCH=","optional":true,"aliases":["LIS=","SMETHOD=","SM="],"description":"Specifies the line-search method for the CONGRA, QUANEW, and NEWRAP optimization techniques.","help":"LINESEARCH=1 | 2 | 3 | 4 | 5 | 6 | 7 | 8","type":"choice","arguments":[{"name":"1","description":"Specifies a line-search method that needs the same number of function and gradient calls for cubic interpolation and cubic extrapolation; this method is similar to one used by the Harwell subroutine library.","type":"standalone"},{"name":"2","description":"Specifies a line-search method that needs more function calls than gradient calls for quadratic and cubic interpolation and cubic extrapolation; this method is implemented as shown in Fletcher (1987) and can be modified to an exact line search by using the LSPRECISION= option.","type":"standalone"},{"name":"3","description":"Specifies a line-search method that needs the same number of function and gradient calls for cubic interpolation and cubic extrapolation; this method is implemented as shown in Fletcher (1987) and can be modified to an exact line search by using the LSPRECISION= option.","type":"standalone"},{"name":"4","description":"Specifies a line-search method that needs the same number of function and gradient calls for stepwise extrapolation and cubic interpolation","type":"standalone"},{"name":"5","description":"Specifies a line-search method that is a modified version of LIS=4.","type":"standalone"},{"name":"6","description":"Specifies golden section line search (Polak 1971), which uses only function values for linear approximation.","type":"standalone"},{"name":"7","description":"Specifies bisection line search (Polak 1971), which uses only function values for linear approximation.","type":"standalone"},{"name":"8","description":"Specifies Armijo line-search technique (Polak 1971), which uses only function values for linear approximation.","type":"standalone"}]},{"name":"LSPRECISION=","optional":true,"aliases":["LSP=","SPRECISION=","SP="],"description":"Specifies the degree of accuracy that should be obtained by the line-search algorithms LIS=2 and LIS=3. The default LSPRECISION= values are:","type":"value"},{"name":"MAXFUNC=","optional":true,"aliases":["MAXFU="],"description":"Requires the number of function calls to be no larger than i. The default values are:","type":"value"},{"name":"MAXITER=","optional":true,"aliases":["MAXIT="],"description":"Requires the number of iterations to be no larger than i. The default values are:","type":"value"},{"name":"MAXSTEP=","optional":true,"description":"Specifies an upper bound for the step length of the line-search algorithms during the first n iterations.","type":"value"},{"name":"MAXTIME=","optional":true,"description":"Requires the CPU time to be no larger than r. The default value of the MAXTIME= option is the largest double floating-point number on your computer.","help":"MAXTIME=*r*","type":"value"},{"name":"METHOD=","optional":true,"description":"Specifies the iterative minimization method to use. The default is METHOD=NRA.","help":"METHOD=CG | DD | NRA | NRR | QN | TR | NONE","type":"choice","arguments":[{"name":"CG","description":"Specifies the conjugate-gradient method.","type":"standalone"},{"name":"DD","description":"Specifies the double dogleg method.","type":"standalone"},{"name":"NRA","description":"Specifies the Newton-Raphson method (the default).","type":"standalone"},{"name":"NRR","description":"Specifies the Newton-Raphson Ridge method.","type":"standalone"},{"name":"QN","description":"Specifies the quasi-Newton method.","type":"standalone"},{"name":"TR","description":"Specifies the trust region method.","type":"standalone"},{"name":"NONE","description":"Specifies that no optimization be performed beyond using the ordinary least squares method to compute the parameter estimates.","type":"standalone"}]},{"name":"MINITER=","optional":true,"aliases":["MINIT="],"description":"Specifies the minimum number of iterations. The default value is 0.","type":"value"},{"name":"NOPRINT","optional":true,"description":"Suppresses all printed output.","type":"standalone"},{"name":"OUTEST=","optional":true,"description":"Writes the parameter estimates to an output data set.","help":"OUTEST=*SAS-data-set*","type":"dataSet"},{"name":"PALL","optional":true,"aliases":["ALL"],"description":"[Displays all optional output for optimization.","type":"standalone"},{"name":"PHISTORY","optional":true,"aliases":["PHIS"],"description":"Displays the optimization history. The PHISTORY option is set automatically if the PALL or PRINT option is set.","type":"standalone"},{"name":"PHISTPARMS","optional":true,"description":"Display parameter estimates in each iteration.","type":"standalone"},{"name":"PINIT","optional":true,"aliases":["PIN"],"description":"Displays the initial values and derivatives (if available).","type":"standalone"},{"name":"PRINTALL","optional":true,"description":"Requests all printing options.","type":"standalone"},{"name":"PSHORT","optional":true,"description":"Restricts the amount of default output.","type":"standalone"},{"name":"PSUMMARY","optional":true,"description":"Restricts the amount of default displayed output to a short form of iteration history and notes, warnings, and errors.","type":"standalone"},{"name":"RESTART=","optional":true,"aliases":["REST="],"description":"Specifies that the QUANEW or CONGRA algorithm is restarted with a steepest descent/ascent search direction after at most i iterations, i > 0.","type":"value"},{"name":"SOCKET=","optional":true,"description":"Specifies the fileref that contains the information needed for remote monitoring.","type":"value"},{"name":"TECHNIQUE=","optional":true,"aliases":["TECH=","OMETHOD=","OM="],"description":"Specifies the optimization technique.","help":"TECHNIQUE=CONGRA | DBLDOG | NMSIMP | NEWRAP | NRRIDG | QUANEW | TRUREG | NONE","type":"choice","arguments":[{"name":"CONGRA","description":"Chooses one of four different conjugate-gradient optimization algorithms, which can be more precisely defined with the UPDATE= option and modified with the LINESEARCH= option.","type":"standalone"},{"name":"DBLDOG","description":"Performs a version of double-dogleg optimization, which uses the gradient to update an approximation of the Cholesky factor of the Hessian.","type":"standalone"},{"name":"NMSIMP","description":"Performs a Nelder-Mead simplex optimization.","type":"standalone"},{"name":"NEWRAP","description":"Performs a usually stable but, for large problems, memory- and time-consuming Newton-Raphson optimization technique. The algorithm combines a line-search algorithm with ridging, and it can be modified with the LINESEARCH= option.","type":"standalone"},{"name":"NRRIDG","description":"Performs a usually stable but, for large problems, memory- and time-consuming Newton-Raphson optimization technique. This algorithm does not perform a line search.","type":"standalone"},{"name":"QUANEW","description":"Chooses one of four different quasi-Newton optimization algorithms that can be more precisely defined with the UPDATE= option and modified with the LINESEARCH= option.","type":"standalone"},{"name":"TRUREG","description":"Performs a usually very stable but, for large problems, memory- and time-consuming trust-region optimization technique. The algorithm is implemented similar to Gay (1983) and Moré and Sorensen (1983).","type":"standalone"},{"name":"NONE","description":"Does not perform any optimization. This option is similar to METHOD=NONE, but TECH=NONE also computes and displays residuals and goodness of fit statistics.","type":"standalone"}]},{"name":"UPDATE=","optional":true,"description":"Specifies the update method for the quasi-Newton, double-dogleg, or conjugate-gradient optimization technique.","help":"UPDATE=BFGS | DBFGS | DDFP | DFP | PB | FR | PR | CD","type":"choice","arguments":[{"name":"BFGS","description":"Performs the original Broyden, Fletcher, Goldfarb, and Shanno (BFGS) update of the inverse Hessian matrix.","type":"standalone"},{"name":"DBFGS","description":"Performs the dual BFGS update of the Cholesky factor of the Hessian matrix. This is the default update method.","type":"standalone"},{"name":"DDFP","description":"Performs the dual Davidon, Fletcher, and Powell (DFP) update of the Cholesky factor of the Hessian matrix.","type":"standalone"},{"name":"DFP","description":"Performs the original DFP update of the inverse Hessian matrix.","type":"standalone"},{"name":"PB","description":"Performs the automatic restart update method of Powell (1977) and Beale (1972).","type":"standalone"},{"name":"FR","description":"Performs the Fletcher-Reeves update (Fletcher 1987).","type":"standalone"},{"name":"PR","description":"Performs the Polak-Ribiere update (Fletcher 1987).","type":"standalone"},{"name":"CD","description":"Performs a conjugate-descent update of Fletcher (1987).","type":"standalone"}]},{"name":"XCONV=","optional":true,"aliases":["XTOL="],"description":"Specifies the relative parameter convergence criterion. Termination requires a small relative parameter change in subsequent iterations.","type":"value"},{"name":"XSIZE=","optional":true,"description":"Specifies the XSIZE parameter of the relative parameter termination criterion. The default value is r=0.","help":"XSIZE=*r*","type":"value"}]},{"name":"BOUNDS","description":"The BOUNDS statement imposes simple boundary constraints on the parameter estimates. BOUNDS statement constraints refer to the parameters estimated by the HPCOUNTREG procedure. You can specify any number of BOUNDS statements. Each bound is composed of parameter names, constants, and inequality operators: item operator item [ operator item [ operator item ... ] ] Each item is a constant, a parameter name, or a list of parameter names. Each operator is ’<’, ’>’, ’<=’, or ’>=’. Parameter names are as shown in the ESTIMATE column of the “Parameter Estimates” table. You can use both the BOUNDS statement and the RESTRICT statement to impose boundary constraints; however, the BOUNDS statement provides a simpler syntax for specifying these kinds of constraints.","help":"BOUNDS bound1 [, bound2 ...] "},{"name":"FREQ","description":"The FREQ statement identifies a variable (freq-variable) that contains the frequency of occurrence of each observation. PROC HPCOUNTREG treats each observation as if it appears n times, where n is the value of freq-variable for the observation. If the value for the observation is not an integer, it is truncated to an integer. If the value is less than 1 or missing, the observation is not used in the model fitting. When the FREQ statement is not specified, each observation is assigned a frequency of 1.","help":"FREQ freq-variable "},{"name":"INIT","description":"The INIT statement sets initial values for parameters in the optimization. Each initvalue is written as a parameter or parameter list, followed by an optional equal sign (=), followed by a number: parameter [=] number Parameter names are as shown in the ESTIMATE column of the “Parameter Estimates” table.","help":"INIT initvalue1 [, initvalue2 ...] "},{"name":"MODEL","description":"The MODEL statement specifies the dependent variable and independent regressor variables for the regression model. The dependent count variable should take on only nonnegative integer values in the input data set. PROC HPCOUNTREG rounds any positive noninteger count values to the nearest integer. PROC HPCOUNTREG discards any observations with a negative count. Only one MODEL statement can be specified.","help":"MODEL &lt;DIST=&lt;POISSON | NEGBIN(P=1) | NEGBIN(P=2)&gt;... &gt; &lt;NOINT&gt; &lt;OFFSET=variable&gt; ...","arguments":[{"name":"CORRB","optional":true,"followsDelimiter":"/","description":"Prints the correlation matrix of the parameter estimates. It can also be specified in the PROC HPCOUNTREG statement.","type":"standalone"},{"name":"COVB","optional":true,"followsDelimiter":"/","description":"Prints the covariance matrix of the parameter estimates. It can also be specified in the PROC HPCOUNTREG statement.","type":"standalone"},{"name":"DIST=","optional":true,"followsDelimiter":"/","description":"Specifies a type of model to be analyzed. If you specify this option in both the MODEL statement and the PROC HPCOUNTREG statement, then only the value in the MODEL statement is used.","help":"DIST=POISSON | NEGBIN(P=1) | NEGBIN(P=2) | ZIPOISSON | ZINEGBIN","type":"choice","arguments":[{"name":"POISSON","followsDelimiter":"/","description":"Poisson regression model","type":"standalone"},{"name":"NEGBIN(P=1)","followsDelimiter":"/","description":"Negative binomial regression model with a linear variance function","type":"value"},{"name":"NEGBIN(P=2)","followsDelimiter":"/","description":"Negative binomial regression model with a quadratic variance function","type":"value"},{"name":"ZIPOISSON","followsDelimiter":"/","aliases":["ZIP"],"description":"Zero-inflated Poisson regression","type":"standalone"},{"name":"ZINEGBIN","followsDelimiter":"/","aliases":["ZINB"],"description":"Zero-inflated negative binomial regression","type":"standalone"}]},{"name":"ITPRINT","optional":true,"followsDelimiter":"/","description":"Prints the objective function and parameter estimates at each iteration. The objective function is the negative log-likelihood function. It can also be specified in the PROC HPCOUNTREG statement.","type":"standalone"},{"name":"NOINT","optional":true,"followsDelimiter":"/","description":"Suppresses the intercept parameter.","type":"standalone"},{"name":"NOPRINT","optional":true,"followsDelimiter":"/","description":"Suppresses all printed output.","type":"standalone"},{"name":"OFFSET=","optional":true,"followsDelimiter":"/","description":"Specifies a variable in the input data set to be used as an offset variable. The offset variable appears as a covariate in the model with its parameter restricted to 1.","help":"OFFSET=*variable*","type":"value"},{"name":"PRINTALL","optional":true,"followsDelimiter":"/","description":"Requests all printing options. It can also be specified in the PROC HPCOUNTREG statement.","type":"standalone"}]},{"name":"OUTPUT","description":"The OUTPUT statement creates a new SAS data set containing all the variables in the input data set and, optionally, the estimates of x'β, the expected value of the response variable, and the probability that the response variable will take on the current value.","help":"OUTPUT &lt;OUT=SAS-data-set&gt; &lt;OUTVAR(SAS-variable-names)&gt; &lt;PRED=name&gt; ...","arguments":[{"name":"OUT=","optional":true,"description":"Names the output data set.","help":"OUT=*SAS-data-set*","type":"dataSet"},{"name":"OUTVAR","optional":true,"description":"Adds SAS variables to the output data set.","type":"standalone"},{"name":"PRED=","optional":true,"description":"Names the variable containing the predicted value of the response variable.","help":"PRED=*name*","type":"value"},{"name":"PROB=","optional":true,"description":"Names the variable containing the probability of the response variable taking the current value, Pr(Y=y).","help":"PROB=*name*","type":"value"},{"name":"PROBCOUNT","optional":true,"description":"Outputs the probability of the response variable taking particular values. Each value should be a nonnegative integer. Nonintegers are rounded to the nearest integer. For value, you can also specify a list of the form X TO Y BY Z. For example, PROBCOUNT(0 1 2 TO 10 BY 2 15) requests predicted probabilities for counts 0, 1, 2, 4, 5, 6, 8, 10, and 15. This option is not available for the fixed- and random-effects panel models.","type":"standalone"},{"name":"PROBZERO=","optional":true,"description":"Names the variable containing the value that of ϕi, the probability that the response variable will take on the value of zero as a result of the zero-generating process. It is written to the output file only if the model is zero-inflated.","help":"PROBZERO=*name*","type":"value"},{"name":"XBETA=","optional":true,"description":"Names the variable containing estimates of x'β.","help":"XBETA=*name*","type":"value"},{"name":"ZGAMMA=","optional":true,"description":"Names the variable containing estimates of z'Gamma.","help":"ZGAMMA=*name*","type":"value"}]},{"name":"PERFORMANCE","description":"The PERFORMANCE statement defines performance parameters for multithreaded and distributed computing, passes variables about the distributed computing environment, and requests detailed results about the performance characteristics of the HPCOUNTREG procedure. With the PERFORMANCE statement, you can also control whether PROC HPCOUNTREG executes in SMP or MPP mode.","help":"PERFORMANCE &lt;COMMIT=n&gt; &lt;CPUCOUNT=&lt;ACTUAL | &lt;num&gt;&gt;&gt; &lt;DATASERVER=“name”&gt; ...","arguments":[{"name":"COMMIT=","optional":true,"description":"Requests that the High-Performance Analytics procedure write periodic updates to the SAS Log when observations are sent from the client to the appliance for distributed processing.","help":"COMMIT=*n*","type":"value"},{"name":"CPUCOUNT=","optional":true,"description":"Specifies how many processors the procedure assumes are available on each host in the computing environment. num can be any integer from 1 to 256. CPUCOUNT=ACTUAL sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools. Setting CPUCOUNT= to a number greater than the actual number of available CPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system option.","help":"CPUCOUNT=ACTUAL | &lt;*num*&gt;","type":"choice","arguments":[{"name":"ACTUAL","description":"Sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","type":"standalone"},{"name":"num","placeholder":true,"description":"Replace <num> with an actual number. Setting CPUCOUNT= to a number greater than the actual number of available CPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system option.","type":"standaloneOrValue"}]},{"name":"DATASERVER=","optional":true,"description":"Specifies the name of the server on Teradata systems as defined through the hosts file and as used in the LIBNAME statement for Teradata. For example, if the hosts file defines myservercop1 33.44.55.66 as the server for Teradata, then a LIBNAME specification would be as follows: libname TDLib teradata server=myserver user= password= database= ; A PERFORMANCE statement to induce running alongside the Teradata server would specify the following:","type":"value"},{"name":"DETAILS","optional":true,"description":"Requests a table that shows a timing breakdown of the procedure steps.","type":"standalone"},{"name":"HOST=","optional":true,"aliases":["GRIDHOST="],"description":"Specifies the name of the appliance host in single or double quotes. If the HOST= option is specified, it overrides the value of the GRIDHOST environment variable.","type":"value"},{"name":"INSTALL=","optional":true,"aliases":["INSTALLLOC="],"description":"Specifies the directory in which the High-Performance Analytics shared libraries are installed on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC environment variable.","type":"value"},{"name":"NODES=","optional":true,"aliases":["NNODES="],"description":"Specifies the number of nodes in the distributed computing environment, provided that the data are not processed alongside the database.","type":"value"},{"name":"NTHREADS=","optional":true,"description":"Specifies the number of threads for analytic computations and overrides the SAS system option THREADS | NOTHREADS. If you do not specify the NTHREADS= option, the number of threads are determined based on the number of CPUs on the host on which the analytic computations execute. The algorithm by which a CPU count is converted to a thread count is specific to the High- Performance Analytics procedure. Most procedures create one thread per CPU for the analytic computations. By default, High-Performance Analytics procedures execute in multiple concurrent threads unless turned off by the NOTHREADS system option or you force single-threaded execution with NTHREADS=1. The largest number that can be specified for n is 256. Individual High-Performance Analytics procedures can impose more stringent limits if called for by algorithmic considerations. You can affect the determination of the CPU count with the CPUCOUNT= option in the PERFORMANCE statement.","help":"NTHREADS=*n*","type":"value"},{"name":"TIMEOUT=","optional":true,"description":"Specifies the timeout in seconds for a High-Performance Analytics procedure to wait for a connection to the appliance and establish a connection back to the client. The default is s=120 seconds. If jobs are submitted to the appliance through workload management tools that might suspend access to the appliance for a longer period, you might want to increase the timeout value.","help":"TIMEOUT=*s*","type":"value"}]},{"name":"RESTRICT","description":"The RESTRICT statement is used to impose linear restrictions on the parameter estimates. You can specify any number of RESTRICT statements. Each restriction is written as an expression, followed by an equality operator (=) or an inequality operator (<, >, <=, >=), followed by a second expression: expression operator expression The operator can be =, <, >, <=, or >=. Restriction expressions can be composed of parameter names, constants, and the operators times (*), plus (+), and minus (-). Parameter names are as shown in the ESTIMATE column of the “Parameter Estimates” table. The restriction expressions must be a linear function of the variables. Lagrange multipliers are reported in the “Parameter Estimates” table for all the active linear constraints. They are identified with the names Restrict1, Restrict2, and so on. The probabilities of these Lagrange multipliers are computed using a beta distribution (LaMotte 1994). Nonactive, or nonbinding, restrictions have no effect on the estimation results and are not noted in the output.","help":"RESTRICT restriction1 [, restriction2 ...] "},{"name":"WEIGHT","description":"The WEIGHT statement specifies a variable to supply weighting values to use for each observation in estimating parameters. The log likelihood for each observation is multiplied by the corresponding weight variable value. If the weight of an observation is nonpositive, that observation is not used in the estimation.","help":"WEIGHT &lt;NONORMALIZE&gt; ","arguments":[{"name":"NONORMALIZE","optional":true,"followsDelimiter":"/","description":"Does not normalize the weights. By default, the weights are normalized so that they add up to the actual sample size.","type":"standalone"}]},{"name":"ZEROMODEL","description":"The ZEROMODEL statement is required if either ZIP or ZINB is specified in the DIST= option in the MODEL statement. If ZIP or ZINB is specified, then the ZEROMODEL statement must follow immediately after the MODEL statement. The dependent variable in the ZEROMODEL statement must be the same as the dependent variable in the MODEL statement. The zero-inflated (ZI) regressors appear in the equation that determines the probability (ϕi) of a zero count. Each of these q variables has a parameter to be estimated in the regression.","help":"ZEROMODEL &lt;LINK=&lt;LOGISTIC | NORMAL&gt;&gt; &lt;OFFSET=variable&gt; ","arguments":[{"name":"LINK=","optional":true,"followsDelimiter":"/","description":"Specifies the distribution function used to compute probability of zeros.","help":"LINK=LOGISTIC | NORMAL","type":"choice","arguments":[{"name":"LOGISTIC","followsDelimiter":"/","description":"Specifies logistic distribution.","type":"standalone"},{"name":"NORMAL","followsDelimiter":"/","description":"Specifies standard normal distribution.","type":"standalone"}]},{"name":"OFFSET=","optional":true,"followsDelimiter":"/","description":"Specifies a variable in the input data set to be used as a zero-inflated (ZI) offset variable. The ZI offset variable is included as a term, with coefficient restricted to 1, in the equation that determines the probability (ϕi) of a zero count. The ZI offset variable cannot be the response variable, the offset variable (if any), or one of the explanatory variables. The name of the data set variable used as the ZI offset variable is displayed in the “Model Fit Summary” output, where it is labeled as “Inf_offset”.","help":"OFFSET=*variable*","type":"value"}]}],"supportSiteInformation":{"docsetId":"etsug","docsetVersion":"latest","docsetTargetFile":"etsug_hpcountreg_toc.htm"}}