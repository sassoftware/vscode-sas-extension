{"name":"HPDS2","statements":[{"name":"PROC HPDS2","description":"The HPDS2 procedure enables you to submit DS2 language statements from a Base SAS session to a SAS High Performance Analytics grid for parallel execution. PROC HPDS2 verifies the syntactic correctness of the DS2 source on the client machine before submitting it to the grid for execution. The output data created by the DS2 DATA statement can be output in either of the following ways: it can be written in parallel back to the grid data store or it can be returned to the client machine and directed to any data store that is supported by SAS. † Because the DS2 code is executed in parallel on separate grid nodes with single data partitions, there is separate output from each node that is the result of processing only the local data partition. As a result, it might be necessary to use a second-stage program to aggregate the results from each node. The second stage can be executed on the SAS client by using the DS2 procedure, where the SET statement reads all rows created by the preceding parallel stage.","help":"PROC HPDS2 <DATA= SAS-data-set><OUTPUT= data-set>;     \n\tBY <DESCENDING> ;\n\tCONTINUE;\n\tDATA <DATA DS2GTF.out > ;\n\tDECLARE PACKAGE <ALTER=alter-password><DECLARE PACKAGE HASH instance [ ( hashexp, 'datasource', 'ordered', 'duplicate' )><DECLARE PACKAGE HITER instance [ ( 'hashname')]> ...;\n\tDECLARE PACKAGE HASH instance [ ( hashexp, 'datasource', 'ordered', 'duplicate' ) ];\n\tDECLARE PACKAGE HITER instance [ ( 'hashname')];\n\tDECLARE THREAD <ALTER=alter-password><BUFNO=<n | nK | hexX>... ><BUFSIZE=<n | nK | nM>... > ...;\n\tDECLARE <BIGINT><IDENTITY><INTEGER> ...;\n\tDO <TO><><> ...;\n\t;\n\t;\n\tDROP <DROP PACKAGE package [(table-options)]><THREAD> ;\n\tDROP PACKAGE <ALTER=alter-password><BUFNO=<n | nK | hexX>... ><BUFSIZE=<n | nK | nM>... > ...;\n\tDROP THREAD <ALTER=alter-password><BUFNO=<n | nK | hexX>... ><BUFSIZE=<n | nK | nM>... > ...;\n\tELSE <DO [ < index-variable-clause > ] [ < conditional-clause > ] ><ELSE IF expression THEN statement><THEN> ...;\n\tEND;\n\tENDDATA ;\n\tENDPACKAGE;\n\tENDTHREAD;\n\tFORWARD method [ ...method ];\n\tGLOBAL <BIGINT><IDENTITY><INT> ...;\n\tGOTO label;\n\tIF <DO [ < index-variable-clause > ] [ < conditional-clause > ] ><THEN><TO> ...;\n\tKEEP column-list;\n\tLEAVE [ identifier ] ;\n\tMETHOD <><RETURNS data-type><> ...;\n\t[OTHERWISE statement-list];\n\tOUTPUT <_NULL_><_ROWSET_> ;\n\tPACKAGE HASH HITER <SAS_ENCRYPT=<YES | NO>> ...;\n\tPERFORMANCE <COMMIT=n><CPUCOUNT=<ACTUAL | <num>>><DATASERVER=“name”> ...;\n\tPUT < put-list > [ ... <put-list> ] ;\n\tRENAME <AS> ;\n\t(1) RETAIN;\n\tRETURN [ expression ];\n\tRUN CANCEL ;\n\tSELECT [ ( select-expression ) ];\n\tSET <DS2GTF.IN><SET FROM thread [ THREADS = threads ]><SELECT> ...;\n\tSET FROM <THREADS= threads> ;\n\tSTOP;\n\tTHREAD <ALTER=alter-password><BUFNO=<n | nK | hexX>... ><SAS_ENCRYPT=<YES | NO>> ...;\n\tWHEN ( when-expression ) [ statement-list ;","arguments":[{"name":"DATA=","optional":true,"aliases":["IN="],"description":"Names the SAS data set or database table to be used by PROC HPDS2. The default is the most recently created data set.","help":"DATA=*SAS-data-set*","type":"dataSet"},{"name":"OUTPUT=","optional":true,"aliases":["OUT="],"description":"Names the SAS data set or database table created by PROC HPDS2.","help":"OUTPUT=*SAS-data-set*","type":"dataSet"}]},{"name":"BY","description":"BY-group processing is a method of combining rows from one or more tables that are grouped or ordered by values of one or more common columns. When a BY statement is specified immediately after a SET statement, the SET statement interleaves the rows of the input tables in sorted order. The sort order or sort key is specified by the column names in the BY statement. The keyword DESCENDING can be used before the name of the column in the BY statement in order to sort that column in descending instead of ascending order. When a BY statement is used, internally DS2 requests the rows in sorted order. If the rows are already sorted or indexed there is a high likelihood that a \"resorting\" of the data will not occur.","help":"BY &lt;DESCENDING&gt;","arguments":[{"name":"DESCENDING","optional":true,"description":"Specifies that the tables are sorted in descending order by the column that is specified. DESCENDING means largest to smallest for numeric columns, or reverse alphabetical for character columns.","type":"standalone"}]},{"name":"CONTINUE","description":"Stops processing the current DO loop iteration and resumes with the next iteration.","help":"CONTINUE"},{"name":"DATA","aliases":["TABLE"],"description":"The DATA statement indicates the beginning of the DS2 code block. The code block terminates with the ENDDATA statement. A reference to the DS2 Grid Table Function driver (DS2GTF.out) must be included as part of the DATA statement. If an input data set is specified in the PROC HPDS2 statement, then a run() method should be included in the DS2 code block. The first statement after the METHOD RUN() statement must be the SET DS2GTF.in statement for this case. DS2GTF.out and DS2GTF.in refer to the input and output data sets, respectively.","help":"DATA &lt;DATA DS2GTF.out &gt;","arguments":[{"name":"DS2GTF.OUT","optional":true,"description":"A reference to the DS2 Grid Table Function driver (DS2GTF.out) must be included as part of the DATA statement.","type":"standalone"}]},{"name":"DECLARE PACKAGE","description":"Creates an instance of a package. table-options specifies optional arguments that the DS2 program applies when it creates a package. instance specifies a name that identifies an instance of the package.","help":"DECLARE PACKAGE &lt;ALTER=alter-password&gt;&lt;DECLARE PACKAGE HASH instance [ ( hashexp, 'datasource', 'ordered', 'duplicate' )&gt;&lt;DECLARE PACKAGE HITER instance [ ( 'hashname')]&gt; ...","arguments":[{"name":"ALTER=","optional":true,"description":"Syntax Description: alter-password must be a valid SAS name. Details: The ALTER= option applies only to a SAS data set. You can use this option to assign a password or to access a read-protected, write-protected, or alter-protected file. When you replace a data set that is protected with an ALTER password, the new data set inherits the ALTER password. The password is blotted out when the code is written in the SAS log. For example: set a(alter=XXXXXXX);","help":"ALTER=*alter-password*","type":"value"},{"name":"AS","optional":true,"description":"Separates the new-name from the old-name.","type":"standalone"},{"name":"BUFNO=","optional":true,"description":"Syntax Description: n | nK specifies the number of buffers in multiples of 1 (bytes); 1,024 (kilobytes). For example, a value of 8 specifies 8 buffers, and a value of 1k specifies 1024 buffers. hex specifies the number of buffers as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the number of buffers to 45 buffers. MIN sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","help":"BUFNO=n | nK | hexX | MIN | MAX","type":"choice","arguments":[{"name":"n","description":"Specifies the number of buffers in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","description":"Specifies the number of buffers in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","description":"Specifies the number of buffers as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MIN","description":"Sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","type":"standalone"},{"name":"MAX","description":"Sets the number of buffers to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion.","type":"standalone"}]},{"name":"BUFSIZE=","optional":true,"description":"Syntax Description: n | nK | nM | nG specifies the page size in multiples of 1 (bytes); 1,024 (kilobytes); 1,048,576 (megabytes); or 1,073,741,824 (gigabytes). For example, a value of 8 specifies a page size of 8 bytes, and a value of 4k specifies a page size of 4096 bytes. hexX specifies the page size as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the page size to 45 bytes.","help":"BUFSIZE=n | nK | nM | nG | hexX | MAX","type":"choice","arguments":[{"name":"n","description":"Specifies the page size in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","description":"Specifies the page size in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"nM","description":"Specifies the page size in multiples of 1,048,576 (megabytes). Replace n with an integer value.","type":"standalone"},{"name":"nG","description":"Specifies the page size in multiples of 1,073,741,824 (gigabytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","description":"Specifies the page size as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MAX","description":"Sets the page size to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion bytes.","type":"standalone"}]},{"name":"BULKLOAD=","optional":true,"description":"Syntax Description: YES calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","help":"BULKLOAD=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","type":"standalone"},{"name":"NO","description":"Uses the dynamic SAS/ACCESS engine to insert or append data to a DBMS table.","type":"standalone"}]},{"name":"COMPRESS=","optional":true,"description":"Syntax Description: NO specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records). YES | CHAR specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. Alias: ON Tip: Use this compression algorithm for character data. Note: COMPRESS=CHAR is accepted by Version 7 and later versions. BINARY specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","help":"COMPRESS=NO | YES | CHAR | BINARY","type":"choice","arguments":[{"name":"NO","description":"Specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records).","type":"standalone"},{"name":"YES","aliases":["ON"],"description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations.","type":"standalone"},{"name":"CHAR","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. COMPRESS=CHAR is accepted by Version 7 and later versions.","type":"standalone"},{"name":"BINARY","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","type":"standalone"}]},{"name":"DBKEY=","optional":true,"description":"Syntax Description: column used by SAS to build an internal WHERE clause to search for matches in the DBMS table based on the key column. For example:","type":"value"},{"name":"DBNULL=","optional":true,"description":"Syntax Description: _ALL_ specifies that the YES or NO applies to all columns in the table. (This is valid in the interfaces to Informix, Oracle, Sybase, and Teradata only.) YES specifies that the NULL value is valid for the specified columns in the DBMS table. NO specifies that the NULL value is not valid for the specified columns in the DBMS table. column specifies the name of a column. Details: This option is valid only for creating DBMS tables. If you specify more than one column name, the names must be separated with spaces.","help":"DBNULL=_ALL_","type":"choice","arguments":[{"name":"_ALL_","type":"standalone"}]},{"name":"DROP=","optional":true,"description":"Arguments: column-list specifies the names of the columns to omit from the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The DROP= table option specifies that all columns in the column-list should not be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the drop attribute is specified, all columns not included in the drop statement will be used to create columns in the output rows.","type":"value"},{"name":"ENCRYPT=","optional":true,"description":"Syntax Description: YES encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set. NO does not encrypt the file.","help":"ENCRYPT=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set.","type":"standalone"},{"name":"NO","description":"Does not encrypt the file.","type":"standalone"}]},{"name":"HASH","optional":true,"description":"; Creates an instance of a hash package. instance specifies a name that identifies an instance of the package. hashexp is the hash package's internal table size, where the size of the hash table is 2^n. The value of hashexp is used as a power-of-two exponent to create the hash table size. 'datasource' is the name of a table or TSSQL query to load into the hash package. The name of the table can be a literal or a character variable. The table name must be enclosed in single quotation marks. 'ordered' specifies whether or how the data is returned in key-value order if you use the hash package with a hash iterator package or if you use the hash package OUTPUT method. ordered can be one of the following values: 'ascending' | 'a' Data is returned in ascending key-value order. Specifying `ascending' is the same as specifying `yes'. 'descending' | 'd' Data is returned in descending key-value order. 'YES' Data is returned in ascending key-value order. Specifying `yes' is the same as specifying `ascending'. 'NO' Data is returned in an undefined order.","type":"standalone"},{"name":"ITER","optional":true,"description":"Creates an instance of a hash iterator package.","type":"standalone"},{"name":"KEEP=","optional":true,"description":"Arguments: column-list specifies the names of the columns to keep in the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The KEEP= table option specifies that all columns in the column-list should be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the keep attribute is specified, all columns not included in the KEEP statement will be dropped from the output rows.","type":"value"},{"name":"LABEL=","optional":true,"description":"Syntax Description:","help":"LABEL='*label*'","type":"value"},{"name":"LOCKTABLE=","optional":true,"description":"Syntax Description: SHARE locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data. EXCLUSIVE locks a table exclusively, preventing other users from accessing any table that you open. Details: You can lock tables only if you are the owner or have been granted the necessary privilege.","help":"LOCKTABLE=SHARE | EXCLUSIVE","type":"choice","arguments":[{"name":"SHARE","description":"Locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data.","type":"standalone"},{"name":"EXCLUSIVE","description":"Locks a table exclusively, preventing other users from accessing any table that you open.","type":"standalone"}]},{"name":"OVERWRITE=","optional":true,"description":"Arguments: YES | NO specifies whether the output table is deleted before a replacement output table is created or whether a package or thread is dropped. Default: NO","help":"OVERWRITE=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Specifies that the output table is deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"},{"name":"NO","description":"Specifies that the output table is not deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"}]},{"name":"PW=","optional":true,"description":"Syntax Description: password must be a valid SAS name. Details: The PW= option applies to all types of SAS files. You can use this option to assign a password to a SAS file or to access a password-protected SAS file. When replacing a SAS data set that is protected by an ALTER password, the new data set inherits the ALTER password. When the code is written to the SAS log the password is blotted out, for example: drop thread job2 (pw=xxxxxxx);","help":"PW=*password*","type":"value"},{"name":"READ=","optional":true,"description":"Syntax Description: read-password must be a valid SAS name. Details: The READ= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a read-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: declare package sales (read=XXXXXXX);","help":"READ=*read-password*","type":"value"},{"name":"RENAME=","optional":true,"description":"Arguments: old-name the column you want to rename. new-name the new name of the column. It must be a valid name for the data source. Details: The RENAME= table option allows you to change the names of one or more columns. If you use RENAME= when you create a table, the new column name is included in the output table. If you use RENAME= on an input table, the new name is used in DS2 programming statements. If you use RENAME= in the same DS2 program with either the DROP= or the KEEP= table option, the DROP= and the KEEP= table options are applied before RENAME=. You must use the old name in the DROP= and KEEP= table options. You cannot drop and rename the same column in the same statement.","help":"RENAME=AS","type":"choice","arguments":[{"name":"AS","type":"standalone"}]},{"name":"TYPE=","optional":true,"description":"Syntax Description: data-set-type specifies the special type of the data set. Details: Use the TYPE= table option to create a special SAS data set in the proper format, or to identify the special type of the SAS data set in a procedure statement.","help":"TYPE=*data-set-type*","type":"dataSet"},{"name":"WRITE=","optional":true,"description":"Syntax Description: write-password must be a valid SAS name. Details: The WRITE= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a write-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: drop thread job2a (write=XXXXXXX);","help":"WRITE=*write-password*","type":"value"}]},{"name":"DECLARE PACKAGE HASH","description":"Creates an instance of a hash package. instance specifies a name that identifies an instance of the package. hashexp is the hash package's internal table size, where the size of the hash table is 2^n. The value of hashexp is used as a power-of-two exponent to create the hash table size. 'datasource' is the name of a table or TSSQL query to load into the hash package. The name of the table can be a literal or a character variable. The table name must be enclosed in single quotation marks. 'ordered' specifies whether or how the data is returned in key-value order if you use the hash package with a hash iterator package or if you use the hash package OUTPUT method. ordered can be one of the following values: 'ascending' | 'a' Data is returned in ascending key-value order. Specifying `ascending' is the same as specifying `yes'. 'descending' | 'd' Data is returned in descending key-value order. 'YES' Data is returned in ascending key-value order. Specifying `yes' is the same as specifying `ascending'. 'NO' Data is returned in an undefined order. 'duplicate' determines whether to ignore duplicate keys when loading a table into the hash object. The default is to store the first key and ignore all subsequent duplicates. duplicate can be one of the following values: 'replace' stores the last duplicate key record. 'error' reports an error to the log if a duplicate key is found. 'add' stores the first key record found and not any of the duplicates.","help":"DECLARE PACKAGE HASH instance [ ( hashexp, 'datasource', 'ordered', 'duplicate' ) ]"},{"name":"DECLARE PACKAGE HITER","description":"Creates an instance of a hash iterator package. instance specifies a name that identifies an instance of the package. 'hashname' specifies the name of the hash package with which the hash iterator is associated.","help":"DECLARE PACKAGE HITER instance [ ( 'hashname')]"},{"name":"DECLARE THREAD","description":"Creates an instance of a thread. thread specifies the thread name. thread can be one of these forms: catalog.schema.thread schema.thread catalog.thread thread catalog is an implementation of the ANSI SQL standard for an SQL catalog, which is a data container object that groups logically related schemas. The catalog is the first-level (top) grouping mechanism in a data organization hierarchy that is used along with a schema to provide a means of qualifying names. A catalog is a metadata object in a SAS Metadata Repository. schema is an implementation of the ANSI SQL standard for an SQL schema, which is a data container object that groups files such as tables and views and other objects supported by a data source such as stored procedures. The schema provides a grouping object that is used along with a catalog to provide a means of qualifying names. thread is the name of the thread. Requirement: The thread name must match the name of a thread created in a THREAD statement, or an error will occur. Requirement: Thread naming conventions are based on the data source. table-options specifies optional arguments that the DS2 program applies when it creates a thread. instance specifies a name that identifies an instance of the thread. argument specifies arguments used with instance-name.","help":"DECLARE THREAD &lt;ALTER=alter-password&gt;&lt;BUFNO=&lt;n | nK | hexX&gt;... &gt;&lt;BUFSIZE=&lt;n | nK | nM&gt;... &gt; ...","arguments":[{"name":"ALTER=","optional":true,"description":"Syntax Description: alter-password must be a valid SAS name. Details: The ALTER= option applies only to a SAS data set. You can use this option to assign a password or to access a read-protected, write-protected, or alter-protected file. When you replace a data set that is protected with an ALTER password, the new data set inherits the ALTER password. The password is blotted out when the code is written in the SAS log. For example: set a(alter=XXXXXXX);","help":"ALTER=*alter-password*","type":"value"},{"name":"AS","optional":true,"description":"Separates the new-name from the old-name.","type":"standalone"},{"name":"BUFNO=","optional":true,"description":"Syntax Description: n | nK specifies the number of buffers in multiples of 1 (bytes); 1,024 (kilobytes). For example, a value of 8 specifies 8 buffers, and a value of 1k specifies 1024 buffers. hex specifies the number of buffers as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the number of buffers to 45 buffers. MIN sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","help":"BUFNO=n | nK | hexX | MIN | MAX","type":"choice","arguments":[{"name":"n","description":"Specifies the number of buffers in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","description":"Specifies the number of buffers in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","description":"Specifies the number of buffers as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MIN","description":"Sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","type":"standalone"},{"name":"MAX","description":"Sets the number of buffers to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion.","type":"standalone"}]},{"name":"BUFSIZE=","optional":true,"description":"Syntax Description: n | nK | nM | nG specifies the page size in multiples of 1 (bytes); 1,024 (kilobytes); 1,048,576 (megabytes); or 1,073,741,824 (gigabytes). For example, a value of 8 specifies a page size of 8 bytes, and a value of 4k specifies a page size of 4096 bytes. hexX specifies the page size as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the page size to 45 bytes.","help":"BUFSIZE=n | nK | nM | nG | hexX | MAX","type":"choice","arguments":[{"name":"n","description":"Specifies the page size in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","description":"Specifies the page size in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"nM","description":"Specifies the page size in multiples of 1,048,576 (megabytes). Replace n with an integer value.","type":"standalone"},{"name":"nG","description":"Specifies the page size in multiples of 1,073,741,824 (gigabytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","description":"Specifies the page size as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MAX","description":"Sets the page size to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion bytes.","type":"standalone"}]},{"name":"BULKLOAD=","optional":true,"description":"Syntax Description: YES calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","help":"BULKLOAD=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","type":"standalone"},{"name":"NO","description":"Uses the dynamic SAS/ACCESS engine to insert or append data to a DBMS table.","type":"standalone"}]},{"name":"COMPRESS=","optional":true,"description":"Syntax Description: NO specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records). YES | CHAR specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. Alias: ON Tip: Use this compression algorithm for character data. Note: COMPRESS=CHAR is accepted by Version 7 and later versions. BINARY specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","help":"COMPRESS=NO | YES | CHAR | BINARY","type":"choice","arguments":[{"name":"NO","description":"Specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records).","type":"standalone"},{"name":"YES","aliases":["ON"],"description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations.","type":"standalone"},{"name":"CHAR","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. COMPRESS=CHAR is accepted by Version 7 and later versions.","type":"standalone"},{"name":"BINARY","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","type":"standalone"}]},{"name":"DBKEY=","optional":true,"description":"Syntax Description: column used by SAS to build an internal WHERE clause to search for matches in the DBMS table based on the key column. For example:","type":"value"},{"name":"DBNULL=","optional":true,"description":"Syntax Description: _ALL_ specifies that the YES or NO applies to all columns in the table. (This is valid in the interfaces to Informix, Oracle, Sybase, and Teradata only.) YES specifies that the NULL value is valid for the specified columns in the DBMS table. NO specifies that the NULL value is not valid for the specified columns in the DBMS table. column specifies the name of a column. Details: This option is valid only for creating DBMS tables. If you specify more than one column name, the names must be separated with spaces.","help":"DBNULL=_ALL_","type":"choice","arguments":[{"name":"_ALL_","type":"standalone"}]},{"name":"DROP=","optional":true,"description":"Arguments: column-list specifies the names of the columns to omit from the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The DROP= table option specifies that all columns in the column-list should not be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the drop attribute is specified, all columns not included in the drop statement will be used to create columns in the output rows.","type":"value"},{"name":"ENCRYPT=","optional":true,"description":"Syntax Description: YES encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set. NO does not encrypt the file.","help":"ENCRYPT=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set.","type":"standalone"},{"name":"NO","description":"Does not encrypt the file.","type":"standalone"}]},{"name":"KEEP=","optional":true,"description":"Arguments: column-list specifies the names of the columns to keep in the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The KEEP= table option specifies that all columns in the column-list should be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the keep attribute is specified, all columns not included in the KEEP statement will be dropped from the output rows.","type":"value"},{"name":"LABEL=","optional":true,"description":"Syntax Description:","help":"LABEL='*label*'","type":"value"},{"name":"LOCKTABLE=","optional":true,"description":"Syntax Description: SHARE locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data. EXCLUSIVE locks a table exclusively, preventing other users from accessing any table that you open. Details: You can lock tables only if you are the owner or have been granted the necessary privilege.","help":"LOCKTABLE=SHARE | EXCLUSIVE","type":"choice","arguments":[{"name":"SHARE","description":"Locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data.","type":"standalone"},{"name":"EXCLUSIVE","description":"Locks a table exclusively, preventing other users from accessing any table that you open.","type":"standalone"}]},{"name":"OVERWRITE=","optional":true,"description":"Arguments: YES | NO specifies whether the output table is deleted before a replacement output table is created or whether a package or thread is dropped. Default: NO","help":"OVERWRITE=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Specifies that the output table is deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"},{"name":"NO","description":"Specifies that the output table is not deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"}]},{"name":"PW=","optional":true,"description":"Syntax Description: password must be a valid SAS name. Details: The PW= option applies to all types of SAS files. You can use this option to assign a password to a SAS file or to access a password-protected SAS file. When replacing a SAS data set that is protected by an ALTER password, the new data set inherits the ALTER password. When the code is written to the SAS log the password is blotted out, for example: drop thread job2 (pw=xxxxxxx);","help":"PW=*password*","type":"value"},{"name":"READ=","optional":true,"description":"Syntax Description: read-password must be a valid SAS name. Details: The READ= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a read-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: declare package sales (read=XXXXXXX);","help":"READ=*read-password*","type":"value"},{"name":"RENAME=","optional":true,"description":"Arguments: old-name the column you want to rename. new-name the new name of the column. It must be a valid name for the data source. Details: The RENAME= table option allows you to change the names of one or more columns. If you use RENAME= when you create a table, the new column name is included in the output table. If you use RENAME= on an input table, the new name is used in DS2 programming statements. If you use RENAME= in the same DS2 program with either the DROP= or the KEEP= table option, the DROP= and the KEEP= table options are applied before RENAME=. You must use the old name in the DROP= and KEEP= table options. You cannot drop and rename the same column in the same statement.","help":"RENAME=AS","type":"choice","arguments":[{"name":"AS","type":"standalone"}]},{"name":"TYPE=","optional":true,"description":"Syntax Description: data-set-type specifies the special type of the data set. Details: Use the TYPE= table option to create a special SAS data set in the proper format, or to identify the special type of the SAS data set in a procedure statement.","help":"TYPE=*data-set-type*","type":"dataSet"},{"name":"WRITE=","optional":true,"description":"Syntax Description: write-password must be a valid SAS name. Details: The WRITE= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a write-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: drop thread job2a (write=XXXXXXX);","help":"WRITE=*write-password*","type":"value"}]},{"name":"DECLARE","aliases":["DCL"],"description":"Declares one or more DS2 variables or arrays.","help":"DECLARE &lt;BIGINT&gt;&lt;IDENTITY&gt;&lt;INTEGER&gt; ...","arguments":[{"name":"HASH","description":"Specifies the name of the package as HASH to register the hash package for use in a DS2 program.","type":"standalone"},{"name":"HITER","description":"Specifies the name of the package as HITER to register the hash iterator package for use in a DS2 program.","type":"standalone"},{"name":"BIGINT","optional":true,"description":"Specifies an integer variable.","type":"standalone"},{"name":"CHAR","optional":true,"description":"Specifies a character variable.","type":"standalone"},{"name":"CHARACTER","optional":true,"description":"Specifies character set encoding information for CHAR and VARCHAR data types.","help":"CHARACTER SET","type":"standalone"},{"name":"DATE","optional":true,"description":"Specifies a date variable.","type":"standalone"},{"name":"DOUBLE PRECISION","optional":true,"aliases":["DOUBLE"],"description":"Specifies a floating-point variable.","type":"standalone"},{"name":"FLOAT","optional":true,"description":"Specifies a floating-point variable.","type":"standalone"},{"name":"FORMAT","optional":true,"description":"Associates any valid DS2 format with the variable.","type":"standalone"},{"name":"HAVING","optional":true,"description":"The HAVING clause functions the same as the FORMAT, INFORMAT, and LABEL statements in Base SAS. However, in DS2, the attributes must be specified in the declaration statement of the variable.","type":"standalone"},{"name":"IDENTITY","optional":true,"description":"Specifies an integer variable.","type":"standalone"},{"name":"INFORMAT","optional":true,"description":"Associates any valid SAS informat with the variable.","type":"standalone"},{"name":"INTEGER","optional":true,"aliases":["INT"],"description":"Specifies an integer variable.","type":"standalone"},{"name":"LABEL","optional":true,"description":"Assigns a descriptive label to the variable. The label can be a CHAR literal (string) or NCHAR literal (nstring).","type":"standalone"},{"name":"NCHAR","optional":true,"description":"Specifies a character variable.","type":"standalone"},{"name":"NVARCHAR","optional":true,"description":"Specifies a character variable.","type":"standalone"},{"name":"PACKAGE","optional":true,"description":"","type":"standalone"},{"name":"REAL","optional":true,"description":"Specifies a floating-point variable.","type":"standalone"},{"name":"SMALLINT","optional":true,"description":"Specifies an integer variable.","type":"standalone"},{"name":"TIME","optional":true,"description":"Specifies a time variable. precision specifies the precision for a TIME data type.","type":"standalone"},{"name":"TIMESTAMP","optional":true,"description":"Specifies both a date and time variable. precision specifies the precision for a TIMESTAMP data type.","type":"standalone"},{"name":"TINYINT","optional":true,"description":"Specifies an integer variable.","type":"standalone"},{"name":"VARBINARY","optional":true,"aliases":["BINARY VARYING"],"description":"Specifies a varying-length binary variable. Alias: BINARY VARYING","type":"standalone"},{"name":"VARCHAR","optional":true,"description":"Specifies a character variable.","type":"standalone"}]},{"name":"DO","description":"Specifies a group of statements to be executed as a unit.","help":"DO &lt;TO&gt;&lt;&gt;&lt;&gt; ...","arguments":[{"name":"BY","optional":true,"description":"Precedes an increment integer (other than 0) or an expression that generates an integer to be added to the value of the index variable in each iteration of the DO loop.","type":"standalone"},{"name":"TO","optional":true,"description":"Separates the start and stop integers or expressions that control the number of times the portion of the step between the iterative DO and END statements is processed.","type":"standalone"},{"name":"UNTIL","optional":true,"description":"","type":"standalone"},{"name":"WHILE","optional":true,"description":"","type":"standalone"}]},{"name":"DO UNTIL","description":"","help":""},{"name":"DO WHILE","description":"","help":""},{"name":"DROP","description":"Excludes columns from output tables. The DROP statement applies to all the tables that are created within the same DS2 program and can appear anywhere in the program. The columns in the DROP statement are available for processing in the DS2 program. If no DROP or KEEP statement appears, all tables that are created in the DS2 program contain all columns. Do not use both DROP and KEEP statements within the same DS2 program.","help":"DROP &lt;DROP PACKAGE package [(table-options)]&gt;&lt;THREAD&gt;","arguments":[{"name":"PACKAGE","optional":true,"description":"Arguments: package specifies the name of the package to be removed.","type":"standalone"},{"name":"THREAD","optional":true,"description":"Arguments: thread specifies the name of the thread to be removed.","type":"standalone"}]},{"name":"DROP PACKAGE","description":"Removes a DS2 package. package specifies the name of the package to be removed. table-options specifies optional arguments that the DS2 program applies when it removes a package.","help":"DROP PACKAGE &lt;ALTER=alter-password&gt;&lt;BUFNO=&lt;n | nK | hexX&gt;... &gt;&lt;BUFSIZE=&lt;n | nK | nM&gt;... &gt; ...","arguments":[{"name":"ALTER=","optional":true,"description":"Syntax Description: alter-password must be a valid SAS name. Details: The ALTER= option applies only to a SAS data set. You can use this option to assign a password or to access a read-protected, write-protected, or alter-protected file. When you replace a data set that is protected with an ALTER password, the new data set inherits the ALTER password. The password is blotted out when the code is written in the SAS log. For example: set a(alter=XXXXXXX);","help":"ALTER=*alter-password*","type":"value"},{"name":"AS","optional":true,"description":"Separates the new-name from the old-name.","type":"standalone"},{"name":"BUFNO=","optional":true,"description":"Syntax Description: n | nK specifies the number of buffers in multiples of 1 (bytes); 1,024 (kilobytes). For example, a value of 8 specifies 8 buffers, and a value of 1k specifies 1024 buffers. hex specifies the number of buffers as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the number of buffers to 45 buffers. MIN sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","help":"BUFNO=n | nK | hexX | MIN | MAX","type":"choice","arguments":[{"name":"n","description":"Specifies the number of buffers in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","description":"Specifies the number of buffers in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","description":"Specifies the number of buffers as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MIN","description":"Sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","type":"standalone"},{"name":"MAX","description":"Sets the number of buffers to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion.","type":"standalone"}]},{"name":"BUFSIZE=","optional":true,"description":"Syntax Description: n | nK | nM | nG specifies the page size in multiples of 1 (bytes); 1,024 (kilobytes); 1,048,576 (megabytes); or 1,073,741,824 (gigabytes). For example, a value of 8 specifies a page size of 8 bytes, and a value of 4k specifies a page size of 4096 bytes. hexX specifies the page size as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the page size to 45 bytes.","help":"BUFSIZE=n | nK | nM | nG | hexX | MAX","type":"choice","arguments":[{"name":"n","description":"Specifies the page size in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","description":"Specifies the page size in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"nM","description":"Specifies the page size in multiples of 1,048,576 (megabytes). Replace n with an integer value.","type":"standalone"},{"name":"nG","description":"Specifies the page size in multiples of 1,073,741,824 (gigabytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","description":"Specifies the page size as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MAX","description":"Sets the page size to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion bytes.","type":"standalone"}]},{"name":"BULKLOAD=","optional":true,"description":"Syntax Description: YES calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","help":"BULKLOAD=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","type":"standalone"},{"name":"NO","description":"Uses the dynamic SAS/ACCESS engine to insert or append data to a DBMS table.","type":"standalone"}]},{"name":"COMPRESS=","optional":true,"description":"Syntax Description: NO specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records). YES | CHAR specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. Alias: ON Tip: Use this compression algorithm for character data. Note: COMPRESS=CHAR is accepted by Version 7 and later versions. BINARY specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","help":"COMPRESS=NO | YES | CHAR | BINARY","type":"choice","arguments":[{"name":"NO","description":"Specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records).","type":"standalone"},{"name":"YES","aliases":["ON"],"description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations.","type":"standalone"},{"name":"CHAR","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. COMPRESS=CHAR is accepted by Version 7 and later versions.","type":"standalone"},{"name":"BINARY","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","type":"standalone"}]},{"name":"DBKEY=","optional":true,"description":"Syntax Description: column used by SAS to build an internal WHERE clause to search for matches in the DBMS table based on the key column. For example:","type":"value"},{"name":"DBNULL=","optional":true,"description":"Syntax Description: _ALL_ specifies that the YES or NO applies to all columns in the table. (This is valid in the interfaces to Informix, Oracle, Sybase, and Teradata only.) YES specifies that the NULL value is valid for the specified columns in the DBMS table. NO specifies that the NULL value is not valid for the specified columns in the DBMS table. column specifies the name of a column. Details: This option is valid only for creating DBMS tables. If you specify more than one column name, the names must be separated with spaces.","help":"DBNULL=_ALL_","type":"choice","arguments":[{"name":"_ALL_","type":"standalone"}]},{"name":"DROP=","optional":true,"description":"Arguments: column-list specifies the names of the columns to omit from the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The DROP= table option specifies that all columns in the column-list should not be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the drop attribute is specified, all columns not included in the drop statement will be used to create columns in the output rows.","type":"value"},{"name":"ENCRYPT=","optional":true,"description":"Syntax Description: YES encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set. NO does not encrypt the file.","help":"ENCRYPT=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set.","type":"standalone"},{"name":"NO","description":"Does not encrypt the file.","type":"standalone"}]},{"name":"KEEP=","optional":true,"description":"Arguments: column-list specifies the names of the columns to keep in the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The KEEP= table option specifies that all columns in the column-list should be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the keep attribute is specified, all columns not included in the KEEP statement will be dropped from the output rows.","type":"value"},{"name":"LABEL=","optional":true,"description":"Syntax Description:","help":"LABEL='*label*'","type":"value"},{"name":"LOCKTABLE=","optional":true,"description":"Syntax Description: SHARE locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data. EXCLUSIVE locks a table exclusively, preventing other users from accessing any table that you open. Details: You can lock tables only if you are the owner or have been granted the necessary privilege.","help":"LOCKTABLE=SHARE | EXCLUSIVE","type":"choice","arguments":[{"name":"SHARE","description":"Locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data.","type":"standalone"},{"name":"EXCLUSIVE","description":"Locks a table exclusively, preventing other users from accessing any table that you open.","type":"standalone"}]},{"name":"OVERWRITE=","optional":true,"description":"Arguments: YES | NO specifies whether the output table is deleted before a replacement output table is created or whether a package or thread is dropped. Default: NO","help":"OVERWRITE=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Specifies that the output table is deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"},{"name":"NO","description":"Specifies that the output table is not deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"}]},{"name":"PW=","optional":true,"description":"Syntax Description: password must be a valid SAS name. Details: The PW= option applies to all types of SAS files. You can use this option to assign a password to a SAS file or to access a password-protected SAS file. When replacing a SAS data set that is protected by an ALTER password, the new data set inherits the ALTER password. When the code is written to the SAS log the password is blotted out, for example: drop thread job2 (pw=xxxxxxx);","help":"PW=*password*","type":"value"},{"name":"READ=","optional":true,"description":"Syntax Description: read-password must be a valid SAS name. Details: The READ= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a read-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: declare package sales (read=XXXXXXX);","help":"READ=*read-password*","type":"value"},{"name":"RENAME=","optional":true,"description":"Arguments: old-name the column you want to rename. new-name the new name of the column. It must be a valid name for the data source. Details: The RENAME= table option allows you to change the names of one or more columns. If you use RENAME= when you create a table, the new column name is included in the output table. If you use RENAME= on an input table, the new name is used in DS2 programming statements. If you use RENAME= in the same DS2 program with either the DROP= or the KEEP= table option, the DROP= and the KEEP= table options are applied before RENAME=. You must use the old name in the DROP= and KEEP= table options. You cannot drop and rename the same column in the same statement.","help":"RENAME=AS","type":"choice","arguments":[{"name":"AS","type":"standalone"}]},{"name":"TYPE=","optional":true,"description":"Syntax Description: data-set-type specifies the special type of the data set. Details: Use the TYPE= table option to create a special SAS data set in the proper format, or to identify the special type of the SAS data set in a procedure statement.","help":"TYPE=*data-set-type*","type":"dataSet"},{"name":"WRITE=","optional":true,"description":"Syntax Description: write-password must be a valid SAS name. Details: The WRITE= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a write-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: drop thread job2a (write=XXXXXXX);","help":"WRITE=*write-password*","type":"value"}]},{"name":"DROP THREAD","description":"Removes a DS2 program thread. thread specifies the name of the thread to be removed. table-options specifies optional arguments that the DS2 program applies when it removes a thread.","help":"DROP THREAD &lt;ALTER=alter-password&gt;&lt;BUFNO=&lt;n | nK | hexX&gt;... &gt;&lt;BUFSIZE=&lt;n | nK | nM&gt;... &gt; ...","arguments":[{"name":"ALTER=","optional":true,"description":"Syntax Description: alter-password must be a valid SAS name. Details: The ALTER= option applies only to a SAS data set. You can use this option to assign a password or to access a read-protected, write-protected, or alter-protected file. When you replace a data set that is protected with an ALTER password, the new data set inherits the ALTER password. The password is blotted out when the code is written in the SAS log. For example: set a(alter=XXXXXXX);","help":"ALTER=*alter-password*","type":"value"},{"name":"AS","optional":true,"description":"Separates the new-name from the old-name.","type":"standalone"},{"name":"BUFNO=","optional":true,"description":"Syntax Description: n | nK specifies the number of buffers in multiples of 1 (bytes); 1,024 (kilobytes). For example, a value of 8 specifies 8 buffers, and a value of 1k specifies 1024 buffers. hex specifies the number of buffers as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the number of buffers to 45 buffers. MIN sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","help":"BUFNO=n | nK | hexX | MIN | MAX","type":"choice","arguments":[{"name":"n","description":"Specifies the number of buffers in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","description":"Specifies the number of buffers in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","description":"Specifies the number of buffers as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MIN","description":"Sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","type":"standalone"},{"name":"MAX","description":"Sets the number of buffers to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion.","type":"standalone"}]},{"name":"BUFSIZE=","optional":true,"description":"Syntax Description: n | nK | nM | nG specifies the page size in multiples of 1 (bytes); 1,024 (kilobytes); 1,048,576 (megabytes); or 1,073,741,824 (gigabytes). For example, a value of 8 specifies a page size of 8 bytes, and a value of 4k specifies a page size of 4096 bytes. hexX specifies the page size as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the page size to 45 bytes.","help":"BUFSIZE=n | nK | nM | nG | hexX | MAX","type":"choice","arguments":[{"name":"n","description":"Specifies the page size in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","description":"Specifies the page size in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"nM","description":"Specifies the page size in multiples of 1,048,576 (megabytes). Replace n with an integer value.","type":"standalone"},{"name":"nG","description":"Specifies the page size in multiples of 1,073,741,824 (gigabytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","description":"Specifies the page size as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MAX","description":"Sets the page size to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion bytes.","type":"standalone"}]},{"name":"BULKLOAD=","optional":true,"description":"Syntax Description: YES calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","help":"BULKLOAD=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","type":"standalone"},{"name":"NO","description":"Uses the dynamic SAS/ACCESS engine to insert or append data to a DBMS table.","type":"standalone"}]},{"name":"COMPRESS=","optional":true,"description":"Syntax Description: NO specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records). YES | CHAR specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. Alias: ON Tip: Use this compression algorithm for character data. Note: COMPRESS=CHAR is accepted by Version 7 and later versions. BINARY specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","help":"COMPRESS=NO | YES | CHAR | BINARY","type":"choice","arguments":[{"name":"NO","description":"Specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records).","type":"standalone"},{"name":"YES","aliases":["ON"],"description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations.","type":"standalone"},{"name":"CHAR","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. COMPRESS=CHAR is accepted by Version 7 and later versions.","type":"standalone"},{"name":"BINARY","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","type":"standalone"}]},{"name":"DBKEY=","optional":true,"description":"Syntax Description: column used by SAS to build an internal WHERE clause to search for matches in the DBMS table based on the key column. For example:","type":"value"},{"name":"DBNULL=","optional":true,"description":"Syntax Description: _ALL_ specifies that the YES or NO applies to all columns in the table. (This is valid in the interfaces to Informix, Oracle, Sybase, and Teradata only.) YES specifies that the NULL value is valid for the specified columns in the DBMS table. NO specifies that the NULL value is not valid for the specified columns in the DBMS table. column specifies the name of a column. Details: This option is valid only for creating DBMS tables. If you specify more than one column name, the names must be separated with spaces.","help":"DBNULL=_ALL_","type":"choice","arguments":[{"name":"_ALL_","type":"standalone"}]},{"name":"DROP=","optional":true,"description":"Arguments: column-list specifies the names of the columns to omit from the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The DROP= table option specifies that all columns in the column-list should not be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the drop attribute is specified, all columns not included in the drop statement will be used to create columns in the output rows.","type":"value"},{"name":"ENCRYPT=","optional":true,"description":"Syntax Description: YES encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set. NO does not encrypt the file.","help":"ENCRYPT=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set.","type":"standalone"},{"name":"NO","description":"Does not encrypt the file.","type":"standalone"}]},{"name":"KEEP=","optional":true,"description":"Arguments: column-list specifies the names of the columns to keep in the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The KEEP= table option specifies that all columns in the column-list should be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the keep attribute is specified, all columns not included in the KEEP statement will be dropped from the output rows.","type":"value"},{"name":"LABEL=","optional":true,"description":"Syntax Description:","help":"LABEL='*label*'","type":"value"},{"name":"LOCKTABLE=","optional":true,"description":"Syntax Description: SHARE locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data. EXCLUSIVE locks a table exclusively, preventing other users from accessing any table that you open. Details: You can lock tables only if you are the owner or have been granted the necessary privilege.","help":"LOCKTABLE=SHARE | EXCLUSIVE","type":"choice","arguments":[{"name":"SHARE","description":"Locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data.","type":"standalone"},{"name":"EXCLUSIVE","description":"Locks a table exclusively, preventing other users from accessing any table that you open.","type":"standalone"}]},{"name":"OVERWRITE=","optional":true,"description":"Arguments: YES | NO specifies whether the output table is deleted before a replacement output table is created or whether a package or thread is dropped. Default: NO","help":"OVERWRITE=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Specifies that the output table is deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"},{"name":"NO","description":"Specifies that the output table is not deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"}]},{"name":"PW=","optional":true,"description":"Syntax Description: password must be a valid SAS name. Details: The PW= option applies to all types of SAS files. You can use this option to assign a password to a SAS file or to access a password-protected SAS file. When replacing a SAS data set that is protected by an ALTER password, the new data set inherits the ALTER password. When the code is written to the SAS log the password is blotted out, for example: drop thread job2 (pw=xxxxxxx);","help":"PW=*password*","type":"value"},{"name":"READ=","optional":true,"description":"Syntax Description: read-password must be a valid SAS name. Details: The READ= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a read-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: declare package sales (read=XXXXXXX);","help":"READ=*read-password*","type":"value"},{"name":"RENAME=","optional":true,"description":"Arguments: old-name the column you want to rename. new-name the new name of the column. It must be a valid name for the data source. Details: The RENAME= table option allows you to change the names of one or more columns. If you use RENAME= when you create a table, the new column name is included in the output table. If you use RENAME= on an input table, the new name is used in DS2 programming statements. If you use RENAME= in the same DS2 program with either the DROP= or the KEEP= table option, the DROP= and the KEEP= table options are applied before RENAME=. You must use the old name in the DROP= and KEEP= table options. You cannot drop and rename the same column in the same statement.","help":"RENAME=AS","type":"choice","arguments":[{"name":"AS","type":"standalone"}]},{"name":"TYPE=","optional":true,"description":"Syntax Description: data-set-type specifies the special type of the data set. Details: Use the TYPE= table option to create a special SAS data set in the proper format, or to identify the special type of the SAS data set in a procedure statement.","help":"TYPE=*data-set-type*","type":"dataSet"},{"name":"WRITE=","optional":true,"description":"Syntax Description: write-password must be a valid SAS name. Details: The WRITE= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a write-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: drop thread job2a (write=XXXXXXX);","help":"WRITE=*write-password*","type":"value"}]},{"name":"ELSE","description":"If the condition in an IF-THEN statement is false and an ELSE statement is present, then the ELSE action is carried out.","help":"ELSE &lt;DO [ &lt; index-variable-clause &gt; ] [ &lt; conditional-clause &gt; ] &gt;&lt;ELSE IF expression THEN statement&gt;&lt;THEN&gt; ...","arguments":[{"name":"BY","optional":true,"description":"Precedes an increment integer (other than 0) or an expression that generates an integer to be added to the value of the index variable in each iteration of the DO loop.","type":"standalone"},{"name":"CONTINUE","optional":true,"description":"Stops processing the current DO loop iteration and resumes with the next iteration.","type":"standalone"},{"name":"DO","optional":true,"description":"","type":"standalone"},{"name":"IF","optional":true,"description":"Executes a statement for observations that meet specific conditions.","type":"standalone"},{"name":"LEAVE","optional":true,"description":"Stops processing the current DO loop and transfers execution to either the statement following the current DO statement, or a labeled DO statement that encloses the current DO statement.","type":"standalone"},{"name":"PUT","optional":true,"description":"<put-list>::= 'character-string' | <eq-expression> [ = ] [ [ : ] format [-L | -C | -R ] ] <eq-expression>::= identifier | array-reference | this-expression Prints values of program variables and constants to the log. Arguments: 'character-string' specifies a string of text, enclosed in quotation marks, that is written to the SAS log. identifier names a variable whose value is written to the SAS log. array-reference specifies an array element. The subscript can be any SAS expression that resolves to an integer value when the PUT statement executes. Use the array subscript asterisk (*) to write all elements of the array. this-expression specifies a THIS expression. = If an equal sign is added after a variable or array element, then the output is preceded by the variable or array element name and an equal sign. : enables you to specify a format that the PUT statement uses to write the variable value. All leading and trailing blanks are deleted, and each value is followed by a single blank. Restriction: You must specify a format.","type":"standalone"},{"name":"THEN","optional":true,"description":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS statement.","type":"standalone"},{"name":"TO","optional":true,"description":"Separates the start and stop integers or expressions that control the number of times the portion of the step between the iterative DO and END statements is processed.","type":"standalone"}]},{"name":"END","description":"Marks the end of a block of code.","help":"END"},{"name":"ENDDATA","aliases":["ENDTABLE"],"description":"The ENDDATA statement terminates the DS2 code block. The statements between the DATA and ENDDATA statement are submitted to the grid for execution. The DS2 run, init, and term methods are specified between the DATA and ENDDATA statements.","help":"ENDDATA "},{"name":"ENDPACKAGE","description":"Marks the end of a PACKAGE statement. Although the ENDPACKAGE statement is not required, it can make the code easier to read.","help":"ENDPACKAGE"},{"name":"ENDTHREAD","description":"Marks the end of a THREAD statement. Although the ENDTHREAD statement is not required, it can make the code easier to read.","help":"ENDTHREAD"},{"name":"FORWARD","description":"Indicates that the method definition follows the method expression. method specifies the name of the method to be defined.","help":"FORWARD method [ ...method ]"},{"name":"GLOBAL","description":"Declares one or more global variables or arrays.","help":"GLOBAL &lt;BIGINT&gt;&lt;IDENTITY&gt;&lt;INT&gt; ...","arguments":[{"name":"BIGINT","optional":true,"description":"Specifies an integer variable.","type":"standalone"},{"name":"CHAR","optional":true,"description":"Specifies a character variable.","type":"standalone"},{"name":"CHARACTER","optional":true,"description":"Specifies character set encoding information for CHAR and VARCHAR data types.","help":"CHARACTER SET","type":"standalone"},{"name":"DATE","optional":true,"description":"Specifies a date variable.","type":"standalone"},{"name":"DOUBLE PRECISION","optional":true,"aliases":["DOUBLE"],"description":"Specifies a floating-point variable.","type":"standalone"},{"name":"FLOAT","optional":true,"description":"Specifies a floating-point variable.","type":"standalone"},{"name":"FORMAT","optional":true,"description":"Associates any valid DS2 format with the variable.","type":"standalone"},{"name":"HAVING","optional":true,"description":"The HAVING clause functions the same as the FORMAT, INFORMAT, and LABEL statements in Base SAS. However, in DS2, the attributes must be specified in the declaration statement of the variable.","type":"standalone"},{"name":"IDENTITY","optional":true,"description":"Specifies an integer variable.","type":"standalone"},{"name":"INFORMAT","optional":true,"description":"Associates any valid SAS informat with the variable.","type":"standalone"},{"name":"INT","optional":true,"aliases":["INTEGER"],"description":"Specifies an integer variable.","type":"standalone"},{"name":"LABEL","optional":true,"description":"Assigns a descriptive label to the variable. The label can be a CHAR literal (string) or NCHAR literal (nstring).","type":"standalone"},{"name":"NCHAR","optional":true,"description":"Specifies a character variable.","type":"standalone"},{"name":"NVARCHAR","optional":true,"description":"Specifies a character variable.","type":"standalone"},{"name":"REAL","optional":true,"description":"Specifies a floating-point variable.","type":"standalone"},{"name":"SMALLINT","optional":true,"description":"Specifies an integer variable.","type":"standalone"},{"name":"TIME","optional":true,"description":"Specifies a time variable. precision specifies the precision for a TIME data type.","type":"standalone"},{"name":"TIMESTAMP","optional":true,"description":"Specifies both a date and time variable. precision specifies the precision for a TIMESTAMP data type.","type":"standalone"},{"name":"TINYINT","optional":true,"description":"Specifies an integer variable.","type":"standalone"},{"name":"VARBINARY","optional":true,"description":"Specifies a varying-length binary variable. Alias: BINARY VARYING","type":"standalone"},{"name":"VARCHAR","optional":true,"description":"Specifies a character variable.","type":"standalone"}]},{"name":"GOTO","description":"Transfers execution immediately to a labeled statement. The destination label for the GOTO statement must be within the same DS2 method. You must specify the label argument or an error will occur. Statement labels are defined by using the Labels statement.","help":"GOTO label"},{"name":"IF","description":"] Executes a statement for observations that meet specific conditions.","help":"IF &lt;DO [ &lt; index-variable-clause &gt; ] [ &lt; conditional-clause &gt; ] &gt;&lt;THEN&gt;&lt;TO&gt; ...","arguments":[{"name":"BY","optional":true,"description":"Precedes an increment integer (other than 0) or an expression that generates an integer to be added to the value of the index variable in each iteration of the DO loop.","type":"standalone"},{"name":"CONTINUE","optional":true,"description":"Stops processing the current DO loop iteration and resumes with the next iteration.","type":"standalone"},{"name":"DO","optional":true,"description":"","type":"standalone"},{"name":"LEAVE","optional":true,"description":"Stops processing the current DO loop and transfers execution to either the statement following the current DO statement, or a labeled DO statement that encloses the current DO statement.","type":"standalone"},{"name":"THEN","optional":true,"description":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS statement.","type":"standalone"},{"name":"TO","optional":true,"description":"Separates the start and stop integers or expressions that control the number of times the portion of the step between the iterative DO and END statements is processed.","type":"standalone"}]},{"name":"KEEP","description":"Includes columns in output tables. The KEEP statement specifies that all columns in the column list should be included in the creation of output rows. If the KEEP attribute is specified, all columns not included in the KEEP statement will be dropped from the output rows. If no DROP or KEEP statement appears, all tables that are created in the DS2 program contain all columns. Do not use both DROP and KEEP statements within the same DS2 program.","help":"KEEP column-list"},{"name":"LEAVE","description":"Stops processing the current DO loop and transfers execution to either the statement following the current DO statement, or a labeled DO statement that encloses the current DO statement.","help":"LEAVE [ identifier ] "},{"name":"METHOD","description":"Defines a block of code that can be called and executed multiple times.","help":"METHOD &lt;&gt;&lt;RETURNS data-type&gt;&lt;&gt; ...","arguments":[{"name":"BIGINT","optional":true,"description":"Specifies an integer variable.","type":"standalone"},{"name":"CHAR","optional":true,"description":"Specifies a character variable.","type":"standalone"},{"name":"DATE","optional":true,"description":"Specifies a date variable.","type":"standalone"},{"name":"DOUBLE PRECISION","optional":true,"aliases":["DOUBLE"],"description":"Specifies a floating-point variable.","type":"standalone"},{"name":"FLOAT","optional":true,"description":"Specifies a floating-point variable.","type":"standalone"},{"name":"IDENTITY","optional":true,"description":"Specifies an integer variable.","type":"standalone"},{"name":"INIT","optional":true,"description":"Without Arguments The METHOD INIT statement has no arguments. If you try to pass arguments, an error will occur. Details: Typically, the INIT method will contain any initialization code such as variable initialization or opening of tables. Code in the INIT method will run once at the beginning of the DS2 program. Before the INIT method has run, variables in the program data vector which have not been retained '(by using the RETAIN statement) will be set to either SAS missing values or null values depending on whether you are in SAS mode or ANSI mode.","type":"standalone"},{"name":"INT","optional":true,"aliases":["INTEGER"],"description":"Specifies an integer variable.","type":"standalone"},{"name":"NCHAR","optional":true,"description":"Specifies a character variable.","type":"standalone"},{"name":"NVARCHAR","optional":true,"description":"Specifies a character variable.","type":"standalone"},{"name":"REAL","optional":true,"description":"Specifies a floating-point variable.","type":"standalone"},{"name":"RETURNS","optional":true,"description":"Specifies the data type of the value that the method returns. The type can be any valid character, numeric, or date type.","type":"standalone"},{"name":"RUN","optional":true,"description":"Without Arguments: The METHOD RUN statement has no arguments. If you try to pass arguments, an error will occur. Details: Typically, the RUN method will contain the main DS2 program code. The RUN method has the same feature of automatic, implicit looping as the Base SAS DATA step. After the RUN method has been executed one time, the RUN method either runs again or control is passed to the TERM method.","type":"standalone"},{"name":"SMALLINT","optional":true,"description":"Specifies an integer variable.","type":"standalone"},{"name":"TERM","optional":true,"description":"Without Arguments: The METHOD TERM statement has no arguments. If you try to pass arguments, an error will occur. Details: Typically, the TERM method will contain any finalization code such as writing data to the SAS log. Code in the TERM method will run once at the end of the DS2 program.","type":"standalone"},{"name":"TIME","optional":true,"description":"Specifies a time variable. precision specifies the precision for a TIME data type.","type":"standalone"},{"name":"TIMESTAMP","optional":true,"description":"Specifies both a date and time variable. precision specifies the precision for a TIMESTAMP data type.","type":"standalone"},{"name":"TINYINT","optional":true,"description":"Specifies an integer variable.","type":"standalone"},{"name":"VARBINARY","optional":true,"aliases":["BINARY VARYING"],"description":"Specifies a varying-length binary variable. Alias: BINARY VARYING","type":"standalone"},{"name":"VARCHAR","optional":true,"description":"Specifies a character variable.","type":"standalone"}]},{"name":"OTHERWISE","description":"An optional OTHERWISE statement specifies a statement to be executed if no WHEN condition is met.","help":"[OTHERWISE statement-list]"},{"name":"OUTPUT","description":"Writes the current row to a table. table specifies the name of the table to which to write rows. table can be one of these forms. catalog.schema.table-name schema.table-name catalog.table-name table-name catalog is an implementation of the ANSI SQL standard for an SQL catalog, which is a data container object that groups logically related schemas. schema is an implementation of the ANSI SQL standard for an SQL schema, which is a data container object that groups files such as tables and views and other objects supported by a data source such as stored procedures. table-name is the name of the table. Restriction: All names specified in the OUTPUT statement must also appear in the TABLE statement. Requirements: Table naming conventions are based on the datasource. Tip: You can specify up to as many tables in the OUTPUT statement as you specified in the TABLE statement for that DS2 program. _ROWSET_ specifies that the OUTPUT statement should not write rows to a table, but it should instead return table rows to the client application. _NULL_ specifies that the OUTPUT statement should not write rows to either a table or the client application.","help":"OUTPUT &lt;_NULL_&gt;&lt;_ROWSET_&gt;","arguments":[{"name":"_NULL_","optional":true,"description":"Specifies that the OUTPUT statement should not write rows to either a table or the client application.","type":"standalone"},{"name":"_ROWSET_","optional":true,"description":"Specifies that the OUTPUT statement should not write rows to a table, but it should instead return table rows to the client application.","type":"standalone"}]},{"name":"PACKAGE","description":"Creates a DS2 package. package specifies the package name. package can be one of these forms. catalog.schema.package schema.package catalog.package package catalog is an implementation of the ANSI SQL standard for an SQL catalog, which is a data container object that groups logically related schemas. schema is an implementation of the ANSI SQL standard for an SQL schema, which is a data container object that groups files such as tables and views and other objects supported by a data source such as stored procedures. package is the name of the package. Requirement: Package naming conventions are based on the data source.","help":"PACKAGE HASH HITER &lt;SAS_ENCRYPT=&lt;YES | NO&gt;&gt; ...","arguments":[{"name":"HASH","description":"Specifies the name of the package as HASH to register the hash package for use in a DS2 program.","type":"standalone"},{"name":"HITER","description":"Specifies the name of the package as HITER to register the hash iterator package for use in a DS2 program.","type":"standalone"},{"name":"ALTER=","optional":true,"followsDelimiter":"/","description":"Syntax Description: alter-password must be a valid SAS name. Details: The ALTER= option applies only to a SAS data set. You can use this option to assign a password or to access a read-protected, write-protected, or alter-protected file. When you replace a data set that is protected with an ALTER password, the new data set inherits the ALTER password. The password is blotted out when the code is written in the SAS log. For example: set a(alter=XXXXXXX);","help":"ALTER=*alter-password*","type":"value"},{"name":"AS","optional":true,"followsDelimiter":"/","description":"Separates the new-name from the old-name.","type":"standalone"},{"name":"BUFNO=","optional":true,"followsDelimiter":"/","description":"Syntax Description: n | nK specifies the number of buffers in multiples of 1 (bytes); 1,024 (kilobytes). For example, a value of 8 specifies 8 buffers, and a value of 1k specifies 1024 buffers. hex specifies the number of buffers as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the number of buffers to 45 buffers. MIN sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","help":"BUFNO=n | nK | hexX | MIN | MAX","type":"choice","arguments":[{"name":"n","followsDelimiter":"/","description":"Specifies the number of buffers in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","followsDelimiter":"/","description":"Specifies the number of buffers in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","followsDelimiter":"/","description":"Specifies the number of buffers as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MIN","followsDelimiter":"/","description":"Sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","type":"standalone"},{"name":"MAX","followsDelimiter":"/","description":"Sets the number of buffers to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion.","type":"standalone"}]},{"name":"BUFSIZE=","optional":true,"followsDelimiter":"/","description":"Syntax Description: n | nK | nM | nG specifies the page size in multiples of 1 (bytes); 1,024 (kilobytes); 1,048,576 (megabytes); or 1,073,741,824 (gigabytes). For example, a value of 8 specifies a page size of 8 bytes, and a value of 4k specifies a page size of 4096 bytes. hexX specifies the page size as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the page size to 45 bytes.","help":"BUFSIZE=n | nK | nM | nG | hexX | MAX","type":"choice","arguments":[{"name":"n","followsDelimiter":"/","description":"Specifies the page size in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","followsDelimiter":"/","description":"Specifies the page size in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"nM","followsDelimiter":"/","description":"Specifies the page size in multiples of 1,048,576 (megabytes). Replace n with an integer value.","type":"standalone"},{"name":"nG","followsDelimiter":"/","description":"Specifies the page size in multiples of 1,073,741,824 (gigabytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","followsDelimiter":"/","description":"Specifies the page size as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MAX","followsDelimiter":"/","description":"Sets the page size to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion bytes.","type":"standalone"}]},{"name":"BULKLOAD=","optional":true,"followsDelimiter":"/","description":"Syntax Description: YES calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","help":"BULKLOAD=YES | NO","type":"choice","arguments":[{"name":"YES","followsDelimiter":"/","description":"Calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","type":"standalone"},{"name":"NO","followsDelimiter":"/","description":"Uses the dynamic SAS/ACCESS engine to insert or append data to a DBMS table.","type":"standalone"}]},{"name":"COMPRESS=","optional":true,"followsDelimiter":"/","description":"Syntax Description: NO specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records). YES | CHAR specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. Alias: ON Tip: Use this compression algorithm for character data. Note: COMPRESS=CHAR is accepted by Version 7 and later versions. BINARY specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","help":"COMPRESS=NO | YES | CHAR | BINARY","type":"choice","arguments":[{"name":"NO","followsDelimiter":"/","description":"Specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records).","type":"standalone"},{"name":"YES","followsDelimiter":"/","aliases":["ON"],"description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations.","type":"standalone"},{"name":"CHAR","followsDelimiter":"/","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. COMPRESS=CHAR is accepted by Version 7 and later versions.","type":"standalone"},{"name":"BINARY","followsDelimiter":"/","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","type":"standalone"}]},{"name":"DBKEY=","optional":true,"followsDelimiter":"/","description":"Syntax Description: column used by SAS to build an internal WHERE clause to search for matches in the DBMS table based on the key column. For example:","type":"value"},{"name":"DBNULL=","optional":true,"followsDelimiter":"/","description":"Syntax Description: _ALL_ specifies that the YES or NO applies to all columns in the table. (This is valid in the interfaces to Informix, Oracle, Sybase, and Teradata only.) YES specifies that the NULL value is valid for the specified columns in the DBMS table. NO specifies that the NULL value is not valid for the specified columns in the DBMS table. column specifies the name of a column. Details: This option is valid only for creating DBMS tables. If you specify more than one column name, the names must be separated with spaces.","help":"DBNULL=_ALL_","type":"choice","arguments":[{"name":"_ALL_","type":"standalone"}]},{"name":"DROP=","optional":true,"followsDelimiter":"/","description":"Arguments: column-list specifies the names of the columns to omit from the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The DROP= table option specifies that all columns in the column-list should not be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the drop attribute is specified, all columns not included in the drop statement will be used to create columns in the output rows.","type":"value"},{"name":"ENCRYPT=","optional":true,"followsDelimiter":"/","description":"Syntax Description: YES encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set. NO does not encrypt the file.","help":"ENCRYPT=YES | NO","type":"choice","arguments":[{"name":"YES","followsDelimiter":"/","description":"Encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set.","type":"standalone"},{"name":"NO","followsDelimiter":"/","description":"Does not encrypt the file.","type":"standalone"}]},{"name":"EXTENSION=","optional":true,"followsDelimiter":"/","aliases":["EXT="],"description":"Specifies that the package is of type hash or hash iterator.","help":"EXTENSION='HASH' | 'HITER'","type":"choice","arguments":[{"name":"'HASH'","followsDelimiter":"/","description":"Specifies that the package is of type hash.","type":"standalone"},{"name":"'HITER'","followsDelimiter":"/","description":"Specifies that the package is of type hash iterator.","type":"standalone"}]},{"name":"KEEP=","optional":true,"followsDelimiter":"/","description":"Arguments: column-list specifies the names of the columns to keep in the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The KEEP= table option specifies that all columns in the column-list should be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the keep attribute is specified, all columns not included in the KEEP statement will be dropped from the output rows.","type":"value"},{"name":"LABEL=","optional":true,"followsDelimiter":"/","description":"Syntax Description:","help":"LABEL='*label*'","type":"value"},{"name":"LOCKTABLE=","optional":true,"followsDelimiter":"/","description":"Syntax Description: SHARE locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data. EXCLUSIVE locks a table exclusively, preventing other users from accessing any table that you open. Details: You can lock tables only if you are the owner or have been granted the necessary privilege.","help":"LOCKTABLE=SHARE | EXCLUSIVE","type":"choice","arguments":[{"name":"SHARE","followsDelimiter":"/","description":"Locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data.","type":"standalone"},{"name":"EXCLUSIVE","followsDelimiter":"/","description":"Locks a table exclusively, preventing other users from accessing any table that you open.","type":"standalone"}]},{"name":"OVERWRITE=","optional":true,"followsDelimiter":"/","description":"Arguments: YES | NO specifies whether the output table is deleted before a replacement output table is created or whether a package or thread is dropped. Default: NO","help":"OVERWRITE=YES | NO","type":"choice","arguments":[{"name":"YES","followsDelimiter":"/","description":"Specifies that the output table is deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"},{"name":"NO","followsDelimiter":"/","description":"Specifies that the output table is not deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"}]},{"name":"PW=","optional":true,"followsDelimiter":"/","description":"Syntax Description: password must be a valid SAS name. Details: The PW= option applies to all types of SAS files. You can use this option to assign a password to a SAS file or to access a password-protected SAS file. When replacing a SAS data set that is protected by an ALTER password, the new data set inherits the ALTER password. When the code is written to the SAS log the password is blotted out, for example: drop thread job2 (pw=xxxxxxx);","help":"PW=*password*","type":"value"},{"name":"READ=","optional":true,"followsDelimiter":"/","description":"Syntax Description: read-password must be a valid SAS name. Details: The READ= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a read-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: declare package sales (read=XXXXXXX);","help":"READ=*read-password*","type":"value"},{"name":"RENAME=","optional":true,"followsDelimiter":"/","description":"Arguments: old-name the column you want to rename. new-name the new name of the column. It must be a valid name for the data source. Details: The RENAME= table option allows you to change the names of one or more columns. If you use RENAME= when you create a table, the new column name is included in the output table. If you use RENAME= on an input table, the new name is used in DS2 programming statements. If you use RENAME= in the same DS2 program with either the DROP= or the KEEP= table option, the DROP= and the KEEP= table options are applied before RENAME=. You must use the old name in the DROP= and KEEP= table options. You cannot drop and rename the same column in the same statement.","help":"RENAME=AS","type":"choice","arguments":[{"name":"AS","type":"standalone"}]},{"name":"SAS_ENCRYPT=","optional":true,"followsDelimiter":"/","description":"Specifies the encryption algorithm.","help":"SAS_ENCRYPT=YES | NO","type":"choice","arguments":[{"name":"YES","followsDelimiter":"/","description":"Specifies the SAS Proprietary algorithm.","type":"standalone"},{"name":"NO","followsDelimiter":"/","description":"Specifies the Advanced Encryption Standard (AES) algorithm.","type":"standalone"}]},{"name":"TYPE=","optional":true,"followsDelimiter":"/","description":"Syntax Description: data-set-type specifies the special type of the data set. Details: Use the TYPE= table option to create a special SAS data set in the proper format, or to identify the special type of the SAS data set in a procedure statement.","help":"TYPE=*data-set-type*","type":"dataSet"},{"name":"WRITE=","optional":true,"followsDelimiter":"/","description":"Syntax Description: write-password must be a valid SAS name. Details: The WRITE= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a write-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: drop thread job2a (write=XXXXXXX);","help":"WRITE=*write-password*","type":"value"}]},{"name":"PERFORMANCE","description":"The PERFORMANCE statement defines performance parameters for multithreaded and distributed computing, passes variables about the distributed computing environment, and requests detailed results about the performance characteristics of a High-Performance Analytics procedure. With the PERFORMANCE statement, you can also control whether a High-Performance Analytics procedure executes in SMP or MPP mode.","help":"PERFORMANCE &lt;COMMIT=n&gt;&lt;CPUCOUNT=&lt;ACTUAL | &lt;num&gt;&gt;&gt;&lt;DATASERVER=“name”&gt; ...","arguments":[{"name":"COMMIT=","optional":true,"description":"Requests that the High-Performance Analytics procedure write periodic updates to the SAS Log when observations are sent from the client to the appliance for distributed processing.","help":"COMMIT=*n*","type":"value"},{"name":"CPUCOUNT=","optional":true,"description":"Specifies how many processors the procedure assumes are available on each host in the computing environment. num can be any integer from 1 to 256. CPUCOUNT=ACTUAL sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools. Setting CPUCOUNT= to a number greater than the actual number of available CPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system option.","help":"CPUCOUNT=ACTUAL | &lt;*num*&gt;","type":"choice","arguments":[{"name":"ACTUAL","description":"Sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","type":"standalone"},{"name":"num","placeholder":true,"description":"Replace <num> with an actual number. Setting CPUCOUNT= to a number greater than the actual number of available CPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system option.","type":"standaloneOrValue"}]},{"name":"DATASERVER=","optional":true,"description":"Specifies the name of the server on Teradata systems as defined through the hosts file and as used in the LIBNAME statement for Teradata. For example, if the hosts file defines myservercop1 33.44.55.66 as the server for Teradata, then a LIBNAME specification would be as follows: libname TDLib teradata server=myserver user= password= database= ; A PERFORMANCE statement to induce running alongside the Teradata server would specify the following:","type":"value"},{"name":"DETAILS","optional":true,"description":"Requests a table that shows a timing breakdown of the procedure steps.","type":"standalone"},{"name":"HOST=","optional":true,"aliases":["GRIDHOST="],"description":"Specifies the name of the appliance host in single or double quotes. If the HOST= option is specified, it overrides the value of the GRIDHOST environment variable.","type":"value"},{"name":"INSTALL=","optional":true,"aliases":["INSTALLLOC="],"description":"Specifies the directory in which the High-Performance Analytics shared libraries are installed on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC environment variable.","type":"value"},{"name":"NODES=","optional":true,"aliases":["NNODES="],"description":"Specifies the number of nodes in the distributed computing environment, provided that the data are not processed alongside the database.","type":"value"},{"name":"NTHREADS=","optional":true,"description":"Specifies the number of threads for analytic computations and overrides the SAS system option THREADS | NOTHREADS. If you do not specify the NTHREADS= option, the number of threads are determined based on the number of CPUs on the host on which the analytic computations execute. The algorithm by which a CPU count is converted to a thread count is specific to the High- Performance Analytics procedure. Most procedures create one thread per CPU for the analytic computations. By default, High-Performance Analytics procedures execute in multiple concurrent threads unless turned off by the NOTHREADS system option or you force single-threaded execution with NTHREADS=1. The largest number that can be specified for n is 256. Individual High-Performance Analytics procedures can impose more stringent limits if called for by algorithmic considerations. You can affect the determination of the CPU count with the CPUCOUNT= option in the PERFORMANCE statement.","help":"NTHREADS=*n*","type":"value"},{"name":"TIMEOUT=","optional":true,"description":"Specifies the timeout in seconds for a High-Performance Analytics procedure to wait for a connection to the appliance and establish a connection back to the client. The default is s=120 seconds. If jobs are submitted to the appliance through workload management tools that might suspend access to the appliance for a longer period, you might want to increase the timeout value.","help":"TIMEOUT=*s*","type":"value"}]},{"name":"PUT","description":"<put-list>::= 'character-string' | <eq-expression> [ = ] [ [ : ] format [-L | -C | -R ] ] <eq-expression>::= identifier | array-reference | this-expression Prints values of program variables and constants to the log. Arguments: 'character-string' specifies a string of text, enclosed in quotation marks, that is written to the SAS log. identifier names a variable whose value is written to the SAS log. array-reference specifies an array element. The subscript can be any SAS expression that resolves to an integer value when the PUT statement executes. Use the array subscript asterisk (*) to write all elements of the array. this-expression specifies a THIS expression. = If an equal sign is added after a variable or array element, then the output is preceded by the variable or array element name and an equal sign. : enables you to specify a format that the PUT statement uses to write the variable value. All leading and trailing blanks are deleted, and each value is followed by a single blank. Restriction: You must specify a format. format specifies a format to use when the data value is written to the SAS log. If you use a colon modifier (:) with the format name, all leading and trailing blanks are deleted and each value is followed by a single blank. To override the default alignment, you can add an alignment specification to a format: -L left aligns the value. -C centers the value. -R right aligns the value. Tip: Ensure that the format width provides enough space to write the value and any commas, dollar signs, decimal points, or other special characters that the format includes.","help":"PUT &lt; put-list &gt; [ ... &lt;put-list&gt; ] "},{"name":"RENAME","description":"Specifies new names for columns in output tables.","help":"RENAME &lt;AS&gt;","arguments":[{"name":"AS","optional":true,"description":"RENAME old-name AS new-name [ ... old-name AS new-name ]; Separates the new-name from the old-name.","type":"standalone"}]},{"name":"RETAIN","description":"Specifies that all columns in the column list should have their values retained during each execution of the RUN method. If you do not specify any arguments, the RETAIN statement causes the values of all columns to be retained from one iteration of the DS2 program to the next.","help":"(1) RETAIN"},{"name":"RETURN","description":"Returns execution from a method to the method caller. expression specifies any valid expression that returns a single value. The expression's type is evaluated, and if necessary, converted to the type specified in the METHOD statement's RETURNS clause. The value of expression is then passed back to the caller of the method.","help":"RETURN [ expression ]"},{"name":"RUN CANCEL","description":"The RUN CANCEL statement cancels the preceding PROC HPDS2 statements. RUN CANCEL is useful if you enter a typographical error.","help":"RUN CANCEL "},{"name":"SELECT","description":"Executes one of several statements or groups of statements. Arguments: select-expression specifies an expression that evaluates to a single value of any type other than VARBINARY. end-label The END statement closes the SELECT statement. The optional end-label argument specifies an identifier. This label, created by using the Labels statement, must match the label immediately preceding the SELECT statement, or an error will occur. when-expression specifies any expression, including a compound expression. Requirement: You must specify at least one when-expression. statement-list can be any executable statement or statements.","help":"SELECT [ ( select-expression ) ]"},{"name":"SET","description":"Reads rows from one or more tables. Each time the SET statement executes, one row is read into the program data vector. SET reads all columns and all rows from the input tables unless you specify otherwise. A SET statement can contain multiple tables; a DS2 program can contain multiple SET statements.","help":"SET &lt;DS2GTF.IN&gt;&lt;SET FROM thread [ THREADS = threads ]&gt;&lt;SELECT&gt; ...","arguments":[{"name":"ALTER=","optional":true,"description":"Syntax Description: alter-password must be a valid SAS name. Details: The ALTER= option applies only to a SAS data set. You can use this option to assign a password or to access a read-protected, write-protected, or alter-protected file. When you replace a data set that is protected with an ALTER password, the new data set inherits the ALTER password. The password is blotted out when the code is written in the SAS log. For example: set a(alter=XXXXXXX);","help":"ALTER=*alter-password*","type":"value"},{"name":"AS","optional":true,"description":"Separates the new-name from the old-name.","type":"standalone"},{"name":"BUFNO=","optional":true,"description":"Syntax Description: n | nK specifies the number of buffers in multiples of 1 (bytes); 1,024 (kilobytes). For example, a value of 8 specifies 8 buffers, and a value of 1k specifies 1024 buffers. hex specifies the number of buffers as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the number of buffers to 45 buffers. MIN sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","help":"BUFNO=n | nK | hexX | MIN | MAX","type":"choice","arguments":[{"name":"n","description":"Specifies the number of buffers in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","description":"Specifies the number of buffers in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","description":"Specifies the number of buffers as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MIN","description":"Sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","type":"standalone"},{"name":"MAX","description":"Sets the number of buffers to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion.","type":"standalone"}]},{"name":"BUFSIZE=","optional":true,"description":"Syntax Description: n | nK | nM | nG specifies the page size in multiples of 1 (bytes); 1,024 (kilobytes); 1,048,576 (megabytes); or 1,073,741,824 (gigabytes). For example, a value of 8 specifies a page size of 8 bytes, and a value of 4k specifies a page size of 4096 bytes. hexX specifies the page size as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the page size to 45 bytes.","help":"BUFSIZE=n | nK | nM | nG | hexX | MAX","type":"choice","arguments":[{"name":"n","description":"Specifies the page size in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","description":"Specifies the page size in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"nM","description":"Specifies the page size in multiples of 1,048,576 (megabytes). Replace n with an integer value.","type":"standalone"},{"name":"nG","description":"Specifies the page size in multiples of 1,073,741,824 (gigabytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","description":"Specifies the page size as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MAX","description":"Sets the page size to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion bytes.","type":"standalone"}]},{"name":"BULKLOAD=","optional":true,"description":"Syntax Description: YES calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","help":"BULKLOAD=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","type":"standalone"},{"name":"NO","description":"Uses the dynamic SAS/ACCESS engine to insert or append data to a DBMS table.","type":"standalone"}]},{"name":"COMPRESS=","optional":true,"description":"Syntax Description: NO specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records). YES | CHAR specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. Alias: ON Tip: Use this compression algorithm for character data. Note: COMPRESS=CHAR is accepted by Version 7 and later versions. BINARY specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","help":"COMPRESS=NO | YES | CHAR | BINARY","type":"choice","arguments":[{"name":"NO","description":"Specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records).","type":"standalone"},{"name":"YES","aliases":["ON"],"description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations.","type":"standalone"},{"name":"CHAR","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. COMPRESS=CHAR is accepted by Version 7 and later versions.","type":"standalone"},{"name":"BINARY","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","type":"standalone"}]},{"name":"DBKEY=","optional":true,"description":"Syntax Description: column used by SAS to build an internal WHERE clause to search for matches in the DBMS table based on the key column. For example:","type":"value"},{"name":"DBNULL=","optional":true,"description":"Syntax Description: _ALL_ specifies that the YES or NO applies to all columns in the table. (This is valid in the interfaces to Informix, Oracle, Sybase, and Teradata only.) YES specifies that the NULL value is valid for the specified columns in the DBMS table. NO specifies that the NULL value is not valid for the specified columns in the DBMS table. column specifies the name of a column. Details: This option is valid only for creating DBMS tables. If you specify more than one column name, the names must be separated with spaces.","help":"DBNULL=_ALL_","type":"choice","arguments":[{"name":"_ALL_","type":"standalone"}]},{"name":"DROP=","optional":true,"description":"Arguments: column-list specifies the names of the columns to omit from the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The DROP= table option specifies that all columns in the column-list should not be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the drop attribute is specified, all columns not included in the drop statement will be used to create columns in the output rows.","type":"value"},{"name":"DS2GTF.IN","optional":true,"description":"The input data set.","type":"standalone"},{"name":"DS2GTF.OUT","optional":true,"description":"The output data set.","type":"standalone"},{"name":"ENCRYPT=","optional":true,"description":"Syntax Description: YES encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set. NO does not encrypt the file.","help":"ENCRYPT=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set.","type":"standalone"},{"name":"NO","description":"Does not encrypt the file.","type":"standalone"}]},{"name":"FROM","optional":true,"description":"Runs a DS2 program as one or more threads.","type":"standalone"},{"name":"KEEP=","optional":true,"description":"Arguments: column-list specifies the names of the columns to keep in the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The KEEP= table option specifies that all columns in the column-list should be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the keep attribute is specified, all columns not included in the KEEP statement will be dropped from the output rows.","type":"value"},{"name":"LABEL=","optional":true,"description":"Syntax Description:","help":"LABEL='*label*'","type":"value"},{"name":"LOCKTABLE=","optional":true,"description":"Syntax Description: SHARE locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data. EXCLUSIVE locks a table exclusively, preventing other users from accessing any table that you open. Details: You can lock tables only if you are the owner or have been granted the necessary privilege.","help":"LOCKTABLE=SHARE | EXCLUSIVE","type":"choice","arguments":[{"name":"SHARE","description":"Locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data.","type":"standalone"},{"name":"EXCLUSIVE","description":"Locks a table exclusively, preventing other users from accessing any table that you open.","type":"standalone"}]},{"name":"OVERWRITE=","optional":true,"description":"Arguments: YES | NO specifies whether the output table is deleted before a replacement output table is created or whether a package or thread is dropped. Default: NO","help":"OVERWRITE=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Specifies that the output table is deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"},{"name":"NO","description":"Specifies that the output table is not deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"}]},{"name":"PW=","optional":true,"description":"Syntax Description: password must be a valid SAS name. Details: The PW= option applies to all types of SAS files. You can use this option to assign a password to a SAS file or to access a password-protected SAS file. When replacing a SAS data set that is protected by an ALTER password, the new data set inherits the ALTER password. When the code is written to the SAS log the password is blotted out, for example: drop thread job2 (pw=xxxxxxx);","help":"PW=*password*","type":"value"},{"name":"READ=","optional":true,"description":"Syntax Description: read-password must be a valid SAS name. Details: The READ= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a read-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: declare package sales (read=XXXXXXX);","help":"READ=*read-password*","type":"value"},{"name":"RENAME=","optional":true,"description":"Arguments: old-name the column you want to rename. new-name the new name of the column. It must be a valid name for the data source. Details: The RENAME= table option allows you to change the names of one or more columns. If you use RENAME= when you create a table, the new column name is included in the output table. If you use RENAME= on an input table, the new name is used in DS2 programming statements. If you use RENAME= in the same DS2 program with either the DROP= or the KEEP= table option, the DROP= and the KEEP= table options are applied before RENAME=. You must use the old name in the DROP= and KEEP= table options. You cannot drop and rename the same column in the same statement.","help":"RENAME=AS","type":"choice","arguments":[{"name":"AS","type":"standalone"}]},{"name":"SELECT=","optional":true,"description":"","help":"SELECT=FROM | WHERE | AS | WHERE | NATURAL JOIN | INNER JOIN | OUTER JOIN | CROSS JOIN | LEFT JOIN | RIGHT JOIN | UNION JOIN | FULL JOIN | UNION | INTO | SELECT | HAVING | ALL | INSERT | CREATE | ORDER BY | GROUP BY","type":"choice","arguments":[{"name":"FROM","type":"standalone"},{"name":"WHERE","type":"standalone"},{"name":"AS","type":"standalone"},{"name":"WHERE","type":"standalone"},{"name":"NATURAL","type":"standalone"},{"name":"INNER","type":"standalone"},{"name":"OUTER","type":"standalone"},{"name":"CROSS","type":"standalone"},{"name":"LEFT","type":"standalone"},{"name":"RIGHT","type":"standalone"},{"name":"UNION","type":"standalone"},{"name":"FULL","type":"standalone"},{"name":"UNION","type":"standalone"},{"name":"INTO","type":"standalone"},{"name":"SELECT","type":"standalone"},{"name":"HAVING","type":"standalone"},{"name":"ALL","type":"standalone"},{"name":"INSERT","type":"standalone"},{"name":"CREATE","type":"standalone"},{"name":"ORDER","type":"standalone"},{"name":"GROUP","type":"standalone"}]},{"name":"TYPE=","optional":true,"description":"Syntax Description: data-set-type specifies the special type of the data set. Details: Use the TYPE= table option to create a special SAS data set in the proper format, or to identify the special type of the SAS data set in a procedure statement.","help":"TYPE=*data-set-type*","type":"dataSet"},{"name":"WRITE=","optional":true,"description":"Syntax Description: write-password must be a valid SAS name. Details: The WRITE= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a write-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: drop thread job2a (write=XXXXXXX);","help":"WRITE=*write-password*","type":"value"}]},{"name":"SET FROM","description":"The SET FROM statement enables a DS2 program to run as a single thread or as multiple threads. The thread name specified in a SET FROM statement references a DS2 program thread that has been created by a THREAD statement. Note: The SET FROM statement is best used in the RUN method to take advantage of the RUN method's implicit looping capability.","help":"SET FROM &lt;THREADS= threads&gt;","arguments":[{"name":"THREADS=","optional":true,"description":"Specifies the number of threads that are run for thread.","type":"value"}]},{"name":"STOP","description":"Stops execution of the current DS2 program. The STOP statement causes processing of the current DS2 program to stop immediately and resume processing statements after the end of the current DS2 program.","help":"STOP"},{"name":"THREAD","description":"Creates a DS2 program thread. thread specifies the thread name. thread can be one of these forms. catalog.schema.thread schema.thread catalog.thread thread catalog is an implementation of the ANSI SQL standard for an SQL catalog, which is a data container object that groups logically related schemas. schema is an implementation of the ANSI SQL standard for an SQL schema, which is a data container object that groups files such as tables and views and other objects supported by a data source such as stored procedures. thread is the name of the thread. Requirement: Thread naming conventions are based on the data source.","help":"THREAD &lt;ALTER=alter-password&gt;&lt;BUFNO=&lt;n | nK | hexX&gt;... &gt;&lt;SAS_ENCRYPT=&lt;YES | NO&gt;&gt; ...","arguments":[{"name":"ALTER=","optional":true,"followsDelimiter":"/","description":"Syntax Description: alter-password must be a valid SAS name. Details: The ALTER= option applies only to a SAS data set. You can use this option to assign a password or to access a read-protected, write-protected, or alter-protected file. When you replace a data set that is protected with an ALTER password, the new data set inherits the ALTER password. The password is blotted out when the code is written in the SAS log. For example: set a(alter=XXXXXXX);","help":"ALTER=*alter-password*","type":"value"},{"name":"AS","optional":true,"followsDelimiter":"/","description":"Separates the new-name from the old-name.","type":"standalone"},{"name":"BUFNO=","optional":true,"followsDelimiter":"/","description":"Syntax Description: n | nK specifies the number of buffers in multiples of 1 (bytes); 1,024 (kilobytes). For example, a value of 8 specifies 8 buffers, and a value of 1k specifies 1024 buffers. hex specifies the number of buffers as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the number of buffers to 45 buffers. MIN sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","help":"BUFNO=n | nK | hexX | MIN | MAX","type":"choice","arguments":[{"name":"n","followsDelimiter":"/","description":"Specifies the number of buffers in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","followsDelimiter":"/","description":"Specifies the number of buffers in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","followsDelimiter":"/","description":"Specifies the number of buffers as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MIN","followsDelimiter":"/","description":"Sets the minimum number of buffers to 0, which causes SAS to use the minimum optimal value for the operating environment. This is the default.","type":"standalone"},{"name":"MAX","followsDelimiter":"/","description":"Sets the number of buffers to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion.","type":"standalone"}]},{"name":"BUFSIZE=","optional":true,"followsDelimiter":"/","description":"Syntax Description: n | nK | nM | nG specifies the page size in multiples of 1 (bytes); 1,024 (kilobytes); 1,048,576 (megabytes); or 1,073,741,824 (gigabytes). For example, a value of 8 specifies a page size of 8 bytes, and a value of 4k specifies a page size of 4096 bytes. hexX specifies the page size as a hexadecimal value. You must specify the value beginning with a number (0-9), followed by an X. For example, the value 2dx sets the page size to 45 bytes.","help":"BUFSIZE=n | nK | nM | nG | hexX | MAX","type":"choice","arguments":[{"name":"n","followsDelimiter":"/","description":"Specifies the page size in multiples of 1 (bytes). Replace n with an integer value.","type":"standalone"},{"name":"nK","followsDelimiter":"/","description":"Specifies the page size in multiples of 1,024 (kilobytes). Replace n with an integer value.","type":"standalone"},{"name":"nM","followsDelimiter":"/","description":"Specifies the page size in multiples of 1,048,576 (megabytes). Replace n with an integer value.","type":"standalone"},{"name":"nG","followsDelimiter":"/","description":"Specifies the page size in multiples of 1,073,741,824 (gigabytes). Replace n with an integer value.","type":"standalone"},{"name":"hexX","followsDelimiter":"/","description":"Specifies the page size as a hexadecimal value. Replace hex with an actual hexadecimal value.","type":"standalone"},{"name":"MAX","followsDelimiter":"/","description":"Sets the page size to the maximum possible number in your operating environment, up to the largest four-byte, signed integer, which is 2³¹-1, or approximately 2 billion bytes.","type":"standalone"}]},{"name":"BULKLOAD=","optional":true,"followsDelimiter":"/","description":"Syntax Description: YES calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","help":"BULKLOAD=YES | NO","type":"choice","arguments":[{"name":"YES","followsDelimiter":"/","description":"Calls a DBMS-specific bulk load facility in order to insert or append rows to a DBMS table.","type":"standalone"},{"name":"NO","followsDelimiter":"/","description":"Uses the dynamic SAS/ACCESS engine to insert or append data to a DBMS table.","type":"standalone"}]},{"name":"COMPRESS=","optional":true,"followsDelimiter":"/","description":"Syntax Description: NO specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records). YES | CHAR specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. Alias: ON Tip: Use this compression algorithm for character data. Note: COMPRESS=CHAR is accepted by Version 7 and later versions. BINARY specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","help":"COMPRESS=NO | YES | CHAR | BINARY","type":"choice","arguments":[{"name":"NO","followsDelimiter":"/","description":"Specifies that the observations in a newly created SAS data set are uncompressed (fixed-length records).","type":"standalone"},{"name":"YES","followsDelimiter":"/","aliases":["ON"],"description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations.","type":"standalone"},{"name":"CHAR","followsDelimiter":"/","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RLE (Run Length Encoding). RLE compresses observations by reducing repeated consecutive characters (including blanks) to two-byte or three-byte representations. COMPRESS=CHAR is accepted by Version 7 and later versions.","type":"standalone"},{"name":"BINARY","followsDelimiter":"/","description":"Specifies that the observations in a newly created SAS data set are compressed (variable-length records) by SAS using RDC (Ross Data Compression). RDC combines run-length encoding and sliding-window compression to compress the file.","type":"standalone"}]},{"name":"DBKEY=","optional":true,"followsDelimiter":"/","description":"Syntax Description: column used by SAS to build an internal WHERE clause to search for matches in the DBMS table based on the key column. For example:","type":"value"},{"name":"DBNULL=","optional":true,"followsDelimiter":"/","description":"Syntax Description: _ALL_ specifies that the YES or NO applies to all columns in the table. (This is valid in the interfaces to Informix, Oracle, Sybase, and Teradata only.) YES specifies that the NULL value is valid for the specified columns in the DBMS table. NO specifies that the NULL value is not valid for the specified columns in the DBMS table. column specifies the name of a column. Details: This option is valid only for creating DBMS tables. If you specify more than one column name, the names must be separated with spaces.","help":"DBNULL=_ALL_","type":"choice","arguments":[{"name":"_ALL_","type":"standalone"}]},{"name":"DROP=","optional":true,"followsDelimiter":"/","description":"Arguments: column-list specifies the names of the columns to omit from the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The DROP= table option specifies that all columns in the column-list should not be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the drop attribute is specified, all columns not included in the drop statement will be used to create columns in the output rows.","type":"value"},{"name":"ENCRYPT=","optional":true,"followsDelimiter":"/","description":"Syntax Description: YES encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set. NO does not encrypt the file.","help":"ENCRYPT=YES | NO","type":"choice","arguments":[{"name":"YES","followsDelimiter":"/","description":"Encrypts the file. The encryption method uses passwords. At a minimum, you must specify the READ= or the PW= table option at the same time that you specify ENCRYPT=YES. Because the encryption method uses passwords, you cannot change any password on an encrypted data set without re-creating the data set.","type":"standalone"},{"name":"NO","followsDelimiter":"/","description":"Does not encrypt the file.","type":"standalone"}]},{"name":"KEEP=","optional":true,"followsDelimiter":"/","description":"Arguments: column-list specifies the names of the columns to keep in the output table. Restriction: Numbered range lists in the format col1-col5 and name prefix lists in the format col: are not supported. Details: The KEEP= table option specifies that all columns in the column-list should be included in the creation of output rows. Normally, all columns in the program data vector are included in the output rows. If the keep attribute is specified, all columns not included in the KEEP statement will be dropped from the output rows.","type":"value"},{"name":"LABEL=","optional":true,"followsDelimiter":"/","description":"Syntax Description:","help":"LABEL='*label*'","type":"value"},{"name":"LOCKTABLE=","optional":true,"followsDelimiter":"/","description":"Syntax Description: SHARE locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data. EXCLUSIVE locks a table exclusively, preventing other users from accessing any table that you open. Details: You can lock tables only if you are the owner or have been granted the necessary privilege.","help":"LOCKTABLE=SHARE | EXCLUSIVE","type":"choice","arguments":[{"name":"SHARE","followsDelimiter":"/","description":"Locks a table in shared mode, allowing other users or processes to read data from the tables, but preventing users from updating data.","type":"standalone"},{"name":"EXCLUSIVE","followsDelimiter":"/","description":"Locks a table exclusively, preventing other users from accessing any table that you open.","type":"standalone"}]},{"name":"OVERWRITE=","optional":true,"followsDelimiter":"/","description":"Arguments: YES | NO specifies whether the output table is deleted before a replacement output table is created or whether a package or thread is dropped. Default: NO","help":"OVERWRITE=YES | NO","type":"choice","arguments":[{"name":"YES","followsDelimiter":"/","description":"Specifies that the output table is deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"},{"name":"NO","followsDelimiter":"/","description":"Specifies that the output table is not deleted before a replacement output table is created or a package or thread is dropped.","type":"standalone"}]},{"name":"PW=","optional":true,"followsDelimiter":"/","description":"Syntax Description: password must be a valid SAS name. Details: The PW= option applies to all types of SAS files. You can use this option to assign a password to a SAS file or to access a password-protected SAS file. When replacing a SAS data set that is protected by an ALTER password, the new data set inherits the ALTER password. When the code is written to the SAS log the password is blotted out, for example: drop thread job2 (pw=xxxxxxx);","help":"PW=*password*","type":"value"},{"name":"READ=","optional":true,"followsDelimiter":"/","description":"Syntax Description: read-password must be a valid SAS name. Details: The READ= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a read-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: declare package sales (read=XXXXXXX);","help":"READ=*read-password*","type":"value"},{"name":"RENAME=","optional":true,"followsDelimiter":"/","description":"Arguments: old-name the column you want to rename. new-name the new name of the column. It must be a valid name for the data source. Details: The RENAME= table option allows you to change the names of one or more columns. If you use RENAME= when you create a table, the new column name is included in the output table. If you use RENAME= on an input table, the new name is used in DS2 programming statements. If you use RENAME= in the same DS2 program with either the DROP= or the KEEP= table option, the DROP= and the KEEP= table options are applied before RENAME=. You must use the old name in the DROP= and KEEP= table options. You cannot drop and rename the same column in the same statement.","help":"RENAME=AS","type":"choice","arguments":[{"name":"AS","type":"standalone"}]},{"name":"SAS_ENCRYPT=","optional":true,"followsDelimiter":"/","description":"Specifies the encryption algorithm.","help":"SAS_ENCRYPT=YES | NO","type":"choice","arguments":[{"name":"YES","followsDelimiter":"/","description":"Specifies the SAS Proprietary algorithm.","type":"standalone"},{"name":"NO","followsDelimiter":"/","description":"Specifies the Advanced Encryption Standard (AES) algorithm.","type":"standalone"}]},{"name":"TYPE=","optional":true,"followsDelimiter":"/","description":"Syntax Description: data-set-type specifies the special type of the data set. Details: Use the TYPE= table option to create a special SAS data set in the proper format, or to identify the special type of the SAS data set in a procedure statement.","help":"TYPE=*data-set-type*","type":"dataSet"},{"name":"WRITE=","optional":true,"followsDelimiter":"/","description":"Syntax Description: write-password must be a valid SAS name. Details: The WRITE= option applies to all types of SAS files except catalogs. You can use this option to assign a password to a SAS file or to access a write-protected SAS file. When the code is written to the SAS log, the password is blotted out, for example: drop thread job2a (write=XXXXXXX);","help":"WRITE=*write-password*","type":"value"}]},{"name":"WHEN","description":"SELECT groups contain WHEN statements that identify DS2 statements that are executed when a particular condition is true. Use at least one WHEN statement in a SELECT group.","help":"WHEN ( when-expression ) [ statement-list "}],"supportSiteInformation":{"docsetId":"prochp","docsetVersion":"v_001","docsetTargetFile":"prochp_hpds2_toc.htm"}}