{"name":"HPFOREST","statements":[{"name":"PROC HPFOREST","description":"The HPFOREST procedure is a high-performance procedure that creates a predictive model called a forest that consists of several decision trees. A predictive model defines a relationship between input variables and a target variable. The purpose of a predictive model is to predict a target value from inputs. The HPFOREST procedure trains the model; that is, it creates the model, using training data in which the target values are known. The model can then be applied to observations in which the target is unknown. If the predictions fit the new data well, the model is said to generalize well. Good generalization is the primary goal for predictive tasks. A predictive model might fit the training data well but generalize poorly. â€  A decision tree is a type of predictive model that has been developed independently in the statistics and artificial intelligence communities. The HPFOREST procedure creates a tree recursively. An input variable is chosen and used to create a rule to split the data into two segments. The process is then repeated in each segment, and then again in each new segment, and so on until some constraint is met. In the terminology of the tree metaphor, the segments are nodes, the original data set is the root node, and the final unpartitioned segments are leaves or terminal nodes. A node is an internal node if it is not a leaf. The data in a leaf determine the estimates of the value of the target variable. These estimates are subsequently applied to predict the target of a new observation assigned to the leaf.","help":"PROC HPFOREST <MINUSEINSEARCH=n> <ALPHA=number> <BALANCE=YES | NO> <CATBINS=k> DATA= <libref.>SAS-data-set <EXHAUSTIVE=number> <GRIDCLASSSIZE=n> <GRIDCOPY=ALL | MINIMAL | NONE... > <INBAGFRACTION=f> <INBAGN=n> <INTERVALBINS=k> <LEAFFRACTION=f> <LEAFSIZE=n> <MAXDEPTH=d> <MAXTREES=n> <MINCATSIZE=n> <MISSING=USEINSEARCH | DISTRIBUTE> <NODESIZE=n | ALL> <PRESELECT=BINNEDSEARCH | LOH | HOTHORN> <PRUNEFRACTION=g> <PRUNETHRESHOLD=t> <SCOREPROLE=DEFAULT | INBAG | OOB... > <SEED=n> <SKIP_SEQ_ROWS=n> <SPLITSIZE=n> <VARS_TO_TRY=m | ALL>;     \n\tFREQ variable ; \n   \n\tID variables;     \n\tINPUT <LEVEL=<BINARY | NOMINAL | ORDINAL>... > <ORDER=<ASCENDING | ASCFORMATTED | DESCENDING>... > ; \n   \n\tPARTITION <ROLEVAR=variable <TRAIN='value'> <VALIDATE='value'> > <TRAIN=value> <VALIDATE=value> ...; \n   \n\tPERFORMANCE <BPC=n> <COMMIT=n> <CPUCOUNT=<ACTUAL | <num>>> ...; \n   \n\tSAVE <FILE=filename> ; \n   \n\tSCORE <MAXDEPTH=<n>> <NTREES=<n>> OUT=libref.SAS-data-set ...;     \n\tTARGET <LEVEL=<BINARY | NOMINAL | INTERVAL>> ; \n   \n\tTREATMENT <ORDER=<ASCENDING | ASCFORMATTED | DESCENDING>... > ; ","arguments":[{"name":"DATA=","description":"Names the SAS data set to be used by PROC HPFOREST for training the model. The default is the most recently created data set.","type":"value"},{"name":"MINUSEINSEARCH=","optional":true,"description":"Specifies a threshold for utilizing missing values in the split search when MISSING=USEINSEARCH is specified as the missing value policy. If the number of observations in which the splitting variable has missing values in a node is greater than or equal to n, then PROC HPFOREST initiates the USEINSEARCH policy for missing values.","help":" MINUSEINSEARCH=","type":"value"},{"name":"ALPHA=","optional":true,"description":"Specifies a threshold p-value for the significance level of a test of association of a candidate variable with the target. If no association meets this threshold, the node is not split. The default value is 0.05.","help":"ALPHA=*number*","type":"value"},{"name":"BALANCE=","optional":true,"description":"Specifies whether to modify the splitting criterion for a nominal target so that the number of observations in each target class are effectively equal. A weight is applied to the count of observations in a class. The weight is different in different nodes.","help":"BALANCE=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Modifies the splitting criterion so that the number of observations in each target class are effectively equal.","type":"standalone"},{"name":"NO","description":"Does not modify the splitting criterion.","type":"standalone"}]},{"name":"CATBINS=","optional":true,"description":"Specifies the maximum number of categories of a nominal candidate variable to use in the association test. k refers only to the categories that are present in the training data in the node and that satisfy the MINCATSIZE= option. The categories are counted independently in each node. If more than k","help":"CATBINS=*k*","type":"value"},{"name":"EXHAUSTIVE=","optional":true,"description":"Specifies the maximum number of splits to examine in a complete enumeration of all possible splits when the input variable is nominal and the target has more than two nominal categories. The exhaustive method of searching for a split examines all possible splits. If the number of possible splits is greater than number, then a heuristic search is done instead of an exhaustive search. The default value of number is 5,000.","help":"EXHAUSTIVE=*number*","type":"value"},{"name":"GRIDCLASSSIZE=","optional":true,"description":"Specifies the minimum number of observations of any value of a binary or nominal target to exist on a grid node when GRIDCOPY=MINIMAL is specified.","help":"GRIDCLASSSIZE=*n*","type":"value"},{"name":"GRIDCOPY=","optional":true,"description":"Specifies how many observations to copy between grid nodes when PROC HPFOREST runs in distributed mode.","help":"GRIDCOPY=ALL | MINIMAL | NONE | TRAINING","type":"choice","arguments":[{"name":"ALL","description":"Copies all training and validation data.","type":"standalone"},{"name":"MINIMAL","description":"Copies enough training data to achieve a minimum on each node.","type":"standalone"},{"name":"NONE","description":"Does not copy any observations.","type":"standalone"},{"name":"TRAINING","description":"Copies all training data.","type":"standalone"}]},{"name":"INBAGFRACTION=","optional":true,"description":"Specifies the fraction of training observations to train a tree with, where f can be any number greater than 0 and at most 1. Using less than all the available data often improves the generalization error. A different in-bag sample is taken for each tree. The default value of f is 0.6.","help":"INBAGFRACTION=*f*","type":"value"},{"name":"INBAGN=","optional":true,"description":"Specifies how many observations to use to train each tree. The observations are counted without regard to the variable specified in the FREQ statement. Using less than all the available data often improves the generalization error. A different in-bag sample is taken for each tree. n can be any positive integer. If n is greater than the number of observations in the data set specified in the DATA= option, then all the available data are used. n must be at least 3 and large enough to accommodate the values of the LEAFSIZE=, LEAFFRACTION=, and SPLITSIZE options. The default value is 0.6 times the number of available observations in DATA= data set.","help":"INBAGN=*n*","type":"value"},{"name":"INTERVALBINS=","optional":true,"description":"Specifies the number of equally spaced bins into which variables are divided when the PRESELECT=BINNEDSEARCH algorithm is executed. The default value is 100.","help":"INTERVALBINS=*k*","type":"value"},{"name":"LEAFFRACTION=","optional":true,"description":"Specifies the smallest number of training observations that a new branch can have, expressed as the fraction of the number N of available observations in the DATA= data set. N might be less than the total number of observations in the data set because observations with a missing target value or nonpositive value of the variable specified in the FREQ statement are excluded from N. If you specify a number in the LEAFSIZE= option that implies a larger number than that specified in the LEAFFRACTION= option, f is ignored. The value f must be larger than 0 and less than 1. The default value is 0.001.","help":"LEAFFRACTION=*f*","type":"value"},{"name":"LEAFSIZE=","optional":true,"description":"Specifies the smallest number of training observations a new branch can have. If you specify a value for the LEAFFRACTION= option that implies a larger value than n, the LEAFSIZE= option is ignored. The default value is 5.","help":"LEAFSIZE=*n*","type":"value"},{"name":"MAXDEPTH=","optional":true,"description":"Specifies the maximum depth of a node in any tree that PROC HPFOREST creates. The depth of a node equals the number of splitting rules needed to define the node. The root node has depth 0. The children of the root have depth 1, and on. The smallest acceptable value of d is 1. The default value of d is 50.","help":"MAXDEPTH=*d*","type":"value"},{"name":"MAXTREES=","optional":true,"description":"Specifies the number of trees in the forest. n is a positive integer. The number of trees in the resulting forest can be less than n when the HPFOREST procedure fails to split the training data for a tree. Up to two times n trees are attempted. If the procedure fails to split the training data for more than n trees, then less than n trees are created. The ALPHA=, LEAFSIZE=, and MINCATSIZE= options constrain the split search to form trees that are more likely to predict well using new data. Setting all of these options to 1 generally frees the search algorithm to find a split and train a tree, although the tree might not help the forest predict well. The default value of n is 50.","help":"MAXTREES=*n*","type":"value"},{"name":"MINCATSIZE=","optional":true,"description":"Specifies the minimum number of observations that a given nominal input category must have in order to use the category in a split search. Categorical values that appear in fewer than n observations are handled as if they were missing. The categories that occur in fewer than n observations are merged into the pseudo category for missing values for the purpose of finding a split. The policy for assigning such observations to a branch is the same as the policy for assigning missing values to a branch. The default value of n is 5.","help":"MINCATSIZE=*n*","type":"value"},{"name":"MISSING=","optional":true,"description":"Specifies how the training procedure handles an observation with missing values. If MISSING= USEINSEARCH and the number of training observations in the node is more than n, where n is the value of the MINUSEINSEARCH= option, then the missing value is used as a separate, legitimate value in the test of association and the split search. If MISSING=DISTRIBUTE, observations with a missing value of the candidate variable are omitted from the test of association and split search in that node. A splitting rule distributes such an observation to all branches.","help":"MISSING=USEINSEARCH | DISTRIBUTE","type":"choice","arguments":[{"name":"USEINSEARCH","description":"If MISSING= USEINSEARCH and the number of training observations in the node is more than n, where n is the value of the MINUSEINSEARCH= option, then the missing value is used as a separate, legitimate value in the test of association and the split search.","type":"standalone"},{"name":"DISTRIBUTE","description":"If MISSING=DISTRIBUTE, observations with a missing value of the candidate variable are omitted from the test of association and split search in that node. A splitting rule distributes such an observation to all branches.","type":"standalone"}]},{"name":"NODESIZE=","optional":true,"description":"Specifies the number of training observations to use for association tests and split searches. NODESIZE=ALL requests to use all the observations. The acceptable range is from two to two billion on most machines. The default value of n is 100,000.","type":"value"},{"name":"PRESELECT=","optional":true,"description":"Specifies the method for selecting the variable to split with.","help":"PRESELECT=BINNEDSEARCH | LOH | HOTHORN","type":"choice","arguments":[{"name":"BINNEDSEARCH","description":"Selects the variable that produces the rule that has the largest worth.","type":"standalone"},{"name":"LOH","description":"selects the variable that has the smallest p-value of a chi-square test of association in a contingency table.","type":"standalone"},{"name":"HOTHORN","description":"selects the variable that produces the rule that has the highest association with the target.","type":"standalone"}]},{"name":"PRUNEFRACTION=","optional":true,"description":"Specifies the fraction of training observations that are available for pruning a split. The value of g can be any number from 0 and to 1, although a number close to 1 would leave little to grow the tree. The default value of g is 0; the default action is to not prune.","help":"PRUNEFRACTION=*g*","type":"value"},{"name":"PRUNETHRESHOLD=","optional":true,"description":"Specifies the lower limit of allowable shrinkage when the distance of the child node from the parent is measured by the pruning data instead of the in-bag data. The value of t must be between 0 and 1. The default value of t is 0.1.","help":"PRUNETHRESHOLD=*t*","type":"value"},{"name":"SCOREPROLE=","optional":true,"description":"Specifies which observations are used for the prediction of a new observation in the SCORE statement.","help":"SCOREPROLE=DEFAULT | INBAG | OOB | VALID","type":"choice","arguments":[{"name":"DEFAULT","description":"Selects the default value as if the option was not specified.","type":"standalone"},{"name":"INBAG","description":"Outputs predictions that are based on in-bag observations.","type":"standalone"},{"name":"OOB","description":"Outputs predictions that are based on out-of-bag observations.","type":"standalone"},{"name":"VALID","description":"Outputs predictions that are based on validation observations.","type":"standalone"}]},{"name":"SEED=","optional":true,"description":"Specifies the seed for generating random numbers. The HPFOREST procedure uses random numbers to select training observations for each tree and to select candidate variables in each node to split on. n is a nonnegative integer. Set n to 0 to use the internal default. The default value of the seed is 8,976,153.","help":"SEED=*n*","type":"value"},{"name":"SKIP_SEQ_ROWS=","optional":true,"description":"Specifies the number of rows to skip in the \"Fit Statistics\" table in distributed mode. After every n trees that are trained on a grid node, the fit statistics on the node are updated, consolidated with statistics from other nodes, and eventually output in the \"Fit Statistics\" table.","help":"SKIP_SEQ_ROWS=*n*","type":"value"},{"name":"SPLITSIZE=","optional":true,"description":"Specifies the requisite number of training observations a node must have for the HPFOREST procedure to consider splitting it. By default, n is twice the value of the LEAFSIZE= option (or n is the value implied by LEAFFRACTION= option if the procedure ignores the LEAFSIZE= option). The procedure counts the number of observations in a node without adjusting the number with the values of the variable specified in the FREQ statement when it interprets the value specified in the LEAFFRACTION=, LEAFSIZE=, MINCATSIZE=, and SPLITSIZE= options.","help":"SPLITSIZE=*n*","type":"value"},{"name":"VARS_TO_TRY=","optional":true,"description":"Syntax: VARS_TO_TRY=m | ALL specifies the number of input variables to consider splitting on in a node. m ranges from 1 to the number of input variables, v. The default value of m is square root of v. Specify VARS_TO_TRY=ALL to use all the inputs as candidates in a node.","type":"value"}]},{"name":"FREQ","description":"The variable in the FREQ statement identifies a numeric variable in the data set that contains the frequency of occurrence for each observation. SAS High-Performance Analytics procedures that support the FREQ statement treat each observation as if it appeared f times, where f is the value of the FREQ variable for the observation. If the frequency value is not an integer, it is truncated to an integer. If the frequency value is less than 1 or missing, the observation is not used in the analysis. When the FREQ statement is not specified, each observation is assigned a frequency of 1.","help":"FREQ variable "},{"name":"ID","description":"The ID statement lists one or more variables from the input data set that are transferred to the output data set that is specified in the SCORE statement. By default, high-performance analytical procedures do not include all variables from the input data set in output data sets. The ID statement is optional.","help":"ID variables"},{"name":"INPUT","description":"The INPUT statement names input variables with common options. The INPUT statement can be repeated.","help":"INPUT &lt;LEVEL=&lt;BINARY | NOMINAL | ORDINAL&gt;... &gt; &lt;ORDER=&lt;ASCENDING | ASCFORMATTED | DESCENDING&gt;... &gt; ","arguments":[{"name":"LEVEL=","optional":true,"followsDelimiter":"/","description":"Specifies the level of measurement of the variables. Accepted values of level are: BINARY, NOMINAL, ORDINAL, and INTERVAL.","help":"LEVEL=BINARY | NOMINAL | ORDINAL | INTERVAL*level*","type":"value","arguments":[{"name":"BINARY","followsDelimiter":"/","description":"Binary level of measurement","type":"standalone"},{"name":"NOMINAL","followsDelimiter":"/","description":"Nominal level of measurement","type":"standalone"},{"name":"ORDINAL","followsDelimiter":"/","description":"Ordinal level of measurement","type":"standalone"},{"name":"INTERVAL","followsDelimiter":"/","description":"Interval level of measurement","type":"standalone"}]},{"name":"ORDER=","optional":true,"followsDelimiter":"/","description":"Specifies the sorting order of the values of an ordinal input variable.","help":"ORDER=ASCENDING | ASCFORMATTED | DESCENDING | DESFORMATTED | DSORDER*order*","type":"value","arguments":[{"name":"ASCENDING","followsDelimiter":"/","description":"Ascending order of unformatted values (default)","type":"standalone"},{"name":"ASCFORMATTED","followsDelimiter":"/","description":"Ascending order of formatted values","type":"standalone"},{"name":"DESCENDING","followsDelimiter":"/","description":"Descending order of unformatted values","type":"standalone"},{"name":"DESFORMATTED","followsDelimiter":"/","description":"Descending order of formatted values","type":"standalone"},{"name":"DSORDER","followsDelimiter":"/","description":"Order of appearance in the input data set","type":"standalone"}]}]},{"name":"PARTITION","description":"The PARTITION statement specifies how to divide the input data set into a training subset and a validation subset. Variable names the variable in the input data set whose values are used to assign roles to each observation.","help":"PARTITION &lt;ROLEVAR=variable &lt;TRAIN='value'&gt; &lt;VALIDATE='value'&gt; &gt; &lt;TRAIN=value&gt; &lt;VALIDATE=value&gt; ...","arguments":[{"name":"ROLEVAR=","optional":true,"description":"Names the variable in the input data table whose values are used to assign roles to each observation. This variable cannot also appear as an analysis variable in other statements or options. The TRAIN=, and VALIDATE= suboptions specify the formatted values of this variable that are used to assign observation roles. If you do not specify the TRAIN= suboption, then all observations whose role is not determined by the VALIDATE= suboption are assigned to the training role.","type":"value"},{"name":"TRAIN=","optional":true,"description":"Requests that an observation be assigned to training if it matches value.","help":"TRAIN=*value*","type":"value"},{"name":"VALIDATE=","optional":true,"description":"Requests that an observation be assigned to validation if it matches value.","help":"VALIDATE=*value*","type":"value"}]},{"name":"PERFORMANCE","description":"The PERFORMANCE statement defines performance parameters for multithreaded and distributed computing, passes variables about the distributed computing environment, and requests detailed results about the performance characteristics of the HPFOREST procedure. With the PERFORMANCE statement, you can also control whether the HPFOREST procedure executes in symmetric multiprocessing or massively parallel mode.","help":"PERFORMANCE &lt;BPC=n&gt; &lt;COMMIT=n&gt; &lt;CPUCOUNT=&lt;ACTUAL | &lt;num&gt;&gt;&gt; ...","arguments":[{"name":"BPC=","optional":true,"description":"Specifies the number of bytes per character that is used in processing character strings in multibyte encodings. The default is the bytes per character of the encoding.","help":"BPC=*n*","type":"value"},{"name":"COMMIT=","optional":true,"description":"Requests that the High-Performance Analytics procedure write periodic updates to the SAS Log when observations are sent from the client to the appliance for distributed processing.","help":"COMMIT=*n*","type":"value"},{"name":"CPUCOUNT=","optional":true,"description":"Specifies how many processors the procedure assumes are available on each host in the computing environment. num can be any integer from 1 to 256. CPUCOUNT=ACTUAL sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools. Setting CPUCOUNT= to a number greater than the actual number of available CPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system option.","help":"CPUCOUNT=ACTUAL | &lt;*num*&gt;","type":"choice","arguments":[{"name":"ACTUAL","description":"Sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","type":"standalone"},{"name":"num","placeholder":true,"description":"Replace <num> with an actual number. Setting CPUCOUNT= to a number greater than the actual number of available CPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system option.","type":"standaloneOrValue"}]},{"name":"DATASERVER=","optional":true,"description":"Specifies the name of the server on Teradata systems as defined through the hosts file and as used in the LIBNAME statement for Teradata. For example, if the hosts file defines myservercop1 33.44.55.66 as the server for Teradata, then a LIBNAME specification would be as follows: libname TDLib teradata server=myserver user= password= database= ; A PERFORMANCE statement to induce running alongside the Teradata server would specify the following:","type":"value"},{"name":"DETAILS","optional":true,"description":"Requests a table that shows a timing breakdown of the procedure steps.","type":"standalone"},{"name":"HOST=","optional":true,"aliases":["GRIDHOST="],"description":"Specifies the name of the appliance host in single or double quotes. If the HOST= option is specified, it overrides the value of the GRIDHOST environment variable.","type":"value"},{"name":"INSTALL=","optional":true,"aliases":["INSTALLLOC="],"description":"Specifies the directory in which the High-Performance Analytics shared libraries are installed on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC environment variable.","type":"value"},{"name":"LASRSERVER=","optional":true,"aliases":["LASR="],"description":"Specifies the fully qualified path to the description file of a SAS LASR Analytic Server instance. If the input data set is held in memory by this LASR Analytic Server instance, then the procedure runs alongside LASR.","type":"value"},{"name":"MODE=","optional":true,"aliases":["GRIDMODE="],"description":"Is a deprecated option that specifies whether to run the high-performance analytical procedure in symmetric (SYM) mode or asymmetric (ASYM) mode. This option overrides the GRIDMODE environment variable.","help":"MODE=SYM | ASYM","type":"choice","arguments":[{"name":"SYM","description":"Specifies to run the high-performance analytical procedure in symmetric (SYM) mode.","type":"standalone"},{"name":"ASYM","description":"Specifies to run the high-performance analytical procedure in asymmetric (ASYM) mode.","type":"standalone"}]},{"name":"NODES=","optional":true,"aliases":["NNODES="],"description":"Specifies the number of nodes in the distributed computing environment, provided that the data are not processed alongside the database. Specifying NODES=0 indicate thats you want to process the data in SMP mode on the client machine. If the input data are not alongside the database, this is the default. The High-Performance Analytics procedures then perform the analysis mutlithreaded on the client.","type":"value"},{"name":"NTHREADS=","optional":true,"aliases":["THREADS="],"description":"Specifies the number of threads for analytic computations and overrides the SAS system option THREADS | NOTHREADS. If you do not specify the NTHREADS= option, the number of threads are determined based on the number of CPUs on the host on which the analytic computations execute. The algorithm by which a CPU count is converted to a thread count is specific to the High- Performance Analytics procedure. Most procedures create one thread per CPU for the analytic computations. By default, High-Performance Analytics procedures execute in multiple concurrent threads unless turned off by the NOTHREADS system option or you force single-threaded execution with NTHREADS=1. The largest number that can be specified for n is 256. Individual High-Performance Analytics procedures can impose more stringent limits if called for by algorithmic considerations. You can affect the determination of the CPU count with the CPUCOUNT= option in the PERFORMANCE statement.","type":"value"},{"name":"TIMEOUT=","optional":true,"aliases":["GRIDTIMEOUT="],"description":"Specifies the time-out in seconds for a high-performance analytical procedure to wait for a connection to the appliance and establish a connection back to the client. The default is 120 seconds.","type":"value"}]},{"name":"SAVE","description":"The SAVE statement outputs the forest model information into a binary file.","help":"SAVE &lt;FILE=filename&gt; ","arguments":[{"name":"FILE=","optional":true,"description":"Names the file into which tree information is saved. The filename can be either a SAS file reference or the full path and member name of the binary file.","help":"FILE=*filename*","type":"value"}]},{"name":"SCORE","description":"The SCORE statement applies the forest model to the training data and outputs a data set that contains the ID variables that are specified in the ID statement in addition to predictions, residuals, and decisions.","help":"SCORE &lt;MAXDEPTH=&lt;n&gt;&gt; &lt;NTREES=&lt;n&gt;&gt; OUT=libref.SAS-data-set ...","arguments":[{"name":"OUT=","description":"Names the output data set to contain the scored data.","type":"value"},{"name":"MAXDEPTH=","optional":true,"description":"Produces predictions from trees that are pruned to a depth of n. The trees are not truncated by default.","type":"value"},{"name":"NTREES=","optional":true,"description":"Produces predictions from the first n trees only. If the option is omitted then PROC HPFOREST uses all the trees in the model for predictions. Scoring with fewer trees can sometimes increase the speed without significantly reducing the accuracy.","type":"value"}]},{"name":"TARGET","description":"The TARGET statement names the variable whose values PROC HPFOREST tries to predict.","help":"TARGET &lt;LEVEL=&lt;BINARY | NOMINAL | INTERVAL&gt;&gt; ","arguments":[{"name":"LEVEL=","optional":true,"followsDelimiter":"/","description":"Specifies the level of measurement of the variables. Accepted values of level are: BINARY, NOMINAL, and INTERVAL.","help":"LEVEL=BINARY | NOMINAL | INTERVAL*level*","type":"value","arguments":[{"name":"BINARY","followsDelimiter":"/","description":"Binary level of measurement","type":"standalone"},{"name":"NOMINAL","followsDelimiter":"/","description":"Nominal level of measurement","type":"standalone"},{"name":"INTERVAL","followsDelimiter":"/","description":"Interval level of measurement","type":"standalone"}]}]},{"name":"TREATMENT","description":"The TREATMENT statement names a binary treatment variable and estimates how much the prediction of an observation changes when the treatment changes. The analysis of differential treatment effects is sometimes called incremental response modeling (IRM).","help":"TREATMENT &lt;ORDER=&lt;ASCENDING | ASCFORMATTED | DESCENDING&gt;... &gt; ","arguments":[{"name":"ORDER=","optional":true,"description":"Specifies the sorting order of the treatment values.","help":"ORDER=ASCENDING | ASCFORMATTED | DESCENDING | DESFORMATTED | DSORDER*order*","type":"value","arguments":[{"name":"ASCENDING","description":"Ascending order of unformatted values (default)","type":"standalone"},{"name":"ASCFORMATTED","description":"Ascending order of formatted values","type":"standalone"},{"name":"DESCENDING","description":"Descending order of unformatted values","type":"standalone"},{"name":"DESFORMATTED","description":"Descending order of formatted values","type":"standalone"},{"name":"DSORDER","description":"Order of appearance in the input data set","type":"standalone"}]}]}],"supportSiteInformation":{"docsetId":"emhpprcref","docsetVersion":"v_003","docsetTargetFile":"emhpprcref_hpforest_toc.htm"}}