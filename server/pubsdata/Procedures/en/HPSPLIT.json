{"name":"HPSPLIT","statements":[{"name":"PROC HPSPLIT","description":"The HPSPLIT procedure is a high-performance procedure that builds tree-based statistical models for classification and regression. The procedure produces classification trees, which model a categorical response, and regression trees, which model a continuous response. Both types of trees are referred to as decision trees because the model is expressed as a series of if-then statements.","help":"PROC HPSPLIT <ASSIGNMISSING=BRANCH | POPULAR | SIMILAR... > <CVCC> <CVMETHOD=RANDOM | NONE> <CVMODELFIT> <DATA=< libref.>SAS-data-set> <INTERVALBINS=number> <LEVTHRESH1=number> <LEVTHRESH2=number> <MAXBRANCH=b> <MAXDEPTH=number> <MINCATSIZE=number> <LEAFSIZE=number> <MINVARIANCE=value> <NODES=DETAIL | SUMMARY> <NOPRINT> <NSURROGATES=number> <PLOTS=ALL | CVCC | PRUNEUNTIL... > <SEED=number> <SPLITONCE>;     \n\tCLASS <DESCENDING> <ORDER=<FORMATTED | INTERNAL>> <UPCASE> ...; \n   \n\tCODE <file=[filename | fileref> ; \n   \n\tCRITERION ENTROPY FASTCHAID GINI ...; \n   \n\tGROW <CHAID < (options) >> <CHISQUARE < (options) >> <ENTROPY (<options>) | GAIN < option >> ...;     \n\tID variables ;     \n\tMODEL <EVENT='category'> ; \n   \n\tOUTPUT OUT=SAS-data-set ;     \n\tPARTITION <FRACTION(VALIDATE=fraction) < SEED=number >> <ROLEVAR=variable(TRAIN='value', VALID='value')> ;     \n\tPERFORMANCE <COMMIT=n> <CPUCOUNT=<ACTUAL | <num>>> <DATASERVER=“name”> ...; \n   \n\tPRUNE <PRUNE by < / until operator value >> <C45 < / confidence >> <NONE> ...; \n   \n\tRULES file=[filename | fileref] ;  \n  \n\tSCORE <OUT=< libref.>SAS-data-set> ; \n   \n\tTARGET variable ; ","arguments":[{"name":"ASSIGNMISSING=","optional":true,"description":"Specifies how PROC HPSPLIT creates a default splitting rule to handle missing values, unknown levels, and levels that have fewer observations than you specify in the MINCATSIZE= option.","help":"ASSIGNMISSING=BRANCH | POPULAR | SIMILAR | NONE","type":"choice","arguments":[{"name":"BRANCH","description":"Specifies that PROC HPSPLIT create a special child (branch) for the default rule and assign to that child missing values, unknown levels, and levels that have fewer observations than you specify in the MINCATSIZE= option.","type":"standalone"},{"name":"POPULAR","description":"Specifies that missing values be assigned to the most popular (largest) child.","type":"standalone"},{"name":"SIMILAR","description":"Specifies that missing values be assigned to the child that they are most similar to (using the chi-square for categorical responses or F-test criterion for continuous responses).","type":"standalone"},{"name":"NONE","description":"Specifies that observations that have any missing variables be excluded from the analysis.","type":"standalone"}]},{"name":"CVCC","optional":true,"aliases":["CVCOSTCOMPLEXITY"],"description":"Requests a table of the results of cost-complexity pruning based on cross validation.","type":"standalone"},{"name":"CVMETHOD=","optional":true,"description":"Requests the cross validation method to be performed.","help":"CVMETHOD=RANDOM | NONE","type":"choice","arguments":[{"name":"RANDOM","description":"Assigns each training observation randomly to one of the k folds (with a probability of 1/k for any given fold) for cross validation. The default value of k is 10.","type":"standalone"},{"name":"NONE","description":"Suppresses cross validation.","type":"standalone"}]},{"name":"CVMODELFIT","optional":true,"description":"Requests model assessment with cross validation. When you specify this option, the procedure does a cross validation of the final model parameters and produces a table that describes the cross validation error measures of the parameters.","type":"standalone"},{"name":"DATA=","optional":true,"description":"Names the input SAS data set to be used by PROC HPSPLIT. The default is the most recently created data set.","type":"value"},{"name":"INTERVALBINS=","optional":true,"description":"Specifies the number of bins for continuous variables. PROC HPSPLIT bins continuous predictors to a fixed bin size.","help":"INTERVALBINS=*number*","type":"value"},{"name":"LEVTHRESH1=","optional":true,"description":"Applies only to categorical predictor variables and specifies the limit for the number of computations in an exhaustive search for the optimal partition of the levels of a particular variable.","help":"LEVTHRESH1=*number*","type":"value"},{"name":"LEVTHRESH2=","optional":true,"description":"Applies to categorical predictor variables and continuous predictor variables with multiway splits. This option does not apply to continuous predictor variables with binary splits.","help":"LEVTHRESH2=*number*","type":"value"},{"name":"MAXBRANCH=","optional":true,"description":"Specifies the maximum number of children per node in the tree. PROC HPSPLIT tries to create this number of children unless it is impossible (for example, if a split variable does not have enough levels). By default, MAXBRANCH=2.","help":"MAXBRANCH=*b*","type":"value"},{"name":"MAXDEPTH=","optional":true,"description":"The maximum depth of the tree to be grown.","help":"MAXDEPTH=*number*","type":"value"},{"name":"MINCATSIZE=","optional":true,"description":"If a nominal variable level has less than MINCATSIZE observations in the training set, it is added to the missing values for the respective split and not included in the splitting decision.","help":"MINCATSIZE=*number*","type":"value"},{"name":"MINLEAFSIZE=","optional":true,"description":"Specifies the minimum number of observations that each child of a split must contain in the training data set in order for the split to be considered.","type":"value"},{"name":"MINVARIANCE=","optional":true,"description":"Specifies the minimum variance for a regression tree leaf to be eligible for splitting. That is, leaves whose variance is less than value are not split any further.","help":"MINVARIANCE=*value*","type":"value"},{"name":"NODES=","optional":true,"description":"requests a table that contains the description of the paths from each leaf to the root.","help":"NODES=DETAIL | SUMMARY","type":"choice","arguments":[{"name":"DETAIL","description":"Assigns each training observation randomly to one of the k folds (with a probability of 1/k for any given fold) for cross validation. The default value of k is 10.","type":"standalone"},{"name":"SUMMARY","description":"Suppresses cross validation.","type":"standalone"}]},{"name":"NOPRINT","optional":true,"description":"Suppresses the generation of ODS output.","type":"standalone"},{"name":"NSURROGATES=","optional":true,"description":"Specifies the number of surrogate rules to create for each splitting rule. Surrogate rules are backup splitting rules that are used when the variable that corresponds to the primary splitting rule is missing. By default, NSURROGATES=0.","help":"NSURROGATES=*number*","type":"value"},{"name":"PLOTS=","optional":true,"description":"Controls the plots that are produced through ODS Graphics. When you specify only one plot-request, you can omit the parentheses around it.","help":"PLOTS=ALL | CVCC | PRUNEUNTIL | ROC | WHOLETREE | ZOOMEDTREE | NONE","type":"choice","arguments":[{"name":"ALL","description":"Produces all appropriate plots.","type":"standalone"},{"name":"CVCC","description":"Syntax: CVCC<(ASE)> Produces a plot that is used to determine the tuning parameter for cost-complexity pruning when cross validation is used. ASE suboption displays the ASE when the response variable is a classification variable.","type":"standalone"},{"name":"PRUNEUNTIL","description":"Produces a plot of the metric that is used to select the final subtree.","type":"standalone"},{"name":"ROC","description":"Produces the receiver operating characteristic (ROC) curve. This option is enabled by default.","type":"standalone"},{"name":"WHOLETREE","description":"Syntax: WHOLETREE <(whole-tree-options)> Produces a plot to visualize the entire finished (grown and pruned) tree. This option is enabled by default.","type":"standalone"},{"name":"ZOOMEDTREE","description":"Syntax: ZOOMEDTREE <(zoomed-tree-options)> Produces a plot to visualize a portion of the finished (grown and pruned) tree. This option is enabled by default.","type":"standalone"},{"name":"NONE","description":"Suppresses the default plots. Only plots that you specifically request are displayed.","type":"standalone"}]},{"name":"SEED=","optional":true,"description":"Specifies the initial seed for random number generation for cross validation. The value of number must be an integer. The default seed is based on the date and time.","help":"SEED=*number*","type":"value"},{"name":"SPLITONCE","optional":true,"description":"Specifies that variables be split only once on a branch. However, a variable can be used more than once across branches. That is, a variable cannot be split more than once on the path from any leaf to the root node.","type":"standalone"}]},{"name":"CLASS","description":"The CLASS statement names the classification variables to be used in the analysis. Typical class variables are Treatment, Sex, Race, Group, and Replication. If the CLASS statement is used, it must appear before the MODEL statement. Classification variables can be either character or numeric. Class levels are determined from the formatted values of the variables. Thus, you can use formats to group values into levels.","help":"CLASS &lt;DESCENDING&gt; &lt;ORDER=&lt;FORMATTED | INTERNAL&gt;&gt; &lt;UPCASE&gt; ...","arguments":[{"name":"DESCENDING","optional":true,"followsDelimiter":"/","aliases":["DESC"],"description":"Reverses the sort order of the classification variable. If you specify both the DESCENDING and ORDER= options, PROC ADAPTIVEREG orders the categories according to the ORDER= option and then reverses that order.","type":"standalone"},{"name":"ORDER=","optional":true,"followsDelimiter":"/","description":"Specifies the sort order for the levels of classification variables. By default, ORDER=FORMATTED except for numeric CLASS variables that have no specified format, for which ORDER=INTERNAL is the default.","help":"ORDER=FORMATTED | INTERNAL","type":"choice","arguments":[{"name":"FORMATTED","followsDelimiter":"/","description":"Orders values in ascending order of the formatted value.","type":"standalone"},{"name":"INTERNAL","followsDelimiter":"/","description":"Orders values in ascending order of the unformatted value.","type":"standalone"}]},{"name":"UPCASE","optional":true,"followsDelimiter":"/","description":"Uppercases the values of character-valued CLASS variables before levelizing them. For example, if the UPCASE option is in effect and a CLASS variable can take the values 'a', 'A', and 'b', then 'a' and 'A' represent the same level and the CLASS variable is treated as having only two values: 'A' and 'B'.","type":"standalone"}]},{"name":"CODE","description":"If the CODE statement is used, the final tree will be converted into SAS data step code which can be used for scoring. The code will be written to the file specified through the filename filename or fileref fileref. If a target is missing, the _WARN_ variable will be set to “M” for that record in the output SAS data step code. Otherwise, _WARN_ will be set to “ ”. If no CODE statement is used, no SAS data step code will be output.","help":"CODE &lt;file=[filename | fileref&gt; ","arguments":[{"name":"FILE=","optional":true,"description":"Names the external file or fileref that saves the generated code. When enclosed in a quoted string (for example, FILE=\"c:nmydirnscorecode.sas\"), this option specifies the path for writing the code to an external file. You can also specify unquoted SAS filenames of no more than eight characters for filename. If the filename is assigned as a fileref in a Base SAS FILENAME statement, the file specified in the FILENAME statement is opened. The special filerefs LOG and PRINT are always assigned. If the specified filename is not an assigned fileref, the specified value for filename is concatenated with a .txt extension before the file is opened. For example, if FOO is not an assigned fileref, FILE=FOO causes FOO.txt to be opened. If filename has more than eight characters, an error message is printed.","type":"value"}]},{"name":"CRITERION","description":"Specifies the criterion by which to grow the tree. FastCHAID uses a Kolmogorov-Smirnov splitter to determine splits for each variable, following a recursive method similar to (?) (after ordering nominal variables’ levels by EVENT level) and then uses the lowest of each variable’s resulting p-value to determine the variable on which to split. criterion is one of the following: • ENTROPY • GINI • FASTCHAID","help":"CRITERION ENTROPY FASTCHAID GINI ...","arguments":[{"name":"ENTROPY","description":"[criterion]","type":"standalone"},{"name":"FASTCHAID","description":"[criterion]","type":"standalone"},{"name":"GINI","description":"[criterion]","type":"standalone"},{"name":"BFTHRESH1=","optional":true,"followsDelimiter":"/","description":"Specifies the maximum number of computations to perform for an exhaustive search. If the input variable being examined is an interval variable, it will try to fall back to the fast algorithm. Otherwise, it will fall back to a greedy algorithm.","help":"BFTHRESH1=*number*","type":"value"},{"name":"LEVTHRESH2=","optional":true,"followsDelimiter":"/","description":"Specifies the maximum number of computations to perform for a greedy search. If the input variable being examined is an interval variable, it will fall back to the fast algorithm. Otherwise, it will fall back to a greedy algorithm. Although this is similar to LEVTHRESH1, it specifies the computations of the fallback algorithm for finding the best splits of a nominal variable, which is a much different computational complexity.","help":"LEVTHRESH2=*number*","type":"value"}]},{"name":"GROW","description":"The GROW statement specifies the criterion by which to split a parent node into child nodes. As it grows the tree, PROC FOREST calculates the specified criterion for each predictor variable and then splits on the predictor variable whose criterion is closest to the value specified for that criterion.","help":"GROW &lt;CHAID &lt; (options) &gt;&gt; &lt;CHISQUARE &lt; (options) &gt;&gt; &lt;ENTROPY (&lt;options&gt;) | GAIN &lt; option &gt;&gt; ...","arguments":[{"name":"CHAID=","optional":true,"description":"For categorical predictor variables, CHAID uses the value (as specified in the ALPHA= option) of a chi-square statistic (for a classification tree) or an F statistic (for a regression tree) to merge similar levels of the predictor variable until the number of children in the proposed split reaches the number that you specify in the MAXBRANCH= option. The p-values for the final split determine the variable on which to split. For continuous predictor variables, CHAID chooses the best single split until the number of children in the proposed split reaches the value that you specify in the MAXBRANCH= option.","help":"CHAID=ALPHA= | BONFERRONI","type":"choice","arguments":[{"name":"ALPHA=","type":"value"},{"name":"BONFERRONI","type":"standalone"}]},{"name":"CHISQUARE=","optional":true,"description":"Uses a chi-square statistic to split each variable and then uses the p-values that correspond to the resulting splits to determine the splitting variable.","help":"CHISQUARE=ALPHA= | BONFERRONI","type":"choice","arguments":[{"name":"ALPHA=","type":"value"},{"name":"BONFERRONI","type":"standalone"}]},{"name":"ENTROPY=","optional":true,"aliases":["GAIN"],"description":"Uses the gain in information (decrease in entropy) to split each variable and then to determine the split.","help":"ENTROPY=MINENTROPY= | MINGAIN=","type":"choice","arguments":[{"name":"MINENTROPY=","type":"value"},{"name":"MINGAIN=","type":"value"}]},{"name":"FASTCHAID=","optional":true,"description":"Uses a Kolmogorov-Smirnov splitter to determine splits for each variable. The FastCHAID criterion follows a recursive method similar to that of Friedman (1977) after ordering the levels according to the response variable. The criterion then selects the split variable as the variable that has the smallest p-value.","type":"value"},{"name":"FTEST=","optional":true,"description":"Uses an F statistic to split each variable and then uses the resulting p-value to determine the split variable.","help":"FTEST=ALPHA= | BONFERRONI","type":"choice","arguments":[{"name":"ALPHA=","type":"value"},{"name":"BONFERRONI","type":"standalone"}]},{"name":"GINI","optional":true,"description":"Uses the decrease in the Gini index to split each variable and then to determine the split.","type":"standalone"},{"name":"IGR","optional":true,"description":"Uses the entropy metric to split each variable and then uses the information gain ratio to determine the split.","type":"standalone"},{"name":"RSS","optional":true,"aliases":["VARIANCE"],"description":"Uses the change in response variance to split each variable and then to determine the split.","type":"standalone"}]},{"name":"ID","description":"The ID statement lists one or more variables from the predictor data set that are to be transferred to the output data set that you specify in the OUTPUT statement.","help":"ID variables "},{"name":"MODEL","description":"The MODEL statement causes PROC HPSPLIT to create a tree model by using response as the response variable and variable as a predictor. By default, variable is treated as a continuous predictor if it is a numeric variable, or as a categorical variable if the variable also appears in the CLASS statement.","help":"MODEL &lt;EVENT='category'&gt; ","arguments":[{"name":"EVENT=","optional":true,"description":"Specifies the event level for a binary categorical response variable. PROC HPSPLIT associates this level with the event of interest (sometimes referred to as the positive outcome) for the purpose of computing sensitivity, specificity, and area under the curve (AUC) and creating receiver operating characteristic (ROC) curves. You can specify the value (formatted if a format is applied) of the event category in quotation marks.","help":"EVENT='*category*'","type":"value"}]},{"name":"OUTPUT","description":"The OUTPUT statement creates a data set that contains one observation for each observation in the input data set.","help":"OUTPUT OUT=SAS-data-set ","arguments":[{"name":"OUT=","description":"The OUT= data set contains the following: o the response variable o any variables that you specify by using the ID statement o the observation’s assigned leaf number o the observation’s assigned node number","help":"OUT=*SAS-data-set*","type":"dataSet"}]},{"name":"PARTITION","description":"The PARTITION statement specifies how observations in the input data set are logically partitioned into disjoint subsets for model training, validation, and testing. Either you can designate a variable in the input data set and a set of formatted values of that variable to determine the role of each observation, or you can specify proportions to use for random assignment of observations for each role.","help":"PARTITION &lt;FRACTION(VALIDATE=fraction) &lt; SEED=number &gt;&gt; &lt;ROLEVAR=variable(TRAIN='value', VALID='value')&gt; ","arguments":[{"name":"FRACTION=","optional":true,"description":"requests that specified proportions of the observations in the input data set be randomly assigned training and validation roles. You specify the proportions for testing and validation by using the VALIDATE= sub-option. The SEED sub-option sets the seed. Because fraction is a per-observation probability, setting fraction too low can result in an empty or nearly-empty validation set!","help":"FRACTION=VALIDATE= | SEED=","type":"choice","arguments":[{"name":"VALIDATE=","type":"value"},{"name":"SEED=","type":"value"}]},{"name":"ROLEVAR=","optional":true,"description":"names the variable in the input data set whose values are used to assign roles to each observation. The formatted values of this variable that are used to assign observations roles are specified in the TRAIN=, and VALID= sub-options.","help":"ROLEVAR=TRAIN= | VALID=","type":"choice","arguments":[{"name":"TRAIN=","type":"value"},{"name":"VALID=","type":"value"}]}]},{"name":"PERFORMANCE","description":"The PERFORMANCE statement defines performance parameters for multithreaded and distributed computing, passes variables about the distributed computing environment, and requests detailed results about the performance characteristics of a High-Performance Analytics procedure. With the PERFORMANCE statement, you can also control whether the HPREG procedure executes in SMP or MPP mode.","help":"PERFORMANCE &lt;COMMIT=n&gt; &lt;CPUCOUNT=&lt;ACTUAL | &lt;num&gt;&gt;&gt; &lt;DATASERVER=“name”&gt; ...","arguments":[{"name":"COMMIT=","optional":true,"description":"Requests that the High-Performance Analytics procedure write periodic updates to the SAS Log when observations are sent from the client to the appliance for distributed processing.","help":"COMMIT=*n*","type":"value"},{"name":"CPUCOUNT=","optional":true,"description":"Specifies how many processors the procedure assumes are available on each host in the computing environment. num can be any integer from 1 to 256. CPUCOUNT=ACTUAL sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools. Setting CPUCOUNT= to a number greater than the actual number of available CPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system option.","help":"CPUCOUNT=ACTUAL | &lt;*num*&gt;","type":"choice","arguments":[{"name":"ACTUAL","description":"Sets CPUCOUNT to the number of physical processors available. This number can be less than the physical number of CPUs if the SAS process has been restricted by system administration tools.","type":"standalone"},{"name":"num","placeholder":true,"description":"Replace <num> with an actual number. Setting CPUCOUNT= to a number greater than the actual number of available CPUs might result in reduced performance. This option overrides the CPUCOUNT= SAS system option.","type":"standaloneOrValue"}]},{"name":"DATASERVER=","optional":true,"description":"Specifies the name of the server on Teradata systems as defined through the hosts file and as used in the LIBNAME statement for Teradata. For example, if the hosts file defines myservercop1 33.44.55.66 as the server for Teradata, then a LIBNAME specification would be as follows: libname TDLib teradata server=myserver user= password= database= ; A PERFORMANCE statement to induce running alongside the Teradata server would specify the following:","type":"value"},{"name":"DETAILS","optional":true,"description":"Requests a table that shows a timing breakdown of the procedure steps.","type":"standalone"},{"name":"HOST=","optional":true,"aliases":["GRIDHOST="],"description":"Specifies the name of the appliance host in single or double quotes. If the HOST= option is specified, it overrides the value of the GRIDHOST environment variable.","type":"value"},{"name":"INSTALL=","optional":true,"aliases":["INSTALLLOC="],"description":"Specifies the directory in which the High-Performance Analytics shared libraries are installed on the appliance. Specifying the INSTALL= option overrides the GRIDINSTALLLOC environment variable.","type":"value"},{"name":"NODES=","optional":true,"aliases":["NNODES="],"description":"Specifies the number of nodes in the distributed computing environment, provided that the data are not processed alongside the database.","type":"value"},{"name":"NTHREADS=","optional":true,"description":"Specifies the number of threads for analytic computations and overrides the SAS system option THREADS | NOTHREADS. If you do not specify the NTHREADS= option, the number of threads are determined based on the number of CPUs on the host on which the analytic computations execute. The algorithm by which a CPU count is converted to a thread count is specific to the High- Performance Analytics procedure. Most procedures create one thread per CPU for the analytic computations. By default, High-Performance Analytics procedures execute in multiple concurrent threads unless turned off by the NOTHREADS system option or you force single-threaded execution with NTHREADS=1. The largest number that can be specified for n is 256. Individual High-Performance Analytics procedures can impose more stringent limits if called for by algorithmic considerations. You can affect the determination of the CPU count with the CPUCOUNT= option in the PERFORMANCE statement.","help":"NTHREADS=*n*","type":"value"},{"name":"TIMEOUT=","optional":true,"description":"Specifies the timeout in seconds for a High-Performance Analytics procedure to wait for a connection to the appliance and establish a connection back to the client. The default is s=120 seconds. If jobs are submitted to the appliance through workload management tools that might suspend access to the appliance for a longer period, you might want to increase the timeout value.","help":"TIMEOUT=*s*","type":"value"}]},{"name":"PRUNE","description":"The PRUNE statement controls pruning. If NONE is specified, no pruning is performed. If C45 is specified, a C4.5-based pruner (Quinlan (1993)) based on the upper error rate from the binomial distribution (Wilson (1927); ?); Agresti and Coull (1998)) (at the value confidence limit) will be used. Otherwise, a statistical metric may be used for pruning. Optionally, the metric may be complemented by a termination condition. Pruning and the pruning options are discussed in the details section. If no prune statement is given, pruning will occur based on entropy.","help":"PRUNE &lt;PRUNE by &lt; / until operator value &gt;&gt; &lt;C45 &lt; / confidence &gt;&gt; &lt;NONE&gt; ...","arguments":[{"name":"BY","optional":true,"description":"This form of the PRUNE statement chooses a node to prune back to a leaf by the specified by. Optionally, a metric, operator, and value may also be provided to control pruning. If the until metric is not specified, until will be the same as by, operator will be “>=,” and value will be 1. The by metric may be one of • GINI • ENTROPY • ASE • MISC The optional until metric may be one of • GINI • ENTROPY • ASE • MISC • N The operator may be one of the following C and FORTRAN operators: • <= • LE • >= • GE • < • LT • > • GT • = • EQ","type":"standalone"},{"name":"C45","optional":true,"description":"Uses C4.5-style pruning at the optional specified confidence limit.","type":"standalone"},{"name":"NONE","optional":true,"description":"Turns off pruning.","type":"standalone"}]},{"name":"RULES","description":"If the RULES statement is used, the final tree’s leaves will be written to the file specified through the filename filename or fileref fileref. If no RULES statement is used, no rules will be output.","help":"RULES file=[filename | fileref] "},{"name":"SCORE","description":"The SCORE statement scores the training data set by using the forest model that was trained by PROC HPSPLIT and outputs a data set that contains the scored results. The output data set contains the ID variables that are specified in the ID statement, predictions, and decisions. For each level of the target, a posterior probability variable is generated in addition to the final predicted level. Unlike the other output data sets, outds will be written in alongside mode. The _WARN_ variable will not be created in the scored data set. If no SCORE statement is specified, no scoring will take place.","help":"SCORE &lt;OUT=&lt; libref.&gt;SAS-data-set&gt; ","arguments":[{"name":"OUT=","optional":true,"description":"names the output data set to contain the scored data.","type":"value"}]},{"name":"TARGET","description":"The TARGET statement names the variable whose values PROC HPSPLIT tries to predict. Missing values in the target will be ignored except during scoring and therefore the statistics reported by HPSPLIT may differ from those found using the scored data sets. If multiple TARGET statements occur, the last one will be used. For ease of use, if the TARGET variable conflicts with an INPUT variable, the variable will be used for the target.","help":"TARGET variable "}],"supportSiteInformation":{"docsetId":"statug","docsetVersion":"latest","docsetTargetFile":"statug_hpsplit_toc.htm"}}