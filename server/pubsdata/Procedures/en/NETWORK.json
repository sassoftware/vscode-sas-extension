{"name":"NETWORK","statements":[{"name":"PROC NETWORK","description":"The NETWORK procedure includes a number of graph theory and network analysis algorithms that can augment data mining and machine learning approaches. In many practical applications of data mining and machine learning models, pairwise interaction between the entities of interest in the model often plays an important role. For example, when you are modeling churn in a telecommunications network to support a retention campaign, the influence of individual customers on the other customers—such as friends and acquaintances that they regularly interact with—might contribute to the propensity of other customers to churn. You could likewise imagine a customer being able to influence the propensity of his or her acquaintances to acquire new products. Social networks such as Facebook and Twitter are obvious examples of networks that represent such interactions between individuals.","help":"PROC NETWORK <DIRECTION=DIRECTED | UNDIRECTED> <INCLUDESELFLINK> <INDEXOFFSET=number> <LINKS=CAS-libref.data-table> <LOGFREQTIME=number | LOGFREQUENCYTIME=number> <LOGLEVEL=NONE | BASIC | MODERATE... > <NODES=CAS-libref.data-table> <NODESSUBSET=CAS-libref.data-table> <NTHREADS=number> <OUTLINKS=CAS-libref.data-table> <OUTNODES=CAS-libref.data-table> <STANDARDIZEDLABELS> <TIMETYPE=CPU | REAL>;     \n\tBICONNECTEDCOMPONENTS ;     \n\tBY variables;     \n\tCENTRALITY <AUTH=<WEIGHT | UNWEIGHT | BOTH>> <BETWEEN=<WEIGHT | UNWEIGHT | BOTH>> <BETWEENNORM=<TRUE | FALSE>> ...; \n   \n\tCLIQUE <MAXCLIQUES=number | ALL> <MAXTIME=number> <OUT=CAS-libref.data-table> ...; \n   \n\tCOMMUNITY <ALGORITHM=<LOUVAIN | LABELPROP | PARALLELLABELPROP>> <INTERNALFORMAT=<FULL | THIN>> <LINKREMOVALRATIO=number> ...; \n   \n\tCONNECTEDCOMPONENTS <ALGORITHM=<AUTOMATIC | DFS | PARALLEL>... > <INTERNALFORMAT=<FULL | THIN>> ; \n   \n\tCORE <MAXTIME=number> ; \n   \n\tCYCLE <ALGORITHM=<BACKTRACK | BUILD>> <MAXCYCLES=number | ALL> <MAXLENGTH=number> ...; \n   \n\tDISPLAY <CASESENSITIVE> <EXCLUDE> <EXCLUDEALL> ...; \n   \n\tDISPLAYOUT <NOREPLACE> <REPEATED> ; \n   \n\tLINKSVAR <AUXWEIGHT=column> <FROM=column> <TO=column> ...; \n   \n\tNODESSUBSETVAR <NODE=column> <REACH=column> <SINK=column> ...; \n   \n\tNODESVAR <NODE=column> <WEIGHT=column> ; \n   \n\tREACH <DIGRAPH> <EACHSOURCE> <MAXREACH=number> ...; \n   \n\tSHORTESTPATH <MAXPATHWEIGHT=number> <OUTPATHS=CAS-libref.data-table | OUT=CAS-libref.data-table> <OUTWEIGHTS=CAS-libref.data-table> ...; \n   \n\tSUMMARY <BICONNECTEDCOMPONENTS> <CONNECTEDCOMPONENTS> <DIAMETERAPPROX=<WEIGHT | UNWEIGHT | BOTH>> ...; \n   \n\tTRANSITIVECLOSURE <OUT=CAS-libref.data-table> ; ","arguments":[{"name":"DETERMINISTIC=","optional":true,"description":"Specifies whether to enforce determinism.","help":"DETERMINISTIC=TRUE |  FALSE","type":"choice","arguments":[{"name":"TRUE","description":"Ensures that each invocation (with the same machine configuration and parameter settings) produces the same final result.","type":"standalone"},{"name":"FALSE","description":"Specifying DETERMINISTIC=FALSE might improve performance, but the final results might differ. In some cases, this difference is simply a permutation of identifiers (for example, connected components). In other cases, when the algorithm uses local optimization (for example, community detection), the final result might be a local (or alternative) solution.","type":"standalone"}]},{"name":"DIRECTION=","optional":true,"description":"Specifies whether the input graph should be considered directed or undirected.","help":"DIRECTION=DIRECTED | UNDIRECTED","type":"choice","arguments":[{"name":"DIRECTED","description":"Specifies the graph as directed.","type":"standalone"},{"name":"UNDIRECTED","description":"Specifies the graph as undirected.","type":"standalone"}]},{"name":"DISTRIBUTED=","optional":true,"description":"Specifies whether to use a distributed graph.","help":"DISTRIBUTED=TRUE |  FALSE","type":"choice","arguments":[{"name":"TRUE","description":"means that a distributed graph is used.","type":"standalone"},{"name":"FALSE","description":"means that a distributed graph is not used.","type":"standalone"}]},{"name":"GRAPH=","optional":true,"description":"specifies the in-memory graph to use. This option can be used with any algorithm that supports in-memory execution.","help":"GRAPH=*number*","type":"value"},{"name":"INCLUDESELFLINK","optional":true,"description":"Includes self-links, such as (i,i), when an input graph is read. By default, when PROC NETWORK reads the LINKS= data table, it removes all self-links.","type":"standalone"},{"name":"INDEXOFFSET=","optional":true,"description":"Specifies the index offset for identifiers in the log and results output data tables. For example, if three cycles are found in cycle enumeration, they are labeled cycles 1, 2, and 3 by default. If INDEXOFFSET=4, they are labeled cycles 4, 5, and 6. The value of number must be an integer greater than or equal to 0. By default, INDEXOFFSET=1.","help":"INDEXOFFSET=*number*","type":"value"},{"name":"LINKS=","optional":true,"description":"Specifies the input data table that contains the graph link information. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the input data table.","help":"LINKS=*CAS-libref.data-table*","type":"dataSet"},{"name":"LINKSQUERY=","optional":true,"description":"specifies the input data table that contains the graph link information for the query graph. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the input data table.","help":"LINKSQUERY=*CAS-libref.data-table*","type":"dataSet"},{"name":"LOGFREQUENCYTIME=","optional":true,"aliases":["LOGFREQTIME="],"description":"Controls the frequency, in number of seconds, for displaying iteration logs for some algorithms. This option is useful for computationally intensive algorithms. Setting this value too low can hurt algorithm performance. The value of number can be any integer greater than or equal to 1.","help":"LOGFREQUENCYTIME=*number*","type":"value"},{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information that is displayed in the SAS log.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"Turns off all procedure-related messages in the SAS log.","type":"standalone"},{"name":"BASIC","description":"Displays a brief summary of the algorithmic processing.","type":"standalone"},{"name":"MODERATE","description":"Displays a moderately detailed summary of the input, output, and algorithmic processing.","type":"standalone"},{"name":"AGGRESSIVE","description":"Displays a more detailed summary of the input, output, and algorithmic processing.","type":"standalone"}]},{"name":"MULTILINKS=","optional":true,"description":"specifies whether to include or aggregate multilinks when an input graph (specified by the LINKS= or LINKSQUERY= option) is read.","help":"MULTILINKS=TRUE |  FALSE","type":"choice","arguments":[{"name":"TRUE","description":"includes multilinks.","type":"standalone"},{"name":"FALSE","description":"aggregates multilinks.","type":"standalone"}]},{"name":"NODES=","optional":true,"description":"Specifies the input data table that contains the graph node information.","help":"NODES=*CAS-libref.data-table*","type":"dataSet"},{"name":"NODESQUERY=","optional":true,"description":"specifies the input data table that contains the graph node information for the query graph. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the input data table.","help":"NODESQUERY=*CAS-libref.data-table*","type":"dataSet"},{"name":"NODESSUBSET=","optional":true,"description":"Specifies the input data table that contains the graph node subset information.","help":"NODESSUBSET=*CAS-libref.data-table*","type":"dataSet"},{"name":"NTHREADS=","optional":true,"description":"Specifies the maximum number of threads to use for multithreaded processing. Some of the algorithms can take advantage of multicore machines and can run faster when number is greater than 1. Algorithms that cannot take advantage of this option use only one thread even if number is greater than 1. For distributed execution, number specifies the maximum number of threads to use on each machine. The value of number can be any integer between 1 and 256, inclusive. The default is the number of cores on the machine that executes the process or the number of cores permissible based on your installation (whichever is less). The number of simultaneously active CPUs is limited by your installation and license configuration.","help":"NTHREADS=*number*","type":"value"},{"name":"OUTGRAPHLIST=","optional":true,"description":"Specifies the output data table to contain summary information about in-memory graphs. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTGRAPHLIST=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTLINKS=","optional":true,"description":"Specifies the output data table to contain the graph link information along with any results from the algorithms that calculate metrics on links. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTLINKS=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTNODES=","optional":true,"description":"Specifies the output data table to contain the graph node information along with any results from the algorithms that calculate metrics on nodes. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTNODES=*CAS-libref.data-table*","type":"dataSet"},{"name":"SELFLINKS=","optional":true,"description":"specifies whether to include or remove self-links when an input graph (specified by the LINKS= or LINKSQUERY= option) is read.","help":"SELFLINKS=TRUE |  FALSE","type":"choice","arguments":[{"name":"TRUE","description":"includes self-links.","type":"standalone"},{"name":"FALSE","description":"removes self-links.","type":"standalone"}]},{"name":"STANDARDIZEDLABELS","optional":true,"description":"Specifies that the input graph data are in a standardized format.","type":"standalone"},{"name":"STANDARDIZEDLABELSOUT","optional":true,"description":"Specifies that the output graph data include standardized format.","type":"standalone"},{"name":"TIMETYPE=","optional":true,"description":"Specifies whether CPU time or real time is used for each algorithm’s MAXTIME= option (where applicable).","help":"TIMETYPE=CPU | REAL","type":"choice","arguments":[{"name":"CPU","description":"Specifies units of CPU time. The time restriction is applied per processing machine (not across all machines).","type":"standalone"},{"name":"REAL","description":"Specifies units of real time.","type":"standalone"}]}]},{"name":"BICONNECTEDCOMPONENTS","description":"The BICONNECTEDCOMPONENTS statement requests that PROC NETWORK find biconnected components and articulation points of an undirected input graph.","help":"BICONNECTEDCOMPONENTS "},{"name":"BY","description":"You can specify a BY statement in PROC NETWORK to obtain separate analyses of observations in groups that are defined by the values of the BY variables. If you specify more than one BY statement, only the last one specified is used. The BY statement in PROC NETWORK is not supported when either a nodes or nodes subset data table is used. The BY variable must come from the LINKS= data table.","help":"BY variables"},{"name":"CENTRALITY","description":"The CENTRALITY statement enables you to select which centrality metrics to calculate for the given input graph. It also enables you to specify options for particular metrics. The resulting metrics are included in the node output data set (specified by the OUT_NODES= option) or the link output data set (specified by the OUT_LINKS= option).","help":"CENTRALITY &lt;AUTH=&lt;WEIGHT | UNWEIGHT | BOTH&gt;&gt; &lt;BETWEEN=&lt;WEIGHT | UNWEIGHT | BOTH&gt;&gt; &lt;BETWEENNORM=&lt;TRUE | FALSE&gt;&gt; ...","arguments":[{"name":"AUTH=","optional":true,"description":"Specifies which type of authority centrality to calculate.","help":"AUTH=WEIGHT | UNWEIGHT | BOTH","type":"choice","arguments":[{"name":"WEIGHT","description":"Calculates authority centrality based on the weighted graph.","type":"standalone"},{"name":"UNWEIGHT","description":"Calculates authority centrality based on the unweighted graph.","type":"standalone"},{"name":"BOTH","description":"Calculates authority centrality based on both weighted and unweighted graphs.","type":"standalone"}]},{"name":"BETWEEN=","optional":true,"description":"Specifies which type of betweenness centrality to calculate.","help":"BETWEEN=WEIGHT | UNWEIGHT | BOTH","type":"choice","arguments":[{"name":"WEIGHT","description":"Calculates betweenness centrality based on the weighted graph.","type":"standalone"},{"name":"UNWEIGHT","description":"Calculates betweenness centrality based on the unweighted graph.","type":"standalone"},{"name":"BOTH","description":"Calculates betweenness centrality based on both weighted and unweighted graphs.","type":"standalone"}]},{"name":"BETWEENNORM=","optional":true,"description":"Specifies whether to normalize the betweenness centrality metrics.","help":"BETWEENNORM=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"Normalizes the betweenness metrics. This is the default.","type":"standalone"},{"name":"FALSE","description":"Does not normalize the betweenness metrics.","type":"standalone"}]},{"name":"CLOSE=","optional":true,"description":"Specifies which type of closeness centrality to calculate.","help":"CLOSE=WEIGHT | UNWEIGHT | BOTH","type":"choice","arguments":[{"name":"WEIGHT","description":"Calculates closeness centrality based on the weighted graph.","type":"standalone"},{"name":"UNWEIGHT","description":"Calculates closeness centrality based on the unweighted graph.","type":"standalone"},{"name":"BOTH","description":"Calculates closeness centrality based on both weighted and unweighted graphs.","type":"standalone"}]},{"name":"CLOSENOPATH=","optional":true,"description":"Specifies a method for accounting for a shortest path between two nodes when a path does not exist (disconnected nodes).","help":"CLOSENOPATH=DIAMETER | HARMONIC | NNODES | ZERO","type":"choice","arguments":[{"name":"DIAMETER","description":"Uses the graph diameter as a shortest path between disconnected nodes.","type":"standalone"},{"name":"HARMONIC","description":"Uses the harmonic formula for calculating closeness centrality.","type":"standalone"},{"name":"NNODES","description":"Uses the number of nodes as a shortest path between disconnected nodes.","type":"standalone"},{"name":"ZERO","description":"Uses zero as a shortest path between disconnected nodes.","type":"standalone"}]},{"name":"CLUSTERINGCOEF","optional":true,"description":"Calculates the node clustering coefficient.","type":"standalone"},{"name":"DEGREE","optional":true,"description":"Calculates the degree centrality.","type":"standalone"},{"name":"EIGEN=","optional":true,"description":"Specifies which type of eigenvector centrality to calculate.","help":"EIGEN=WEIGHT | UNWEIGHT | BOTH","type":"choice","arguments":[{"name":"WEIGHT","description":"Calculates eigenvector centrality based on the weighted graph.","type":"standalone"},{"name":"UNWEIGHT","description":"Calculates centrality based on the unweighted graph.","type":"standalone"},{"name":"BOTH","description":"Calculates centrality based on both weighted and unweighted graphs.","type":"standalone"}]},{"name":"EIGENALGORITHM=","optional":true,"description":"Specifies the algorithm to use in calculating centrality metrics that require solving eigensystems— that is, when the EIGEN, HUB, or AUTH option (or some combination) is specified.","help":"EIGENALGORITHM=AUTOMATIC | JACOBIDAVIDSON | POWER","type":"choice","arguments":[{"name":"AUTOMATIC","description":"Automatically determines the eigensolver to use.","type":"standalone"},{"name":"JACOBIDAVIDSON","description":"Uses a variant of the Jacobi-Davidson algorithm for solving eigensystems.","type":"standalone"},{"name":"POWER","description":"Uses the power method to calculate eigenvectors.","type":"standalone"}]},{"name":"EIGENMAXITER=","optional":true,"description":"Specifies the maximum number of iterations to use for eigenvector calculations to limit the amount of computation time spent when convergence is slow. By default, EIGENMAXITERS=10,000.","help":"EIGENMAXITER=*num*","type":"value"},{"name":"HUB=","optional":true,"description":"Specifies which type of hub centrality to calculate.","help":"HUB=WEIGHT | UNWEIGHT | BOTH","type":"choice","arguments":[{"name":"WEIGHT","description":"Calculates hub centrality based on the weighted graph.","type":"standalone"},{"name":"UNWEIGHT","description":"Calculates hub centrality based on the unweighted graph.","type":"standalone"},{"name":"BOTH","description":"Calculates hub centrality based on both weighted and unweighted graphs.","type":"standalone"}]},{"name":"INFLUENCE=","optional":true,"description":"Specifies which type of influence centrality to calculate.","help":"INFLUENCE=WEIGHT | UNWEIGHT | BOTH","type":"choice","arguments":[{"name":"WEIGHT","description":"Calculates influence centrality based on the weighted graph.","type":"standalone"},{"name":"UNWEIGHT","description":"Calculates influence centrality based on the unweighted graph.","type":"standalone"},{"name":"BOTH","description":"Calculates influence centrality based on both weighted and unweighted graphs.","type":"standalone"}]},{"name":"PAGERANK=","optional":true,"description":"Specifies how to calculate PageRank centrality.","help":"PAGERANK=WEIGHT | UNWEIGHT | BOTH","type":"choice","arguments":[{"name":"WEIGHT","description":"Calculates PageRank centrality by using the weighted graph.","type":"standalone"},{"name":"UNWEIGHT","description":"Calculates PageRank centrality by using the unweighted graph.","type":"standalone"},{"name":"BOTH","description":"Calculates PageRank centrality by using both the weighted and unweighted graphs.","type":"standalone"}]},{"name":"PAGERANKALPHA=","optional":true,"description":"Specifies the damping factor to use in the PageRank algorithm.","help":"PAGERANKALPHA=*number*","type":"value"},{"name":"PAGERANKTOLERANCE=","optional":true,"description":"Specifies the convergence tolerance value for the PageRank algorithm.","help":"PAGERANKTOLERANCE=*number*","type":"value"},{"name":"SAMPLEPERCENT=","optional":true,"description":"Specifies the percentage of source nodes to sample for the approximate betweenness calculation. The value of number must be a positive number less than or equal to 100.","help":"SAMPLEPERCENT=*number*","type":"value"}]},{"name":"CLIQUE","description":"The CLIQUE statement invokes an algorithm that finds maximal cliques in the input graph.","help":"CLIQUE &lt;MAXCLIQUES=number | ALL&gt; &lt;MAXTIME=number&gt; &lt;OUT=CAS-libref.data-table&gt; ...","arguments":[{"name":"CLIQUENUMBER=","optional":true,"description":"specifies whether to calculate the clique number of the graph.","help":"CLIQUENUMBER=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"Calculates the clique number of the graph.","type":"standalone"},{"name":"FALSE","description":"Does not calculate the clique number of the graph.","type":"standalone"}]},{"name":"MAXCLIQUES=","optional":true,"description":"Specifies the maximum number of cliques to return during clique enumeration. You can specify either a number (which can be any 32-bit integer greater than or equal to 1) or ALL (which represents the maximum that can be represented by a 32-bit integer). By default, MAXCLIQUES=1.","help":"MAXCLIQUES=*number* | ALL","type":"choice","arguments":[{"name":"number","placeholder":true,"description":"Specifies the maximum number of cliques to return during clique enumeration. number can be any 32-bit integer greater than or equal to 1.","type":"value"},{"name":"ALL","description":"Represents the maximum value that can be represented by a 64-bit integer.","type":"standalone"}]},{"name":"MAXLINKWEIGHT=","optional":true,"description":"Specifies the maximum sum of link weights in a clique.","help":"MAXLINKWEIGHT=*number*","type":"value"},{"name":"MAXNODEWEIGHT=","optional":true,"description":"Specifies the maximum sum of node weights in a clique.","help":"MAXNODEWEIGHT=*number*","type":"value"},{"name":"MAXSIZE=","optional":true,"description":"Specifies the maximum number of nodes in a clique.","help":"MAXSIZE=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"Specifies the maximum amount of time to spend finding cliques. The type of time (either CPU time or real time) is determined by the value of the TIMETYPE= option in the PROC NETWORK statement. The default is the largest number that can be represented by a double.","help":"MAXTIME=*number*","type":"value"},{"name":"MINLINKWEIGHT=","optional":true,"description":"Specifies the minimum sum of link weights in a clique.","help":"MINLINKWEIGHT=*number*","type":"value"},{"name":"MINNODEWEIGHT=","optional":true,"description":"Specifies the minimum sum of node weights in a clique.","help":"MINNODEWEIGHT=*number*","type":"value"},{"name":"MINSIZE=","optional":true,"description":"Specifies the minimum number of nodes in a clique.","help":"MINSIZE=*number*","type":"value"},{"name":"OUT=","optional":true,"description":"Specifies the output data table to contain the maximal cliques. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUT=*CAS-libref.data-table*","type":"dataSet"}]},{"name":"COMMUNITY","description":"The COMMUNITY statement invokes an algorithm that detects communities of the input graph.","help":"COMMUNITY &lt;ALGORITHM=&lt;LOUVAIN | LABELPROP | PARALLELLABELPROP&gt;&gt; &lt;INTERNALFORMAT=&lt;FULL | THIN&gt;&gt; &lt;LINKREMOVALRATIO=number&gt; ...","arguments":[{"name":"ALGORITHM=","optional":true,"description":"Specifies the algorithm to use for community detection.","help":"ALGORITHM=LOUVAIN | LABELPROP | PARALLELLABELPROP","type":"choice","arguments":[{"name":"LOUVAIN","description":"Uses the Louvain algorithm proposed in Blondel et al. (2008).","type":"standalone"},{"name":"LABELPROP","description":"Uses the label propagation algorithm proposed in Raghavan, Albert, and Kumara (2007).","type":"standalone"},{"name":"PARALLELLABELPROP","description":"Uses the parallel (distributed and threaded) label propagation algorithm developed by SAS.","type":"standalone"}]},{"name":"FIX=","optional":true,"description":"Specifies which data variable defines groups of nodes to fix together in a community.","help":"FIX=*column*","type":"value"},{"name":"INTERNALFORMAT=","optional":true,"description":"Specifies which internal graph format for the community detection algorithm to use.","help":"INTERNALFORMAT=FULL | THIN","type":"choice","arguments":[{"name":"FULL","description":"Stores the graph in standard (adjacency-list-based) format.","type":"standalone"},{"name":"THIN","description":"Stores the graph in thin (simple list of links) format.","type":"standalone"}]},{"name":"LINKREMOVALRATIO=","optional":true,"description":"Specifies the percentage of small-weight links to be removed around each node neighborhood. A link is usually removed if its weight is relatively smaller than the weights of the neighboring links.","help":"LINKREMOVALRATIO=*number*","type":"value"},{"name":"MAXITERS=","optional":true,"description":"Specifies the maximum number of iterations allowed in the algorithm. The default is 20 when ALGORITHM=LOUVAIN and 100 when ALGORITHM=LABEL_PROP or ALGORITHM=PARALLEL_LABEL_PROP.","help":"MAXITERS=*num*","type":"value"},{"name":"OUTCOMMLINKS=","optional":true,"description":"Specifies the output data set that describes the links between communities. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTCOMMLINKS=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTCOMMUNITY=","optional":true,"description":"Specifies the output data table that contains the number of nodes in each community. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTCOMMUNITY=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTLEVEL=","optional":true,"description":"Specifies the output data table that contains community information at different resolution levels. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTLEVEL=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTOVERLAP=","optional":true,"description":"Specifies the output data table that describes the intensity of each node. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTOVERLAP=*CAS-libref.data-table*","type":"dataSet"},{"name":"RANDOMFACTOR=","optional":true,"description":"Specifies the random factor for the parallel label propagation algorithm. At each iteration, number x 100% of the nodes are randomly selected to skip the label propagation step. Specify a number between 0 and 1. The default is 0.15, which means that 15% of nodes skip the label propagation step at each iteration.","help":"RANDOMFACTOR=*number*","type":"value"},{"name":"RANDOMSEED=","optional":true,"description":"Specifies the random seed for the parallel label propagation algorithm. At each iteration, some nodes are randomly selected to skip the label propagation step, based on the value that you specify in the RANDOMFACTOR= option. To choose a different set of random samples, specify a number in the RANDOMSEED= option. By default, RANDOMSEED=1234.","help":"RANDOMSEED=*number*","type":"value"},{"name":"RECURSIVE","optional":true,"description":"Breaks down large communities into smaller ones until the specified conditions are satisfied. This option starts with the keyword RECURSIVE followed by any combination of three suboptions enclosed in parentheses—for example, RECURSIVE (MAXCOMMSIZE=500) or RECURSIVE (MAXCOMMSIZE=1000 MAXDIAMETER=3 RELATION=AND).","help":"RECURSIVE(MAXCOMMSIZE= | MAXDIAMETER= | RELATION=)","type":"choice","arguments":[{"name":"MAXCOMMSIZE=","type":"value"},{"name":"MAXDIAMETER=","type":"value"},{"name":"RELATION=","type":"value"}]},{"name":"RESOLUTIONLIST=","optional":true,"description":"Specifies a list of resolution values (positive numbers) that are separated by spaces (for example, 4.3 2.1 1.0 0.6 0.2).","help":"RESOLUTIONLIST=*num-list*","type":"value"},{"name":"TOLERANCE=","optional":true,"aliases":["MODULARITY="],"description":"Specifies the tolerance value for when to stop iterations.","help":"TOLERANCE=*number*","type":"value"},{"name":"WARMSTART=","optional":true,"description":"Specifies which data variable defines the initial node partition for warm starting community detection.","help":"WARMSTART=*column*","type":"value"}]},{"name":"CONNECTEDCOMPONENTS","description":"The CONNECTEDCOMPONENTS statement invokes an algorithm that finds the connected components of the input graph.","help":"CONNECTEDCOMPONENTS &lt;ALGORITHM=&lt;AUTOMATIC | DFS | PARALLEL&gt;... &gt; &lt;INTERNALFORMAT=&lt;FULL | THIN&gt;&gt; ","arguments":[{"name":"ALGORITHM=","optional":true,"description":"Specifies the algorithm to use for calculating connected components.","help":"ALGORITHM=AUTOMATIC | DFS | PARALLEL | UNIONFIND","type":"choice","arguments":[{"name":"AUTOMATIC","description":"Automatically determines the algorithm for connected components.","type":"standalone"},{"name":"DFS","description":"Uses the depth-first search algorithm for connected components.","type":"standalone"},{"name":"PARALLEL","description":"Uses the distributed parallel union-find algorithm for connected components. You can specify this value when the number of machines in your session is greater than 1. You can use this algorithm only with undirected graphs.","type":"standalone"},{"name":"UNIONFIND","description":"Uses the union-find algorithm for connected components. You can use this algorithm only with undirected graphs.","type":"standalone"}]},{"name":"INTERNALFORMAT=","optional":true,"description":"Specifies the internal graph format for the connected components algorithm to use.","help":"INTERNALFORMAT=FULL | THIN","type":"choice","arguments":[{"name":"FULL","description":"Stores the graph in standard (adjacency-list-based) format.","type":"standalone"},{"name":"THIN","description":"Stores the graph in thin (simple list of links) format.","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"Specifies the output data table to contain the connected components summary results.","help":"OUT=*CAS-libref.data-table*","type":"dataSet"}]},{"name":"CORE","description":"The CORE statement invokes an algorithm that finds the core decomposition of the input graph.","help":"CORE &lt;MAXTIME=number&gt; ","arguments":[{"name":"MAXTIME=","optional":true,"description":"Specifies the maximum amount of time to spend calculating the core decomposition. The type of time (either CPU time or real time) is determined by the value of the TIMETYPE= option in the PROC NETWORK statement.","help":"MAXTIME=*number*","type":"value"}]},{"name":"CYCLE","description":"The CYCLE statement invokes an algorithm that finds the cycles (or the existence of a cycle) in the input graph.","help":"CYCLE &lt;ALGORITHM=&lt;BACKTRACK | BUILD&gt;&gt; &lt;MAXCYCLES=number | ALL&gt; &lt;MAXLENGTH=number&gt; ...","arguments":[{"name":"ALGORITHM=","optional":true,"description":"Specifies which algorithm to use in enumerating cycles.","help":"ALGORITHM=BACKTRACK | BUILD","type":"choice","arguments":[{"name":"BACKTRACK","description":"Uses a backtracking algorithm based on Johnson (1975).","type":"standalone"},{"name":"BUILD","description":"Uses a building algorithm based on Liu and Wang (2006).","type":"standalone"}]},{"name":"MAXCYCLES=","optional":true,"description":"Specifies the maximum number of cycles to return during cycle enumeration. You can specify either a number (which can be any 32-bit integer greater than or equal to 1) or ALL (which represents the maximum that can be represented by a 32-bit integer). By default, MAXCYCLES=1.","help":"MAXCYCLES=*number* | ALL","type":"choice","arguments":[{"name":"number","placeholder":true,"description":"Specifies the maximum number of cycles to return during cycle enumeration. number can be any 32-bit integer greater than or equal to 1.","type":"value"},{"name":"ALL","description":"Represents the maximum that can be represented by a 32-bit integer.","type":"standalone"}]},{"name":"MAXLENGTH=","optional":true,"description":"Specifies the maximum number of links in a cycle. Any cycle whose length is greater than number is removed from the results. The default is the largest number that can be represented by a 32-bit integer, which causes no cycles to be removed from the results.","help":"MAXLENGTH=*number*","type":"value"},{"name":"MAXLINKWEIGHT=","optional":true,"description":"Specifies the maximum sum of link weights in a cycle. Any cycle whose sum of link weights is greater than number is removed from the results. The default is the largest number that can be represented by a double, which causes no cycles to be removed from the results.","help":"MAXLINKWEIGHT=*number*","type":"value"},{"name":"MAXNODEWEIGHT=","optional":true,"description":"Specifies the maximum sum of node weights in a cycle. Any cycle whose sum of node weights is greater than number is removed from the results. The default is the largest number that can be represented by a double, which causes no cycles to be removed from the results.","help":"MAXNODEWEIGHT=*number*","type":"value"},{"name":"MAXTIME","optional":true,"description":"Specifies the maximum amount of time to spend finding cycles. The type of time (either CPU time or real time) is determined by the value of the TIMETYPE= option in the PROC NETWORK statement. The default is the largest number that can be represented by a double.","type":"standalone"},{"name":"MINLENGTH=","optional":true,"description":"Specifies the minimum number of links in a cycle. Any cycle that has fewer links than number is removed from the results. By default, MINLENGTH=1 and no cycles are removed from the results.","help":"MINLENGTH=*number*","type":"value"},{"name":"MINLINKWEIGHT=","optional":true,"description":"Specifies the minimum sum of link weights in a cycle. Any cycle whose sum of link weights is less than number is removed from the results. The default is the largest (in magnitude) negative number that can be represented by a double, which causes no cycles to be removed from the results.","help":"MINLINKWEIGHT=*number*","type":"value"},{"name":"MINNODEWEIGHT=","optional":true,"description":"Specifies the minimum sum of node weights in a cycle. Any cycle whose sum of node weights is less than number is removed from the results. The default is the largest (in magnitude) negative number that can be represented by a double, which causes no cycles to be removed from the results.","help":"MINNODEWEIGHT=*number*","type":"value"},{"name":"OUTCYCLESLINKS=","optional":true,"description":"Specifies the output data table to contain the links of the cycles found.","help":"OUTCYCLESLINKS=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUT=","optional":true,"aliases":["OUTCYCLESNODES="],"description":"Specifies the output data table to contain the cycles found.","help":"OUT=*CAS-libref.data-table*","type":"dataSet"}]},{"name":"DISPLAY","description":"The DISPLAY statement enables you to specify a list of display tables to display or exclude. This statement is similar to the ODS SELECT, ODS EXCLUDE, and ODS TRACE statements. However, the DISPLAY statement can improve performance when a large number of tables could be generated (such as in BY-group processing). The procedure processes the DISPLAY statement on a CAS server and thus sends only a subset of ODS tables to the SAS client. Because ODS statements are processed on a SAS client, first all the generated display tables are sent to the client, and then the client creates a subset. If you use both DISPLAY and ODS statements together, the DISPLAY statement takes precedence over the ODS statements.","help":"DISPLAY &lt;CASESENSITIVE&gt; &lt;EXCLUDE&gt; &lt;EXCLUDEALL&gt; ...","arguments":[{"name":"CASESENSITIVE","optional":true,"followsDelimiter":"/","description":"Performs a case-sensitive comparison of table names in the table-list to display table names when tables are subsetted for display. To preserve case, you must enclose table names in the table-list in quotation marks.","type":"standalone"},{"name":"EXCLUDE","optional":true,"followsDelimiter":"/","description":"Displays all display tables except those specified in the table-list.","type":"standalone"},{"name":"EXCLUDEALL","optional":true,"followsDelimiter":"/","description":"Suppresses display of all tables. This option takes precedence over the other options.","type":"standalone"},{"name":"TRACE","optional":true,"followsDelimiter":"/","description":"Displays the display table names, labels, and paths.","type":"standalone"}]},{"name":"DISPLAYOUT","description":"The DISPLAYOUT statement enables you to create CAS output tables from your displayed output. This statement is similar to the ODS OUTPUT statement. The table-spec-list specifies a list of CAS output tables to create. Each entry in the list has either a key or a key=value format: key=value specifies key as the ODS table name, path, or partial pathname, and specifies value as the CAS output table name. key specifies key as the ODS table name and also as the CAS output table name. Table names and partial pathnames are discussed under the DISPLAY statement. The DISPLAYOUT statement does not support regular expressions.","help":"DISPLAYOUT &lt;NOREPLACE&gt; &lt;REPEATED&gt; ","arguments":[{"name":"INCLUDEALL","optional":true,"followsDelimiter":"/","description":"Creates output CAS tables for all display tables.","type":"standalone"},{"name":"NOREPLACE","optional":true,"followsDelimiter":"/","description":"Does not replace an existing CAS output table of the same name.","type":"standalone"},{"name":"REPEATED","optional":true,"followsDelimiter":"/","description":"Replicates the CAS output tables on all nodes.","type":"standalone"}]},{"name":"LINKSQUERYVAR","description":"The LINKSQUERYVAR statement enables you to explicitly specify the data variable names for PROC NETWORK to use when it reads the data table that you specify in the LINKSQUERY= option in the PROC NETWORK statement.","help":"LINKSQUERYVAR &lt;options&gt;;","arguments":[{"name":"EXPANDLOWER=","optional":true,"description":"specifies the name of the data variable for the query path expansion lower bounds.","help":"EXPANDLOWER=*column*","type":"value"},{"name":"EXPANDUPPER=","optional":true,"description":"Specifies the name of the data variable for the query path expansion upper bounds.","help":"EXPANDUPPER=*column*","type":"value"},{"name":"FROM=","optional":true,"aliases":["FROMVAR"],"description":"Specifies the name of the data variable for the from nodes. The value of the variable can be numeric or character.","help":"FROM=*column*","type":"value"},{"name":"TO=","optional":true,"aliases":["TOVAR"],"description":"Specifies the name of the data variable for the to nodes. The value of the variable can be numeric or character.","help":"TO=*column*","type":"value"},{"name":"VARS=","optional":true,"description":"Specifies the names of the data variables to read.","help":"VARS=(*columns*)","type":"value"},{"name":"VARSMATCH=","optional":true,"description":"Specifies the names of the data variables to match in the query graph. The value of the variables can be numeric or character.","help":"VARSMATCH=(*columns*)","type":"value"}]},{"name":"LINKSVAR","description":"The LINKSVAR statement enables you to explicitly specify the data variable names for PROC NETWORK to use when it reads the data table that you specify in the LINKS= option in the PROC NETWORK statement.","help":"LINKSVAR &lt;AUXWEIGHT=column&gt; &lt;FROM=column&gt; &lt;TO=column&gt; ...","arguments":[{"name":"AUXWEIGHT=","optional":true,"description":"Specifies the name of the data variable for the auxiliary link weights. The value of the column variable must be numeric.","help":"AUXWEIGHT=*column*","type":"value"},{"name":"FROM=","optional":true,"description":"Specifies the name of the data variable for the from nodes. The value of the column variable can be numeric or character.","help":"FROM=*column*","type":"value"},{"name":"TO=","optional":true,"description":"Specifies the name of the data variable for the to nodes. The value of the column variable can be numeric or character.","help":"TO=*column*","type":"value"},{"name":"VARS=","optional":true,"description":"Specifies the names of the additional data variables to read. The value of the variables can be numeric or character.","help":"VARS=(*columns*)","type":"value"},{"name":"VARSOUT=","optional":true,"description":"Specifies the names of the additional data variables to write to the output results. The value of the variables can be numeric or character.","help":"VARSOUT=(*columns*)","type":"value"},{"name":"WEIGHT=","optional":true,"description":"Specifies the name of the data variable for the link weights. The value of the column variable must be numeric.","help":"WEIGHT=*column*","type":"value"}]},{"name":"LOADGRAPH","description":"The LOADGRAPH statement reads the input graph from tables that are specified by the LINKS= option or the NODES= option (or both) in the PROC NETWORK statement, and it retains the graph in memory (within the current CAS session).","help":"LOADGRAPH ;"},{"name":"NODESIMILARITY","description":"The NODESIMILARITY statement invokes an algorithm that calculates how similar the neighborhoods of pairs of nodes are in an input graph.","help":"NODESIMILARITY &lt;*options*&gt;;","arguments":[{"name":"ADAMICADAR=","optional":true,"description":"Specifies whether to calculate Adamic-Adar node similarity.","help":"ADAMICADAR=TRUE |  FALSE","type":"choice","arguments":[{"name":"TRUE","description":"Calculates Adamic-Adar node similarity and saves the results in the output table that is specified in the OUTSIMILARITY= option.","type":"standalone"},{"name":"FALSE","description":"Does not calculate Adamic-Adar node similarity.","type":"standalone"}]},{"name":"BOTTOMK=","optional":true,"description":"Specifies the maximum number of lowest-ranked similarity pairs to output in the OUTSIMILARITY= table, where number can be any integer greater than or equal to 0.","help":"BOTTOMK=*number*","type":"value"},{"name":"COMMONNEIGHBORS=","optional":true,"description":"Specifies whether to calculate common neighbors node similarity.","help":"COMMONNEIGHBORS=TRUE |  FALSE","type":"choice","arguments":[{"name":"TRUE","description":"Calculates common neighbors node similarity and saves the results in the output table that is specified in the OUTSIMILARITY= option.","type":"standalone"},{"name":"FALSE","description":"Does not calculate common neighbors node similarity.","type":"standalone"}]},{"name":"CONVERGENCETHRESHOLD=","optional":true,"description":"Specifies the convergence threshold for vector similarity. If the convergence value drops below this threshold before the procedure completes the number of samples that are requested in the NSAMPLES= option, the vector embeddings training phase terminates early.","help":"CONVERGENCETHRESHOLD=*number*","type":"value"},{"name":"COSINE=","optional":true,"description":"Specifies whether to calculate cosine node similarity.","help":"COSINE=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"Calculates cosine node similarity and saves the results in the output table that is specified in the OUTSIMILARITY= option.","type":"standalone"},{"name":"FALSE","description":"Does not calculate cosine node similarity.","type":"standalone"}]},{"name":"EMBED=","optional":true,"description":"Specifies whether to calculate vector embeddings.","help":"EMBED=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"Calculates vector embeddings and saves the results in the output table that is specified in the OUTNODES= option.","type":"standalone"},{"name":"FALSE","description":"Does not calculate vector embeddings.","type":"standalone"}]},{"name":"EMBEDDINGS=","optional":true,"description":"Specifies the names of one or more data variables to be used as precalculated vector embeddings. The value of the variables can be numeric only.","help":"EMBEDDINGS=(*columns*)","type":"value"},{"name":"JACCARD=","optional":true,"description":"Specifies whether to calculate Jaccard node similarity.","help":"JACCARD=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"Calculates Jaccard node similarity and saves the results in the output table that is specified in the OUTSIMILARITY= option.","type":"standalone"},{"name":"FALSE","description":"Does not calculate Jaccard node similarity.","type":"standalone"}]},{"name":"MAXSCORE=","optional":true,"description":"Specifies the maximum similarity score to output in the OUTSIMILARITY= table, where number must be in the range [0, 1].","help":"MAXSCORE=*number*","type":"value"},{"name":"MINSCORE=","optional":true,"description":"Specifies the minimum similarity score to output in the OUTSIMILARITY= table, where number must be in the range [0, 1].","help":"MINSCORE=*number*","type":"value"},{"name":"NDIMENSIONS=","optional":true,"description":"Specifies the number of dimensions for node-embedding vectors.","help":"NDIMENSIONS=*number*","type":"value"},{"name":"NEGATIVESAMPLEFACTOR=","optional":true,"description":"Specifies a multiplier for the number of negative training samples per positive training sample for the vector algorithm.","help":"NEGATIVESAMPLEFACTOR=*number*","type":"value"},{"name":"NSAMPLES=","optional":true,"description":"Specifies the number of training samples for the vector algorithm.","help":"NSAMPLES=*number*","type":"value"},{"name":"ORDERBY=","optional":true,"description":"Specifies the similarity measure to use for ranking the similarity pairs to output in the OUTSIMILARITY= table.","help":"ORDERBY=JACCARD | COMMONNEIGHBORS | ADAMICADAR | VECTOR | COSINE","type":"choice","arguments":[{"name":"JACCARD","type":"standalone"},{"name":"COMMONNEIGHBORS","type":"standalone"},{"name":"ADAMICADAR","type":"standalone"},{"name":"VECTOR","type":"standalone"},{"name":"COSINE","type":"standalone"}]},{"name":"OUTCONVERGENCE=","optional":true,"description":"Specifies the output data table to contain the convergence curves for vector similarity. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTCONVERGENCE=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTSIMILARITY=","optional":true,"description":"Specifies the output data table to contain the similarity scores between pairs of nodes. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTSIMILARITY=*CAS-libref.data-table*","type":"dataSet"},{"name":"PROXIMITYORDER=","optional":true,"description":"Specifies the type of proximity to use in the vector algorithm.","help":"PROXIMITYORDER=FIRST | SECOND","type":"choice","arguments":[{"name":"FIRST","description":"uses first-order proximity in the vector algorithm.","type":"standalone"},{"name":"SECOND","description":"uses second-order proximity in the vector algorithm.","type":"standalone"}]},{"name":"SINK=","optional":true,"description":"Specifies the sink node for node similarity calculations.","help":"SINK=*sink-node*","type":"value"},{"name":"SOURCE=","optional":true,"description":"Specifies the source node for node similarity calculations.","help":"SOURCE=*source-node*","type":"value"},{"name":"SPARSE=","optional":true,"description":"Specifies whether to output sparse similarity data.","help":"SPARSE=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"outputs a sparse set of node pairs in the OUTSIMILARITY= table.","type":"standalone"},{"name":"FALSE","description":"outputs a dense set of node pairs in the OUTSIMILARITY= table.","type":"standalone"}]},{"name":"TOPK=","optional":true,"description":"Specifies the maximum number of highest-ranked similarity pairs to output in the OUTSIMILARITY= table, where number can be any integer greater than or equal to 0.","help":"TOPK=*number*","type":"value"},{"name":"VECTOR=","optional":true,"description":"specifies whether to calculate vector node similarity.","help":"VECTOR=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"calculates vector node similarity and saves the results in the output table that is specified in the OUTSIMILARITY= option.","type":"standalone"},{"name":"FALSE","description":"does not calculate vector node similarity.","type":"standalone"}]}]},{"name":"NODESQUERYVAR","description":"The NODESQUERYVAR statement enables you to explicitly specify the data variable names for PROC NETWORK to use when it reads the data table that you specify in the NODESQUERY= option in the PROC NETWORK statement.","help":"NODESQUERYVAR &lt;*options*&gt;;","arguments":[{"name":"NODE=","optional":true,"description":"specifies the name of the data variable for the nodes. The value of the variable can be numeric or character.","help":"NODE=*column*","type":"value"},{"name":"VARS=","optional":true,"description":"specifies the names of the data variables to read. The value of the variables can be numeric or character.","help":"VARS=(*columns*)","type":"value"},{"name":"VARSMATCH=","optional":true,"description":"specifies the names of the data variables to match in the query graph. The value of the variables can be numeric or character.","help":"VARSMATCH=(*columns*)","type":"value"}]},{"name":"NODESSUBSETVAR","description":"The NODESSUBSETVAR statement enables you to explicitly specify the data variable names for PROC NETWORK to use when it reads the data table that you specify in the NODESSUBSET= option in the PROC NETWORK statement.","help":"NODESSUBSETVAR &lt;NODE=column&gt; &lt;REACH=column&gt; &lt;SINK=column&gt; ...","arguments":[{"name":"NODE=","optional":true,"description":"Specifies the name of the data variable for the nodes. The value of the column variable can be numeric or character.","help":"NODE=*column*","type":"value"},{"name":"REACH=","optional":true,"description":"Specifies the name of the data variable for the reach identifier. The value of the column variable must be numeric.","help":"REACH=*column*","type":"value"},{"name":"SINK=","optional":true,"description":"Specifies the name of the data variable for the sink indicator. The value of the column variable must be numeric.","help":"SINK=*column*","type":"value"},{"name":"SOURCE=","optional":true,"description":"Specifies the name of the data variable for the source indicator. The value of the column variable must be numeric.","help":"SOURCE=*column*","type":"value"}]},{"name":"NODESVAR","description":"The NODESVAR statement enables you to explicitly specify the data variable names for PROC NETWORK to use when it reads the data table that you specify in the NODES= option in the PROC NETWORK statement.","help":"NODESVAR &lt;NODE=column&gt; &lt;WEIGHT=column&gt; ","arguments":[{"name":"NODE=","optional":true,"description":"Specifies the name of the data variable for the nodes. The value of the column variable can be numeric or character.","help":"NODE=*column*","type":"value"},{"name":"VARS=","optional":true,"description":"specifies the names of the additional data variables to read. The value of the variables can be numeric or character.","help":"VARS=(*columns*)","type":"value"},{"name":"VARSOUT=","optional":true,"description":"specifies the names of the additional data variables to write to the output results. The value of the variables can be numeric or character.","help":"VARSOUT=(*columns*)","type":"value"},{"name":"WEIGHT=","optional":true,"description":"Specifies the name of the data variable for the node weights. The value of the column variable must be numeric.","help":"WEIGHT=*column*","type":"value"}]},{"name":"PATH","description":"The PATH statement invokes an algorithm that finds the paths in the input graph.","help":"PATH &lt; options &gt;;","arguments":[{"name":"MAXLENGTH=","optional":true,"description":"specifies the maximum number of links in a path.","help":"MAXLENGTH=*number*","type":"value"},{"name":"MAXLINKWEIGHT=","optional":true,"description":"pecifies the maximum sum of link weights in a path.","help":"MAXLINKWEIGHT=*number*","type":"value"},{"name":"MAXNODEWEIGHT=","optional":true,"description":"specifies the maximum sum of node weights in a path.","help":"MAXNODEWEIGHT=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"specifies the maximum amount of time to spend finding paths.","help":"MAXTIME=*number*","type":"value"},{"name":"MINLENGTH=","optional":true,"description":"specifies the minimum number of links in a path.","help":"MINLENGTH=*number*","type":"value"},{"name":"MINLINKWEIGHT=","optional":true,"description":"specifies the minimum sum of link weights in a path.","help":"MINLINKWEIGHT=*number*","type":"value"},{"name":"MINNODEWEIGHT=","optional":true,"description":"specifies the minimum sum of node weights in a path.","help":"MINNODEWEIGHT=number","type":"value"},{"name":"OUTPATHSLINKS=","optional":true,"aliases":["OUTPATHS"],"description":"specifies the output data table to contain the path links. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTPATHSLINKS=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTPATHSNODES=","optional":true,"description":"specifies the output data table to contain the path nodes. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTPATHSNODES=*CAS-libref.data-table*","type":"dataSet"},{"name":"SINK=","optional":true,"description":"specifies the sink node for path calculations.","help":"SINK=*sink-node*","type":"value"},{"name":"SOURCE=","optional":true,"description":"specifies the source node for path calculations.","help":"SOURCE=source-node","type":"value"}]},{"name":"PATTERNMATCH","description":"The PATTERNMATCH statement invokes an algorithm that searches for subgraph patterns in an input graph.","help":"PATTERNMATCH &lt; options &gt;;","arguments":[{"name":"CODE=","optional":true,"description":"specifies the code that defines FCMP functions.","help":"CODE=*string*","type":"value"},{"name":"INDUCED=","optional":true,"description":"specifies whether to filter matches by using the induced subgraph of the match.","help":"INDUCED=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"keeps only matches whose induced subgraph is topologically equivalent to the query graph.","type":"standalone"},{"name":"FALSE","description":"does not filter by using the induced subgraph of the match.","type":"standalone"}]},{"name":"LINKFILTER=","optional":true,"description":"specifies the FCMP function for link filters.","help":"LINKFILTER=*function-name*","type":"value"},{"name":"LINKPAIRFILTER=","optional":true,"description":"specifies the FCMP function for link-pair filters.","help":"LINKPAIRFILTER=*function-name*","type":"value"},{"name":"MATCHFILTER=","optional":true,"description":"specifies the FCMP function for a filter that is based on a potential match (that is, any subset of nodes or links or both).","help":"MATCHFILTER=*function-name*","type":"value"},{"name":"MAXMATCHES=","optional":true,"description":"specifies the maximum number of matches for the pattern matching algorithm to return.","help":"MAXMATCHES=*number* | ALL","type":"value"},{"name":"MAXTIME=","optional":true,"description":"specifies the maximum amount of time to spend in the pattern matching algorithm.","help":"MAXTIME=*number*","type":"value"},{"name":"NODEFILTER=","optional":true,"description":"specifies the FCMP function for node filters.","help":"NODEFILTER=function-name","type":"value"},{"name":"NODEPAIRFILTER=","optional":true,"description":"specifies the FCMP function for node-pair filters.","help":"NODEPAIRFILTER=function-name","type":"value"},{"name":"OUTMATCHGRAPHLINKS=","optional":true,"description":"specifies the links output data table for the induced subgraph of matches. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTMATCHGRAPHLINKS=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTMATCHGRAPHNODES=","optional":true,"description":"specifies the nodes output data table for the induced subgraph of matches. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTMATCHGRAPHNODES=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTMATCHLINKS=","optional":true,"description":"specifies the links output data table for matching subgraphs. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTMATCHLINKS=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTMATCHNODES=","optional":true,"description":"specifies the nodes output data table for matching subgraph mappings. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTMATCHNODES=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTQUERYLINKS=","optional":true,"description":"specifies the links query output data table to contain the generated queries. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTQUERYLINKS=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTQUERYNODES=","optional":true,"description":"specifies the nodes query output data table to contain the generated queries. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTQUERYNODES=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTSUMMARY=","optional":true,"description":"specifies the summary output data table for pattern match queries. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTSUMMARY=*CAS-libref.data-table*","type":"dataSet"},{"name":"QUERYKEY=","optional":true,"description":"specifies the name of the data variable for the query key. The value of the variable can be numeric or character.","help":"QUERYKEY=*column*","type":"value"},{"name":"QUERYKEYAGGREGATE=","optional":true,"description":"specifies whether to aggregate nodes across query keys for creating the induced subgraph(s).","help":"QUERYKEYAGGREGATE=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"aggregates nodes across query keys for creating the induced subgraph(s).","type":"standalone"},{"name":"FALSE","description":"does not aggregate nodes across query keys for creating the induced subgraphs(s).","type":"standalone"}]}]},{"name":"PROJECTION","description":"The PROJECTION statement invokes an algorithm that calculates the network projection of the multiple-partition input graph and produces a single-partition output graph.","help":"PROJECTION &lt; options &gt;;","arguments":[{"name":"ADAMICADAR=","optional":true,"description":"specifies whether to calculate Adamic-Adar node similarity.","help":"ADAMICADAR=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"calculates Adamic-Adar node similarity and saves the results in the output table that is specified in the OUTPROJECTIONLINKS= option.","type":"standalone"},{"name":"FALSE","description":"does not calculate Adamic-Adar node similarity.","type":"standalone"}]},{"name":"COMMONNEIGHBORS=","optional":true,"description":"specifies whether to calculate common neighbors node similarity.","help":"COMMONNEIGHBORS=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"calculates common neighbors node similarity and saves the results in the output table that is specified in the OUTPROJECTIONLINKS= option.","type":"standalone"},{"name":"FALSE","description":"does not calculate common neighbors node similarity.","type":"standalone"}]},{"name":"COSINE=","optional":true,"description":"specifies whether to calculate cosine node similarity.","help":"COSINE=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"calculates cosine node similarity and saves the results in the output table that is specified in the OUTPROJECTIONLINKS= option.","type":"standalone"},{"name":"FALSE","description":"does not calculate cosine node similarity.","type":"standalone"}]},{"name":"DIRECTEDMETHOD=","optional":true,"description":"specifies the method to use for projection of directed graphs. This option can be used only for directed graphs.","help":"DIRECTEDMETHOD=CONVERGING | DIVERGING | TRANSITIVE","type":"choice","arguments":[{"name":"CONVERGING","type":"standalone"},{"name":"DIVERGING","type":"standalone"},{"name":"TRANSITIVE","type":"standalone"}]},{"name":"JACCARD=","optional":true,"description":"specifies whether to calculate Jaccard node similarity.","help":"JACCARD=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"calculates Jaccard node similarity and saves the results in the output table that is specified in the OUTPROJECTIONLINKS= option.","type":"standalone"},{"name":"FALSE","description":"does not calculate Jaccard node similarity.","type":"standalone"}]},{"name":"OUTNEIGHBORSLIST=","optional":true,"description":"specifies the output data table to contain the lists of common neighbors between pairs of nodes. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTNEIGHBORSLIST=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTPROJECTIONLINKS=","optional":true,"description":"specifies the output data table to contain the links of the projected graph. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTPROJECTIONLINKS=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTPROJECTIONNODES=","optional":true,"description":"specifies the output data table to contain the nodes of the projected graph. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTPROJECTIONNODES=*CAS-libref.data-table*","type":"dataSet"},{"name":"PARTITION=","optional":true,"description":"specifies the name of the data variable for the partition flag. The value of the variable must be 0, 1, or missing.","help":"PARTITION=*column*","type":"value"}]},{"name":"REACH","description":"The REACH statement invokes an algorithm that calculates the reach (ego) network on an input graph.","help":"REACH &lt;DIGRAPH&gt; &lt;EACHSOURCE&gt; &lt;MAXREACH=number&gt; ...","arguments":[{"name":"DIGRAPH","optional":true,"description":"Calculates the directed reach counts when computing the reach networks and includes the directed counts in the resulting output data set that is specified in the OUT_COUNTS= option. This option is ignored unless you specify MAXREACH=1 in the REACH statement.","type":"standalone"},{"name":"EACHSOURCE","optional":true,"description":"Treats each node as a source and calculates a reach network from each one.","type":"standalone"},{"name":"MAXREACH=","optional":true,"description":"Specifies the maximum number of links to allow from each source node in a reach network.","help":"MAXREACH=*number*","type":"value"},{"name":"OUTCOUNTS=","optional":true,"description":"Specifies the output data table to contain the node counts in each reach network. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTCOUNTS=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTREACHLINKS=","optional":true,"description":"Specifies the output data table to contain the links in each reach network. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTREACHLINKS=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTREACHNODES=","optional":true,"description":"Specifies the output data table to contain the nodes in each reach network. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTREACHNODES=*CAS-libref.data-table*","type":"dataSet"}]},{"name":"SHORTESTPATH","description":"The SHORTESTPATH statement invokes an algorithm that calculates shortest paths between pairs of nodes in the input graph. By default, PROC NETWORK finds a shortest path for each possible combination of source and sink nodes.","help":"SHORTESTPATH &lt;MAXPATHWEIGHT=number&gt; &lt;OUTPATHS=CAS-libref.data-table | OUT=CAS-libref.data-table&gt; &lt;OUTWEIGHTS=CAS-libref.data-table&gt; ...","arguments":[{"name":"MAXABSOLUTEOBJECTIVEGAP=","optional":true,"aliases":["MAXABSOBJGAP="],"description":"specifies an acceptance criterion for the sum of link weights (CandidatePath) in paths relative to the sum of link weights in the shortest path (ShortestPath).","help":"MAXABSOLUTEOBJECTIVEGAP=*number*","type":"value"},{"name":"MAXPATHWEIGHT=","optional":true,"aliases":["MAXLINKWEIGHT="],"description":"Specifies the maximum path weight. Any shortest path whose sum of link weights is greater than number is removed from the results. The default is the largest number that can be represented by a double, which causes no paths to be removed from the results.","help":"MAXPATHWEIGHT=*number*","type":"value"},{"name":"MAXPATHSPERPAIR=","optional":true,"description":"specifies the maximum number of ranked paths to find for each source-sink pair. The algorithm finds at most number best paths between each source-sink pair. The paths that are returned are arranged in ascending order in the sum of link weights for each path. By default, MAXPATHSPERPAIR=1 and the algorithm finds one shortest path between each source-sink pair.","help":"MAXPATHSPERPAIR=*number*","type":"value"},{"name":"MAXRELATIVEOBJECTIVEGAP=","optional":true,"aliases":["MAXRELOBJGAP="],"description":"specifies an acceptance criterion for the sum of link weights (CandidatePath) in paths relative to the sum of link weights in the shortest path (ShortestPath).","help":"MAXRELATIVEOBJECTIVEGAP=*number*","type":"value"},{"name":"MINPATHWEIGHT=","optional":true,"aliases":["MINLINKWEIGHT="],"description":"specifies the minimum sum of link weights in a path. Any shortest path whose sum of link weights is less than number is removed from the results. The default is the largest (in magnitude) negative number that can be represented by a double. When the default is used, no paths are removed from the results.","help":"MINPATHWEIGHT=*number*","type":"value"},{"name":"OUTPATHS=","optional":true,"aliases":["OUT=","OUTPATHSLINKS="],"description":"Specifies the output data table to contain the shortest paths.","help":"OUTPATHS=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTPATHSNODES=","optional":true,"description":"specifies the output data table to contain the shortest path nodes. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTPATHSNODES=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTSUMMARY=","optional":true,"description":"specifies the output data table to contain descriptive statistics of the finite shortest paths for each source. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUTSUMMARY=*CAS-libref.data-table*","type":"dataSet"},{"name":"OUTWEIGHTS=","optional":true,"description":"Specifies the output data table to contain the shortest path summaries.","help":"OUTWEIGHTS=*CAS-libref.data-table*","type":"dataSet"},{"name":"SEQUENCE=","optional":true,"description":"specifies which data variable in the nodes subset table defines the sequence of nodes to visit. The variable data type must be numeric. The values must define an ordering from lowest (visit first) to highest (visit last). The resulting path contains a node subsequence that matches the specified node sequence. You cannot use this SEQUENCE= option in combination with the SOURCE= or SINK= option in the SHORTESTPATH statement. In addition, the nodes subset table cannot contain a source or sink variable. To specify the source and sink nodes for the path, include them as the first and last nodes, respectively, in the sequence of nodes that you specify with the SEQUENCE= option.","help":"SEQUENCE=*column*","type":"value"},{"name":"SINK=","optional":true,"description":"Specifies the sink node for shortest path calculations. This setting overrides the use of the variable sink in the data table that you specify in the NODESSUBSET= option in the PROC NETWORK statement.","help":"SINK=*sink-node*","type":"value"},{"name":"SOURCE=","optional":true,"description":"Specifies the source node for shortest path calculations. This setting overrides the use of the variable source in the data table that you specify in the NODESSUBSET= option in the PROC NETWORK statement.","help":"SOURCE=*source-node*","type":"value"}]},{"name":"SUMMARY","description":"The SUMMARY statement invokes an algorithm that calculates various summary metrics for an input graph.","help":"SUMMARY &lt;BICONNECTEDCOMPONENTS&gt; &lt;CONNECTEDCOMPONENTS&gt; &lt;DIAMETERAPPROX=&lt;WEIGHT | UNWEIGHT | BOTH&gt;&gt; ...","arguments":[{"name":"BICONNECTEDCOMPONENTS","optional":true,"description":"Calculates information about biconnected components. You can use this option only for an undirected graph.","type":"standalone"},{"name":"CLUSTERINGCOEFFICIENT","optional":true,"aliases":["CLUSTERINGCOEF"],"description":"calculates information about clustering coefficients. You can use this option only for an undirected graph.","type":"standalone"},{"name":"CONNECTEDCOMPONENTS","optional":true,"description":"Calculates information about connected components.","type":"standalone"},{"name":"DIAMETERAPPROX=","optional":true,"description":"Calculates information about the approximate diameter and specifies which type of calculation to perform. Use this option when calculating the exact diameter (by calculating all shortest paths) is too computationally expensive.","help":"DIAMETERAPPROX=WEIGHT | UNWEIGHT | BOTH","type":"choice","arguments":[{"name":"WEIGHT","description":"Calculates the approximate diameter by using the weighted graph.","type":"standalone"},{"name":"UNWEIGHT","description":"Calculates the approximate diameter by using the unweighted graph.","type":"standalone"},{"name":"BOTH","description":"Calculates the approximate diameter by using both the weighted and unweighted graphs.","type":"standalone"}]},{"name":"FINITEPATH","optional":true,"description":"includes only finite values when calculating descriptive statistics that are related to shortest paths (eccentricity, diameter, and so on).","type":"standalone"},{"name":"OUT=","optional":true,"description":"Specifies the output data table to contain the summary results.","help":"OUT=*CAS-libref.data-table*","type":"dataSet"},{"name":"SHORTESTPATH=","optional":true,"description":"Calculates information about shortest paths and specifies which type of calculation to perform.","help":"SHORTESTPATH=WEIGHT | UNWEIGHT | BOTH","type":"choice","arguments":[{"name":"WEIGHT","description":"Calculates shortest paths by using the weighted graph.","type":"standalone"},{"name":"UNWEIGHT","description":"Calculates shortest paths by using the unweighted graph.","type":"standalone"},{"name":"BOTH","description":"Calculates shortest paths by using both the weighted and unweighted graphs.","type":"standalone"}]}]},{"name":"TOPOLOGICALSORT","description":"The TOPOLOGICALSORT statement calculates a topological ordering of the nodes of a directed acyclic input graph.","help":"TOPOLOGICALSORT ;"},{"name":"TRANSITIVECLOSURE","description":"The TRANSITIVECLOSURE statement invokes an algorithm that calculates the transitive closure of an input graph.","help":"TRANSITIVECLOSURE &lt;OUT=CAS-libref.data-table&gt; ","arguments":[{"name":"OUT=","optional":true,"description":"Specifies the output data table to contain the transitive closure results.","help":"OUT=*CAS-libref.data-table*","type":"dataSet"}]},{"name":"UNLOADGRAPH","description":"The UNLOADGRAPH statement deletes the in-memory graph that is specified in the GRAPH= option in the PROC NETWORK statement.","help":"UNLOADGRAPH ;"}],"supportSiteInformation":{"docsetId":"casmlnetwork","docsetVersion":"v_018","docsetTargetFile":"casmlnetwork_network_toc.htm"}}