{"name":"NLMOD","statements":[{"name":"PROC NLMOD","description":"The NLMOD procedure uses either nonlinear least squares or maximum likelihood to fit nonlinear regression models in SAS Viya. PROC NLMOD enables you to specify the model by using SAS programming statements, which give you greater flexibility in modeling the relationship between the response variable and independent (regressor) variables than SAS procedures that use a more structured MODEL statement.","help":"PROC NLMOD <ABSCONV=r | ABSTOL=r> <ABSFCONV= r <n> | ABSFTOL=r <n>> <ABSGCONV=r <n> | ABSGTOL=r <n>> <ALPHA=α> <CORR> <COV> <DATA=CAS-libref.data-table> <DF=n> <ECORR> <ECOV> <FCONV=r <n> | FTOL=r <n>> <GCONV=r <n> | GTOL=r <n>> <MAXFUNC=n | MAXFU=n> <MAXITER=n | MAXIT=n> <MAXTIME=r> <MINITER=n | MINIT=n> <NOITPRINT> <NOPRINT> <OUT=CAS-libref.data-table> <SINGULAR=number> <TECHNIQUE=CONGRA | DBLDOG | LEVMAR... >;     \n\tABORT;\n    \n\tBOUNDS constraint < , constraint . . . > ;\n    \n\tBY variables ;\n    \n\tCALL name [ ( expression [, expression ... ] ) ];\n    \n\tDELETE;\n    \n\tDISPLAY <CASESENSITIVE> <EXCLUDE> <EXCLUDEALL> ...;\n    \n\tDISPLAYOUT <NOREPLACE> <REPEATED> ;\n    \n\tDO[variable = expression;\n    \n\tELSE <DO> <IF> <THEN> ...;\n    \n\tEND;\n    \n\tESTIMATE <ALPHA=α> <DF=d> ;\n    \n\tGOTO statement_label;\n    \n\tID variables ;\n    \n\tIF <DO> <THEN> <WHEN> ...;\n    \n\tLINK statement_label;\n    \n\tMODEL <BINARY(p)> <NORMAL(m,v)> <RESIDUAL(m) | LS(m)> ...;\n    \n\t;\n    \n\tPARAMETERS <BEST=i > 0> <PDATA=CAS-libref.data-table | DATA=CAS-libref.data-table> <START=value | DEFSTART=value> ...;\n    \n\tPREDICT <ALPHA=α> <DF=d> <MEAN> ...;\n    \n\tPUT <_PDV_> ;\n    \n\tRESTRICT restriction1 < , restriction2 . . . > ;\n    \n\tRETURN;\n    \n\t;\n    \n\tSTOP ;\n    \n\tSUBSTR( variable, index, length )= expression;\n    \n\tWHEN <DO> ;\n","arguments":[{"name":"ABSCONV=","optional":true,"aliases":["ABSTOL="],"description":"Specifies an absolute function convergence criterion. The default value of r is the negative square root of the largest double-precision value, which serves only as a protection against overflows.","type":"value"},{"name":"ABSFCONV=","optional":true,"aliases":["ABSFTOL="],"description":"Specifies an absolute function difference convergence criterion. For all techniques except NMSIMP, termination requires a small change of the function value in successive iterations.","type":"value"},{"name":"ABSGCONV=","optional":true,"aliases":["ABSGTOL="],"description":"Specifies an absolute gradient convergence criterion. This criterion is not used by the NMSIMP technique. The optional integer value n specifies the number of successive iterations for which the criterion must be satisfied before the process can be terminated. By default, ABSGCONV=1E–5.","type":"value"},{"name":"ALPHA=","optional":true,"description":"Specifies the level of significance α that is used in constructing 100(1-α)% confidence intervals. The value must be strictly between 0 and 1; the default value of α = 0.05 results in 95% intervals. This value is used as the default confidence level for limits that are computed in the “Parameter Estimates” table and is used in the LOWER and UPPER options in the PREDICT statement.","type":"value"},{"name":"CORR","optional":true,"description":"Requests the approximate correlation matrix for the parameter estimates.","type":"standalone"},{"name":"COV","optional":true,"description":"Requests the approximate covariance matrix for the parameter estimates.","type":"standalone"},{"name":"DATA=","optional":true,"description":"Names the input data table to be used by PROC NLMOD. The default is the most recently created data table. CAS-libref specifies the CAS library where the input data table resides, and data-table specifies the name of the input data table.","help":"DATA=*CAS-libref.data-table*","type":"dataSet"},{"name":"DF=","optional":true,"description":"Specifies the default number of degrees of freedom to use in the calculation of p-values and confidence limits for additional parameter estimates.","help":"DF=*n*","type":"value"},{"name":"ECORR","optional":true,"description":"Requests the approximate correlation matrix for all expressions that are specified in ESTIMATE statements.","type":"standalone"},{"name":"ECOV","optional":true,"description":"Requests the approximate covariance matrix for all expressions that are specified in ESTIMATE statements.","type":"standalone"},{"name":"FCONV=","optional":true,"aliases":["FTOL="],"description":"Specifies a relative function convergence criterion.","type":"value"},{"name":"GCONV=","optional":true,"aliases":["GTOL="],"description":"Specifies a relative gradient convergence criterion.","type":"value"},{"name":"MAXFUNC=","optional":true,"aliases":["MAXFU="],"description":"Specifies the maximum number n of function calls in the optimization process. The default values are as follows, depending on the optimization technique: o TRUREG, NRRIDG, and NEWRAP: 125 o QUANEW and DBLDOG: 500 o CONGRA: 1,000 o NMSIMP: 3,000","type":"value"},{"name":"MAXITER=","optional":true,"aliases":["MAXIT="],"description":"Specifies the maximum number n of iterations in the optimization process. The default values are as follows, depending on the optimization technique: o TRUREG, NRRIDG, and NEWRAP: 50 o QUANEW and DBLDOG: 200 o CONGRA: 400 o NMSIMP: 1,000","type":"value"},{"name":"MAXTIME=","optional":true,"description":"Specifies an upper limit of r seconds of CPU time for the optimization process. The time specified by r is checked only once at the end of each iteration. Therefore, the actual running time can be longer than r . The default value is the largest floating-point double representation of your computer.","help":"MAXTIME=*r*","type":"value"},{"name":"MINITER=","optional":true,"aliases":["MINIT="],"description":"Specifies the minimum number of iterations. If you request more iterations than are actually needed for convergence to a stationary point, the optimization algorithms can behave strangely. For example, the effect of rounding errors can prevent the algorithm from continuing for the required number of iterations. By default, MINITER=0.","type":"value"},{"name":"NOITPRINT","optional":true,"description":"Suppresses the display of the “Iteration History” table.","type":"standalone"},{"name":"NOPRINT","optional":true,"description":"Suppresses the generation of ODS output.","type":"standalone"},{"name":"OUT=","optional":true,"description":"Names the output data table to be created when one or more PREDICT statements are specified. CASlibref specifies the CAS library where the output data table is to be created, and data-table specifies the name of the output data table. A single OUT= data table is created to contain all predicted values when more than one PREDICT statement is specified. An error message is generated if a PREDICT statement is specified and an OUT= data table is not specified. The variables in the input data table are not included in the output data table, in order to avoid data duplication for large data tables; however, variables that you specify in the ID statement are included.","help":"OUT=*CAS-libref.data-table*","type":"dataSet"},{"name":"SINGULAR=","optional":true,"description":"Tunes the general singularity criterion that is applied in sweeps and inversions. The default is 1E4 times the machine epsilon; this product is approximately 1E-12 on most computers.","help":"SINGULAR=*number*","type":"value"},{"name":"TECHNIQUE=","optional":true,"aliases":["TECH="],"description":"Specifies the optimization technique for obtaining maximum likelihood estimates.","help":"TECHNIQUE=CONGRA | DBLDOG | LEVMAR | NEWRAP | NMSIMP | NRRIDG | QUANEW | TRUREG | NONE","type":"choice","arguments":[{"name":"CONGRA","description":"Performs a conjugate-gradient optimization..","type":"standalone"},{"name":"DBLDOG","description":"Performs a version of double-dogleg optimization.","type":"standalone"},{"name":"LEVMAR","description":"Performs a Levenberg-Marquardt nonlinear least-squares minimization. This technique is available only with PROC NLMOD.","type":"standalone"},{"name":"NEWRAP","description":"Performs a Newton-Raphson optimization with line search.","type":"standalone"},{"name":"NMSIMP","description":"Performs a Nelder-Mead simplex optimization.","type":"standalone"},{"name":"NRRIDG","description":"Performs a Newton-Raphson optimization with ridging.","type":"standalone"},{"name":"QUANEW","description":"Performs a dual quasi-Newton optimization.","type":"standalone"},{"name":"TRUREG","description":"Performs a trust-region optimization","type":"standalone"},{"name":"NONE","description":"Performs no optimization.","type":"standalone"}]}]},{"name":"ABORT","description":"Stops executing the current procedure, SAS job, or SAS session. The ABORT statement does not allow any arguments.","help":"ABORT"},{"name":"BOUNDS","description":"You can specify more than one BOUNDS statement. If you specify more than one lower (or upper) bound for the same parameter, the maximum (or minimum) of these is taken.","help":"BOUNDS constraint &lt; , constraint . . . &gt; "},{"name":"BY","description":"You can specify a BY statement in PROC NLMOD to obtain separate analyses of observations in groups that are defined by the BY variables. If you specify more than one BY statement, only the last one specified is used.","help":"BY variables "},{"name":"CALL","description":"Invokes a function or routine.","help":"CALL name [ ( expression [, expression ... ] ) ]"},{"name":"DELETE","description":"Stops processing the current observation.","help":"DELETE"},{"name":"DISPLAY","description":"The DISPLAY statement enables you to specify a list of ODS tables to display or exclude. This statement is similar to the ODS SELECT, ODS EXCLUDE, and ODS TRACE statements. However, the DISPLAY statement can improve performance when a large number of tables could be generated (such as in BY-group processing). The procedure processes the DISPLAY statement on a CAS server and thus sends only a subset of ODS tables to the SAS client. Because ODS statements are processed on a SAS client, all ODS tables are sent to the client and then the client creates a subset. If both DISPLAY and ODS statements are used together, the DISPLAY statement takes precedence over the ODS statements.","help":"DISPLAY &lt;CASESENSITIVE&gt; &lt;EXCLUDE&gt; &lt;EXCLUDEALL&gt; ...","arguments":[{"name":"CASESENSITIVE","optional":true,"followsDelimiter":"/","description":"Performs a case-sensitive comparison of table names in the table-list to ODS table names when tables are subsetted for display. To preserve case, you must enclose table names in the table-list in quotation marks.","type":"standalone"},{"name":"EXCLUDE","optional":true,"followsDelimiter":"/","description":"Displays all ODS tables except those specified in the table-list.","type":"standalone"},{"name":"EXCLUDEALL","optional":true,"followsDelimiter":"/","description":"Suppresses display of all tables. This option takes precedence over the other options.","type":"standalone"},{"name":"TRACE","optional":true,"followsDelimiter":"/","description":"Displays the ODS table names, labels, and paths.","type":"standalone"}]},{"name":"DISPLAYOUT","description":"The DISPLAYOUT statement enables you to create CAS output tables from your displayed output. This statement is similar to the ODS OUTPUT statement. The table-spec-list specifies a list of CAS output tables to create. Each entry in the list has either a key or a key=value format: key=value specifies key as the ODS table name, path, or partial pathname, and specifies value as the CAS output table name. key specifies key as the ODS table name and also as the CAS output table name. Table names and partial pathnames are discussed under the DISPLAY statement. The DISPLAYOUT statement does not support regular expressions.","help":"DISPLAYOUT &lt;NOREPLACE&gt; &lt;REPEATED&gt; ","arguments":[{"name":"NOREPLACE","optional":true,"followsDelimiter":"/","description":"Does not replace an existing CAS output table of the same name.","type":"standalone"},{"name":"REPEATED","optional":true,"followsDelimiter":"/","description":"Replicates the CAS output tables on all nodes.","type":"standalone"}]},{"name":"DO","description":"","help":"DO[variable = expression"},{"name":"ELSE","description":"If the condition in an IF-THEN statement is false and an ELSE statement is present, then the ELSE action is carried out.","help":"ELSE &lt;DO&gt; &lt;IF&gt; &lt;THEN&gt; ...","arguments":[{"name":"AND","optional":true,"description":"","type":"standalone"},{"name":"DO","optional":true,"description":"Action statement in an IF-THEN-ELSE construct.","type":"standalone"},{"name":"IF","optional":true,"description":"Executes a SAS statement for observations that meet specific conditions.","type":"standalone"},{"name":"NOT","optional":true,"description":"","type":"standalone"},{"name":"OR","optional":true,"description":"","type":"standalone"},{"name":"OUTPUT","optional":true,"description":"Action statement in an IF-THEN-ELSE construct.","type":"standalone"},{"name":"THEN","optional":true,"description":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS statement for observations that are read from a SAS data set, for records in an external file, or for computed values.","type":"standalone"}]},{"name":"END","description":"Ends a DO group or SELECT group processing.","help":"END"},{"name":"ESTIMATE","description":"The ESTIMATE statement enables you to compute an additional estimate that is a function of the parameter values. You must provide a quoted string to identify the estimate and then provide a valid SAS expression. Multiple ESTIMATE statements are permitted, and results from all ESTIMATE statements are listed in a common table. PROC NLMOD computes approximate standard errors for the estimates by using the delta method (Billingsley 1986). It uses these standard errors to compute corresponding t statistics, p-values, and confidence limits.","help":"ESTIMATE &lt;ALPHA=α&gt; &lt;DF=d&gt; ","arguments":[{"name":"ALPHA=","optional":true,"description":"Specifies the alpha level to be used to compute confidence limits. The default value corresponds to the ALPHA= option in the PROC NLMOD statement.","type":"value"},{"name":"DF=","optional":true,"description":"Specifies the degrees of freedom to be used to compute p-values and confidence limits. The default value corresponds to the DF= option in the PROC NLMOD statement.","help":"DF=*d*","type":"value"}]},{"name":"GOTO","description":"Jumps to a new statement.","help":"GOTO statement_label"},{"name":"ID","description":"The ID statement lists one or more variables from the input data table that are transferred to output data tables that PROC NLMOD creates, provided that the output data table contains one or more records per input observation. For example, when you use an OUT= option in PROC NLMOD statement to produce prediction statistics, ID variables are added to the output data table. By default, PROC NLMOD do not include all variables from the input data table in output data tables.","help":"ID variables "},{"name":"IF","description":"","help":"IF &lt;DO&gt; &lt;THEN&gt; &lt;WHEN&gt; ...","arguments":[{"name":"AND","optional":true,"description":"","type":"standalone"},{"name":"DO","optional":true,"description":"Action statement in an IF-THEN construct.","type":"standalone"},{"name":"GO","optional":true,"aliases":["GOTO"],"description":"Jumps to a new statement.","help":"GO TO","type":"standalone"},{"name":"NOT","optional":true,"description":"","type":"standalone"},{"name":"OR","optional":true,"description":"","type":"standalone"},{"name":"OUTPUT","optional":true,"description":"Action statement in an IF-THEN construct.","type":"standalone"},{"name":"PUT","optional":true,"description":"Action statement in an IF-THEN construct.","type":"standalone"},{"name":"SET","optional":true,"description":"Reads an observation from one or more SAS data sets.","type":"standalone"},{"name":"STOP","optional":true,"description":"Action statement in an IF-THEN construct. Stops execution of the current DATA step.","type":"standalone"},{"name":"THEN","optional":true,"description":"If the conditions that are specified in the IF clause are met, the IF-THEN statement executes a SAS statement for observations that are read from a SAS data set, for records in an external file, or for computed values.","type":"standalone"},{"name":"WHEN","optional":true,"description":"WHEN statement in an IF-THEN-WHEN construct.","type":"standalone"}]},{"name":"LINK","description":"Directs program execution immediately to the statement label that is specified and, if followed by a RETURN statement, returns execution to the statement that follows the LINK statement.","help":"LINK statement_label"},{"name":"MODEL","description":"The MODEL statement is the mechanism for either using a distribution specification to specify the distribution of the data or using the RESIDUAL distribution to specify a predicted value. You must specify a single dependent variable from the input data table, a tilde (~), and then a distribution and its parameters.","help":"MODEL &lt;BINARY(p)&gt; &lt;NORMAL(m,v)&gt; &lt;RESIDUAL(m) | LS(m)&gt; ...","arguments":[{"name":"BINARY","optional":true,"description":"Specifies a binary (Bernoulli) distribution that has probability p.","type":"standalone"},{"name":"BINOMIAL","optional":true,"description":"Specifies a binomial distribution that has count n and probability p.","type":"standalone"},{"name":"GAMMA","optional":true,"description":"Specifies a gamma distribution that has shape a and scale b.","type":"standalone"},{"name":"GENERAL","optional":true,"description":"Specifies a general log-likelihood function that you construct by using SAS programming statements.","type":"standalone"},{"name":"NEGBIN","optional":true,"description":"Specifies a negative binomial distribution that has count n and probability p.","type":"standalone"},{"name":"NORMAL","optional":true,"description":"Specifies a normal (Gaussian) distribution that has mean m and variance v.","type":"standalone"},{"name":"POISSON","optional":true,"description":"Specifies a Poisson distribution that has mean m.","type":"standalone"},{"name":"RESIDUAL","optional":true,"description":"Specifies no particular distribution. Instead the sum of squares of the differences between m and the dependent variable is minimized.","type":"standalone"}]},{"name":"OTHERWISE","description":">","help":""},{"name":"PARAMETERS","aliases":["PARMS"],"description":"The purpose of the PARAMETERS statement is to provide starting values for the NLMOD procedure. You can provide values that define a single point in the parameter space or that define a set of points.","help":"PARAMETERS &lt;BEST=i &gt; 0&gt; &lt;PDATA=CAS-libref.data-table | DATA=CAS-libref.data-table&gt; &lt;START=value | DEFSTART=value&gt; ...","arguments":[{"name":"BEST=","optional":true,"followsDelimiter":"/","description":"Specifies the maximum number of parameter grid points and the corresponding objective function values to display in the “Parameters” table. If you specify this option, the parameter grid points are listed in ascending order of objective function value. By default, all parameter grid points are displayed.","type":"value"},{"name":"PDATA=","optional":true,"followsDelimiter":"/","aliases":["DATA="],"description":"Specifies the data table that provides parameter starting values. CAS-libref specifies the CAS library where the input data table resides, and data-table specifies the name of the input data table.","type":"value"},{"name":"START=","optional":true,"followsDelimiter":"/","aliases":["DEFSTART="],"description":"Specifies a default starting value for all parameters.","type":"value"}]},{"name":"PREDICT","description":"The PREDICT statement enables you to construct predictions of an expression across all the observations in the input data table. Multiple PREDICT statements are permitted. Results for all PREDICT statements are displayed in the output data table that you specify in the OUT= option in the PROC NLMOD statement. The variables in the input data table are not included in the output data table, in order to avoid data duplication for large data tables; however, variables that you specify in the ID statement are included. You must specify the following arguments: 'label' identifies the predicted expression. expression | MEAN provides the predicted value.You can specify the predicted value either by using a SAS programming expression that contains the input data table variables and parameters or by using the keyword MEAN. If you specify the keyword MEAN, the predicted mean value for the distribution specified in the MODEL statement is used. Predicted","help":"PREDICT &lt;ALPHA=α&gt; &lt;DF=d&gt; &lt;MEAN&gt; ...","arguments":[{"name":"ALPHA=","optional":true,"description":"Specifies the alpha level to be used to compute confidence limits. The default value corresponds to the ALPHA= option in the PROC NLMOD statement.","type":"value"},{"name":"DF=","optional":true,"description":"Specifies the degrees of freedom to be used to compute confidence limits. The default value corresponds to the DF= option in the PROC NLMOD statement.","help":"DF=*d*","type":"value"},{"name":"LOWER=","optional":true,"description":"Specifies a variable that contains the lower confidence limit of the predicted value.","help":"LOWER=*name*","type":"value"},{"name":"MEAN","optional":true,"description":"If you specify the keyword MEAN, the predicted mean value for the distribution specified in the MODEL statement is used.","type":"standalone"},{"name":"PRED=","optional":true,"description":"Specifies a variable that contains the predicted value.","help":"PRED=*name*","type":"value"},{"name":"PROBT=","optional":true,"description":"Specifies a variable that contains the p-value of the predicted value.","help":"PROBT=*name*","type":"value"},{"name":"STDERR=","optional":true,"description":"Specifies a variable that contains the standard error of the predicted value.","help":"STDERR=*name*","type":"value"},{"name":"TVALUE=","optional":true,"description":"Specifies a variable that contains the t statistic for the predicted value.","help":"TVALUE=*name*","type":"value"},{"name":"UPPER=","optional":true,"description":"Specifies a variable that contains the upper confidence limit of the predicted value.","help":"UPPER=*name*","type":"value"}]},{"name":"PUT","description":"The PUT statement, used mostly for program debugging in PROC NLMOD, supports only some of the features of the DATA step PUT statement, and it has some new features that the DATA step PUT statement does not have: o The PROC HPNLIN PUT statement does not support line pointers, factored lists, iteration factors, overprinting, _INFILE_, the colon (:) format modifier, or “$”. o The PROC HPNLIN PUT statement supports expressions, but the expression must be enclosed in parentheses. For example, the following statement displays the square root of x: put (sqrt(x)); o The PROC HPNLIN PUT statement supports the item _PDV_ to display a formatted listing of all variables in the program. For example, the following statement displays a much more readable listing of the variables than the _ALL_ print item: put _pdv_;","help":"PUT &lt;_PDV_&gt; ","arguments":[{"name":"_PDV_","optional":true,"description":"Displays a formatted listing of all variables in the program.","type":"standalone"}]},{"name":"RESTRICT","description":"The RESTRICT statement imposes linear restrictions on the model’s parameters estimates. You can specify any number of RESTRICT statements. Each restriction is written as an expression, optionally followed by an equality operator (=) or an inequality operator (<, >, <=, >=), followed by a second expression: expression < operator expression > The operator can be =, <, >, <= , or >=. The operator and second expression are optional. When they are omitted, the operator defaults to = and the second expression defaults to the value 0.","help":"RESTRICT restriction1 &lt; , restriction2 . . . &gt; "},{"name":"RETURN","description":"Stops executing statements at the current point and returns to a predetermined point in the step.","help":"RETURN"},{"name":"SELECT","description":"","help":""},{"name":"STOP","description":"The STOP statement halts the execution of all statements that contain it, including DO statements and other control or looping statements. Execution continues with the next top-level source statement.","help":"STOP "},{"name":"SUBSTR","description":"The SUBSTR function used as a programming statement in PROC HPNLIN.","help":"SUBSTR( variable, index, length )= expression"},{"name":"WHEN","description":"","help":"WHEN &lt;DO&gt; ","arguments":[{"name":"DO","optional":true,"description":"","type":"standalone"}]}],"supportSiteInformation":{"docsetId":"casstat","docsetVersion":"latest","docsetTargetFile":"casstat_nlmod_toc.htm"}}