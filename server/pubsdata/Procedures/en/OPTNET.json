{"name":"OPTNET","statements":[{"name":"PROC OPTNET","description":"The OPTNET procedure includes a number of graph theory, combinatorial optimization, and network analysis algorithms that can be used to analyze relationships between entities. These relationships are typically defined by using a graph.","help":"PROC OPTNET <options>;\n\tBICONCOMP <option>;    \n\tCLIQUE <options>;    \n\tCONCOMP <options>;    \n\tCYCLE <options>;    \n\tDATA_LINKS_VAR <options>;    \n\tDATA_MATRIX_VAR <column1,column2,...>;    \n\tDATA_NODES_VAR <options>;    \n\tLINEAR_ASSIGNMENT <options>;    \n\tMINCOSTFLOW <options>;    \n\tMINCUT <options>;    \n\tMINSPANTREE <options>;    \n\tPERFORMANCE <options>;    \n\tSHORTPATH <options>;    \n\tTRANSITIVE_CLOSURE <options>;    \n\tTSP <options>;    ","arguments":[{"name":"DATA_LINKS=","optional":true,"aliases":["LINKS="],"description":"specifies the input data set that contains the graph link information, where the links are defined as a list.","help":"DATA_LINKS=*SAS-data-set*","type":"dataSet"},{"name":"DATA_MATRIX=","optional":true,"aliases":["MATRIX="],"description":"specifies the input data set that contains the matrix to be processed. This is a generic matrix (as opposed to an adjacency matrix, which defines an underlying graph).","help":"DATA_MATRIX=*SAS-data-set*","type":"dataSet"},{"name":"DATA_NODES=","optional":true,"aliases":["NODES="],"description":"specifies the input data set that contains the graph node information.","help":"DATA_NODES=*SAS-data-set*","type":"dataSet"},{"name":"DATA_NODES_SUB=","optional":true,"aliases":["NODES_SUB="],"description":"specifies the input data set that contains the graph node subset information.","help":"DATA_NODES_SUB=*SAS-data-set*","type":"dataSet"},{"name":"GRAPH_DIRECTION=","optional":true,"aliases":["DIRECTION="],"description":"specifies whether the input graph should be considered directed or undirected. By default, GRAPH_DIRECTION=UNDIRECTED.","help":"GRAPH_DIRECTION=DIRECTED | UNDIRECTED","type":"choice","arguments":[{"name":"DIRECTED","description":"specifies the graph as directed.","type":"standalone"},{"name":"UNDIRECTED","description":"specifies the graph as undirected.","type":"standalone"}]},{"name":"GRAPH_INTERNAL_FORMAT=","optional":true,"aliases":["INTERNAL_FORMAT="],"description":"requests the internal graph format for the algorithms to use. By default, GRAPH_INTERNAL_FORMAT=FULL.","help":"GRAPH_INTERNAL_FORMAT=THIN | FULL","type":"choice","arguments":[{"name":"THIN","description":"stores the graph in thin format.","type":"standalone"},{"name":"FULL","description":"stores the graph in standard (full) format.","type":"standalone"}]},{"name":"INCLUDE_SELFLINK","optional":true,"description":"includes self links when an input graph is read. By default, when PROC OPTNET reads the DATA_LINKS= data set, it removes all self links.","type":"standalone"},{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information that is displayed in the SAS log. By default, LOGLEVEL=BASIC.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"turns off all procedure-related messages in the SAS log","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"displays a basic summary of the input, output, and algorithmic processing","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"displays a summary of the input, output, and algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"displays a detailed summary of the input, output, and algorithmic processing","type":"standalone"}]},{"name":"OUT_LINKS=","optional":true,"description":"specifies the output data set to contain the graph link information along with any results from the various algorithms that calculate metrics on links.","help":"OUT_LINKS=*SAS-data-set*","type":"dataSet"},{"name":"OUT_NODES=","optional":true,"description":"specifies the output data set to contain the graph node information along with any results from the various algorithms that calculate metrics on nodes.","help":"OUT_NODES=*SAS-data-set*","type":"dataSet"},{"name":"STANDARDIZED_LABELS","optional":true,"description":"specifies that the input graph data is in a standardized format described in section Standardized Labels.","type":"standalone"},{"name":"TIMETYPE=","optional":true,"description":"specifies whether CPU time or real time is used for the MAXTIME= option for each applicable algorithm. By default, TIMETYPE=CPU.","help":"TIMETYPE=CPU | REAL","type":"choice","arguments":[{"name":"CPU","aliases":["0"],"description":"specifies units of CPU time","type":"standalone"},{"name":"REAL","aliases":["1"],"description":"specifies units of real time","type":"standalone"}]}]},{"name":"BICONCOMP","description":"The BICONCOMP statement requests that PROC OPTNET find biconnected components and articulation points of an undirected input graph.","help":"BICONCOMP &lt;*option*&gt;;    ","arguments":[{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information that is displayed in the SAS log. The default is the value that is specified in the LOGLEVEL= option in the PROC OPTNET statement (or BASIC if that option is not specified).","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"displays a detailed summary of the algorithmic processing","type":"standalone"}]}]},{"name":"CLIQUE","description":"The CLIQUE statement invokes an algorithm that finds maximal cliques on the input graph.","help":"CLIQUE &lt;*options*&gt;;    ","arguments":[{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information that is displayed in the SAS log. The default is the value that is specified in the LOGLEVEL= option in the PROC OPTNET statement (or BASIC if that option is not specified).","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"MAXCLIQUES=","optional":true,"description":"specifies the maximum number of cliques to return during clique calculations. The default is the positive number that has the largest absolute value that can be represented in your operating environment.","help":"MAXCLIQUES=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"specifies the maximum amount of time to spend calculating cliques. The value of number can be any positive number; the default value is the positive number that has the largest absolute value that can be represented in your operating environment.","help":"MAXTIME=*number*","type":"value"},{"name":"OUT=","optional":true,"description":"specifies the output data set to contain the maximal cliques.","help":"OUT=*SAS-data-set*","type":"dataSet"}]},{"name":"CONCOMP","description":"The CONCOMP statement invokes an algorithm that finds the connected components of the input graph.","help":"CONCOMP &lt;*options*&gt;;    ","arguments":[{"name":"ALGORITHM=","optional":true,"description":"specifies the algorithm to use for calculating connected components. By default, ALGORITHM=UNION_FIND for undirected graphs, and ALGORITHM=DFS for directed graphs.","help":"ALGORITHM=DFS | UNION_FIND","type":"choice","arguments":[{"name":"DFS","description":"uses the depth-first search algorithm for connected components.","type":"standalone"},{"name":"UNION_FIND","description":"uses the union-find algorithm for connected components.","type":"standalone"}]},{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information that is displayed in the SAS log. The default is the value that is specified in the LOGLEVEL= option in the PROC OPTNET statement (or BASIC if that option is not specified).","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"turns off all algorithm-related messages in the SAS log.","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"displays a detailed summary of the algorithmic processing","type":"standalone"}]}]},{"name":"CYCLE","description":"The CYCLE statement invokes an algorithm that finds the cycles (or the existence of a cycle) in the input graph.","help":"CYCLE &lt;*options*&gt;;    ","arguments":[{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information that is displayed in the SAS log. The default is the value that is specified in the LOGLEVEL= option in the PROC OPTNET statement (or BASIC if that option is not specified).","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"MAXCYCLES=","optional":true,"description":"specifies the maximum number of cycles to return. The default is the positive number that has the largest absolute value representable in your operating environment.","help":"MAXCYCLES=*number*","type":"value"},{"name":"MAXLENGTH=","optional":true,"description":"specifies the maximum number of links to allow in a cycle. The default is the positive number that has the largest absolute value that can be represented in your operating environment. By default, nothing is removed from the results.","help":"MAXLENGTH=*number*","type":"value"},{"name":"MAXLINKWEIGHT=","optional":true,"description":"specifies the maximum sum of link weights to allow in a cycle. The default is the positive number that has the largest absolute value that can be represented in your operating environment. By default, nothing is filtered.","help":"MAXLINKWEIGHT=*number*","type":"value"},{"name":"MAXNODEWEIGHT=","optional":true,"description":"specifies the maximum sum of node weights to allow in a cycle. The default is the positive number that has the largest absolute value that can be represented in your operating environment. By default, nothing is filtered.","help":"MAXNODEWEIGHT=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"specifies the maximum amount of time to spend finding cycles. The value of number can be any positive number; the default value is the positive number that has the largest absolute value that can be represented in your operating environment.","help":"MAXTIME=*number*","type":"value"},{"name":"MINLENGTH=","optional":true,"description":"specifies the minimum number of links to allow in a cycle. By default MINLENGTH=1 and nothing is filtered.","help":"MINLENGTH=*number*","type":"value"},{"name":"MINLINKWEIGHT=","optional":true,"description":"specifies the minimum sum of link weights to allow in a cycle. The default is the negative number that has the largest absolute value that can be represented in your operating environment. By default, nothing is filtered.","help":"MINLINKWEIGHT=*number*","type":"value"},{"name":"MINNODEWEIGHT=","optional":true,"description":"specifies the minimum sum of node weights to allow in a cycle. The default is the negative number that has the largest absolute value that can be represented in your operating environment. By default, nothing is filtered.","help":"MINNODEWEIGHT=*number*","type":"value"},{"name":"MODE=","optional":true,"description":"specifies the mode for processing cycles. By default, MODE=FIRST_CYCLE.","help":"MODE=ALL_CYCLES | FIRST_CYCLE","type":"choice","arguments":[{"name":"ALL_CYCLES","description":"returns all (unique, elementary) cycles found.","type":"standalone"},{"name":"FIRST_CYCLE","description":"returns the first cycle found.","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"specifies the output data set to contain the cycles found.","help":"OUT=*SAS-data-set*","type":"dataSet"}]},{"name":"DATA_LINKS_VAR","aliases":["LINKS_VAR"],"description":"The DATA_LINKS_VAR statement enables you to explicitly define the data set variable names for PROC OPTNET to use when it reads the data set that is specified in the DATA_LINKS= option in the PROC OPTNET statement.","help":"DATA_LINKS_VAR &lt;*options*&gt;;    ","arguments":[{"name":"FROM=","optional":true,"description":"specifies the data set variable name forfrom nodes.","help":"FROM=*column*","type":"value"},{"name":"LOWER=","optional":true,"description":"specifies the data set variable name for link flow lower bounds.","help":"LOWER=*column*","type":"value"},{"name":"TO=","optional":true,"description":"specifies the data set variable name for to node.","help":"TO=*column*","type":"value"},{"name":"UPPER=","optional":true,"description":"specifies the data set variable name for link flow upper bounds.","help":"UPPER=*column*","type":"value"},{"name":"WEIGHT=","optional":true,"description":"specifies the data set variable name for link weights.","help":"WEIGHT=*column*","type":"value"}]},{"name":"DATA_MATRIX_VAR","aliases":["MATRIX_VAR"],"description":"The DATA_MATRIX_VAR statement enables you to explicitly define the data set variable names for PROC OPTNET to use when it reads the data set that is specified in the DATA_MATRIX= option in the PROC OPTNET statement.","help":"DATA_MATRIX_VAR &lt;*column1,column2,...*&gt;;    "},{"name":"DATA_NODES_VAR","aliases":["NODES_VAR"],"description":"The DATA_NODES_VAR statement enables you to explicitly define the data set variable names for PROC OPTNET to use when it reads the data set that is specified in the DATA_NODES= option in the PROC OPTNET statement.","help":"DATA_NODES_VAR &lt;*options*&gt;;    ","arguments":[{"name":"NODE=","optional":true,"description":"specifies the data set variable name for the nodes.","help":"NODE=*column*","type":"value"},{"name":"WEIGHT=","optional":true,"description":"specifies the data set variable name for node weights.","help":"WEIGHT=*column*","type":"value"},{"name":"WEIGHT2=","optional":true,"description":"specifies the data set variable name for auxiliary node weights.","help":"WEIGHT2=*column*","type":"value"}]},{"name":"LINEAR_ASSIGNMENT","aliases":["LAP"],"description":"The LINEAR_ASSIGNMENT statement invokes an algorithm that solves the minimal-cost linear assignment problem. In graph terms, this problem is also known as the minimum link-weighted matching problem on a bipartite graph.","help":"LINEAR_ASSIGNMENT &lt;*options*&gt;;    ","arguments":[{"name":"ID=","optional":true,"description":"specifies the data set variable names that identify the matrix rows (from nodes).","help":"ID=(&lt;*column1,column2,…*&gt;)","type":"standaloneOrValue"},{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information that is displayed in the SAS log. The default is the value that is specified in the LOGLEVEL= option in the PROC OPTNET statement (or BASIC if that option is not specified).","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"specifies the output data set to contain the solution to the linear assignment problem.","help":"OUT=*SAS-data-set*","type":"dataSet"},{"name":"WEIGHT=","optional":true,"description":"specifies the data set variable names for the cost matrix.","help":"WEIGHT=(&lt;*column1,column2,…*&gt;)","type":"standaloneOrValue"}]},{"name":"MINCOSTFLOW","aliases":["MCF"],"description":"The MINCOSTFLOW statement invokes an algorithm that solves the minimum-cost network flow problem on an input graph.","help":"MINCOSTFLOW &lt;*options*&gt;;    ","arguments":[{"name":"LOGFREQ=","optional":true,"description":"controls the frequency for displaying iteration logs for minimum-cost network flow calculations that use the network simplex algorithm. For graphs that contain one component, this option displays progress every number simplex iterations, and the default is 10,000.","help":"LOGFREQ=*number*","type":"value"},{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information that is displayed in the SAS log. The default is the value that is specified in the LOGLEVEL= option in the PROC OPTNET statement (or BASIC if that option is not specified).","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"displays a summary of the algorithmic processing including a progress log using the interval that is specified in the LOGFREQ= option","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"displays a detailed summary of the algorithmic processing including a progress log using the interval that is specified in the LOGFREQ= option","type":"standalone"}]},{"name":"MAXTIME=","optional":true,"description":"specifies the maximum amount of time to spend calculating minimum-cost network flows. The type of time (either CPU time or real time) is determined by the value of the TIMETYPE= option. The value of number can be any positive number; the default value is the positive number that has the largest absolute value that can be represented in your operating environment.","help":"MAXTIME=*number*","type":"value"}]},{"name":"MINCUT","description":"The MINCUT statement invokes an algorithm that finds the minimum link-weighted cut of an input graph.","help":"MINCUT &lt;*options*&gt;;    ","arguments":[{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information that is displayed in the SAS log. The default is the value that is specified in the LOGLEVEL= option in the PROC OPTNET statement (or BASIC if that option is not specified).","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"MAXNUMCUTS=","optional":true,"description":"specifies the maximum number of cuts to return from the algorithm. The minimal cut and any others found during the search, up to number, are returned. By default, MAXNUMCUTS=1.","help":"MAXNUMCUTS=*number*","type":"value"},{"name":"MAXWEIGHT=","optional":true,"description":"specifies the maximum weight of the cuts to return from the algorithm. The default is the positive number that has the largest absolute value that can be represented in your operating environment.","help":"MAXWEIGHT=*number*","type":"value"},{"name":"OUT=","optional":true,"description":"specifies the output data set to contain the solution to the minimum-cut problem.","help":"OUT=*SAS-data-set*","type":"dataSet"}]},{"name":"MINSPANTREE","aliases":["MST"],"description":"The MINSPANTREE statement invokes an algorithm that solves the minimum link-weighted spanning tree problem on an input graph.","help":"MINSPANTREE &lt;*options*&gt;;    ","arguments":[{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information that is displayed in the SAS log. The default is the value that is specified in the LOGLEVEL= option in the PROC OPTNET statement (or BASIC if that option is not specified).","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"specifies the output data set to contain the solution to the minimum link-weighted spanning tree problem.","help":"OUT=*SAS-data-set*","type":"dataSet"}]},{"name":"PERFORMANCE","description":"The PERFORMANCE statement specifies performance options for multithreaded computing and requests detailed results about the performance characteristics of the OPTNET procedure. The PERFORMANCE statement enables you to control the number of threads used and the output of the ODS table that reports procedure timing.","help":"PERFORMANCE &lt;*options*&gt;;    ","arguments":[{"name":"DETAILS","optional":true,"description":"requests that PROC OPTNET produce the Timing ODS table, which shows a breakdown of the time used in each step of the procedure.","type":"standalone"},{"name":"NTHREADS=","optional":true,"description":"specifies the number of threads that PROC OPTNET can use. The default value is CPUCOUNT, which sets the thread count to the number determined by the SAS system option CPUCOUNT=.","help":"NTHREADS=*number* | CPUCOUNT","type":"choice","arguments":[{"name":"number","placeholder":true,"type":"value"},{"name":"CPUCOUNT","type":"standalone"}]}]},{"name":"SHORTPATH","description":"The SHORTPATH statement invokes an algorithm that calculates shortest paths between sets of nodes on the input graph.","help":"SHORTPATH &lt;*options*&gt;;    ","arguments":[{"name":"LOGFREQ=","optional":true,"description":"displays iteration logs for shortest path calculations every number nodes. The default is determined automatically based on the size of the graph.","help":"LOGFREQ=*number*","type":"value"},{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information that is displayed in the SAS log. The default is the value that is specified in the LOGLEVEL= option in the PROC OPTNET statement (or BASIC if that option is not specified).","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"Displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"OUT_PATHS=","optional":true,"aliases":["OUT="],"description":"specifies the output data set to contain the shortest paths.","help":"OUT_PATHS=*SAS-data-set*","type":"dataSet"},{"name":"OUT_WEIGHTS=","optional":true,"description":"specifies the output data set to contain the shortest path summaries.","help":"OUT_WEIGHTS=*SAS-data-set*","type":"dataSet"},{"name":"PATHS=","optional":true,"description":"specifies the type of output to produce in the output data set that is specified in the OUT_PATHS= option. By default, PATHS=ALL.","help":"PATHS=ALL | LONGEST | SHORTEST","type":"choice","arguments":[{"name":"ALL","description":"outputs shortest paths for all pairs of source-sinks.","type":"standalone"},{"name":"LONGEST","description":"outputs shortest paths for the source-sink pair with the longest (finite) length. If other source-sink pairs (up to 100) have equally long length, they are also output.","type":"standalone"},{"name":"SHORTEST","description":"outputs shortest paths for the source-sink pair with the shortest length. If other source-sink pairs (up to 100) have equally short length, they are also output.","type":"standalone"}]},{"name":"SINK=","optional":true,"description":"specifies the sink node for shortest paths calculations.","help":"SINK=*sink-node*","type":"value"},{"name":"SOURCE=","optional":true,"description":"specifies the source node for shortest paths calculations.","help":"SOURCE=*source-node*","type":"value"},{"name":"USEWEIGHT=","optional":true,"description":"specifies whether to use link weights (if they exist) in calculating shortest paths. By default, USEWEIGHT=YES.","help":"USEWEIGHT=YES | NO","type":"choice","arguments":[{"name":"YES","description":"uses weights (if they exist) in shortest path calculations.","type":"standalone"},{"name":"NO","description":"does not use weights in shortest path calculations.","type":"standalone"}]},{"name":"WEIGHT2=","optional":true,"description":"specifies the data set variable name for the auxiliary link weights.","help":"WEIGHT2=*column*","type":"value"}]},{"name":"TRANSITIVE_CLOSURE","aliases":["TRANSCL"],"description":"The TRANSITIVE_CLOSURE statement invokes an algorithm that calculates the transitive closure of an input graph.","help":"TRANSITIVE_CLOSURE &lt;*options*&gt;;    ","arguments":[{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information that is displayed in the SAS log. The default is the value that is specified in the LOGLEVEL= option in the PROC OPTNET statement (or BASIC if that option is not specified).","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"specifies the output data set to contain the transitive closure results.","help":"OUT=*SAS-data-set*","type":"dataSet"}]},{"name":"TSP","description":"The TSP statement invokes an algorithm that solves the traveling salesman problem. The algorithm that is used to solve this problem is built around the same branch-and-cut method as is used in PROC OPTMILP.","help":"TSP &lt;*options*&gt;;    ","arguments":[{"name":"ABSOBJGAP=","optional":true,"description":"specifies a stopping criterion. When the absolute difference between the best integer objective and the objective of the best remaining branch-and-bound node becomes less than the value of number, the solver stops. The value of number can be any nonnegative number; the default value is 1E–6.","help":"ABSOBJGAP=*number*","type":"value"},{"name":"CONFLICTSEARCH=","optional":true,"description":"specifies the level of conflict search that PROC OPTNET performs. The solver performs a conflict search to find clauses that result from infeasible subproblems that arise in the search tree. By default, CONFLICTSEARCH=AUTOMATIC.","help":"CONFLICTSEARCH=AUTOMATIC | NONE | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"AUTOMATIC","aliases":["-1"],"description":"performs a conflict search based on a strategy that is determined by PROC OPTNET","type":"standalone"},{"name":"NONE","aliases":["0"],"description":"disables conflict search","type":"standalone"},{"name":"MODERATE","aliases":["1"],"description":"performs a moderate conflict search","type":"standalone"},{"name":"AGGRESSIVE","aliases":["2"],"description":"performs an aggressive conflict search","type":"standalone"}]},{"name":"CUTOFF=","optional":true,"description":"cuts off any branch-and-bound nodes in a minimization problem that has an objective value that is greater than number. The value of number can be any number; the default value is the positive number that has the largest absolute value that can be represented in your operating environment.","help":"CUTOFF=*number*","type":"value"},{"name":"CUTSTRATEGY=","optional":true,"description":"specifies the level of mixed integer linear programming cutting planes to be generated by PROC OPTNET. TSP-specific cutting planes are always generated. By default, CUTSTRATEGY=NONE.","help":"CUTSTRATEGY=AUTOMATIC | NONE | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"AUTOMATIC","aliases":["-1"],"description":"generates cutting planes based on a strategy determined by the mixed integer linear programming solver","type":"standalone"},{"name":"NONE","aliases":["0"],"description":"disables generation of mixed integer linear programming cutting planes (some TSP-specific cutting planes are still active for validity)","type":"standalone"},{"name":"MODERATE","aliases":["1"],"description":"uses a moderate cut strategy","type":"standalone"},{"name":"AGGRESSIVE","aliases":["2"],"description":"uses an aggressive cut strategy","type":"standalone"}]},{"name":"EMPHASIS=","optional":true,"description":"specifies a search emphasis option. By default, EMPHASIS=BALANCE.","help":"EMPHASIS=BALANCE | OPTIMAL | FEASIBLE","type":"choice","arguments":[{"name":"BALANCE","aliases":["0"],"description":"performs a balanced search","type":"standalone"},{"name":"OPTIMAL","aliases":["1"],"description":"emphasizes optimality over feasibility","type":"standalone"},{"name":"FEASIBLE","aliases":["2"],"description":"emphasizes feasibility over optimality","type":"standalone"}]},{"name":"HEURISTICS=","optional":true,"description":"controls the level of initial and primal heuristics that PROC OPTNET applies. By default, HEURISTICS=AUTOMATIC.","help":"HEURISTICS=AUTOMATIC | NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"AUTOMATIC","aliases":["-1"],"description":"applies the default level of heuristics","type":"standalone"},{"name":"NONE","aliases":["0"],"description":"disables all initial and primal heuristics","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"applies basic intial and primal heuristics at low frequency","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"applies most intial and primal heuristics at moderate frequency","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"applies all intitial primal heuristics at high frequency","type":"standalone"}]},{"name":"LOGFREQ=","optional":true,"description":"specifies how often to print information in the branch-and-bound node log. The value of number can be any nonnegative integer up to the largest four-byte signed integer, which is 2³¹ - 1. The default value is 100.","help":"LOGFREQ=*number*","type":"value"},{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information displayed in the SAS log by the solver, from a short description of presolve information and summary to details at each branch-and-bound node. The default value is MODERATE.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"turns off all solver-related messages in the SAS log","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"displays a solver summary after stopping","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"prints a solver summary and a node log by using the interval that is specified in the LOGFREQ= option","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"prints a detailed solver summary and a node log by using the interval that is specified in the LOGFREQ= option","type":"standalone"}]},{"name":"MAXNODES=","optional":true,"description":"specifies the maximum number of branch-and-bound nodes to be processed. The value of number can be any nonnegative integer up to the largest four-byte signed integer. The default value is 2³¹ - 1.","help":"MAXNODES=*number*","type":"value"},{"name":"MAXSOLS=","optional":true,"description":"specifies a stopping criterion. If number solutions have been found, then the procedure stops. The value of number can be any positive integer up to the largest four-byte signed integer. The default value is 2³¹ - 1.","help":"MAXSOLS=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"specifies the maximum amount of time to spend solving the traveling salesman problem. The type of time (either CPU time or real time) is determined by the value of the TIMETYPE= option. The value of number can be any positive number; the default value is the positive number that has the largest absolute value that can be represented in your operating environment.","help":"MAXTIME=*number*","type":"value"},{"name":"MILP=","optional":true,"description":"specifies whether to use a mixed integer linear programming (MILP) solver for solving the traveling salesman problem. The MILP solver attempts to find the overall best TSP tour by using a branch-and-bound based algorithm. By default, MILP=ON.","help":"MILP=ON | OFF","type":"choice","arguments":[{"name":"ON","description":"uses a mixed integer linear programming solver","type":"standalone"},{"name":"OFF","description":"does not use a mixed-integer linear programming solver","type":"standalone"}]},{"name":"NODESEL=","optional":true,"description":"specifies the branch-and-bound node selection strategy option. By default, NODESEL=AUTOMATIC.","help":"NODESEL=AUTOMATIC | BESTBOUND | BESTESTIMATE | DEPTH","type":"choice","arguments":[{"name":"AUTOMATIC","aliases":["-1"],"description":"Uses automatic node selection","type":"standalone"},{"name":"BESTBOUND","aliases":["0"],"description":"chooses the node with the best relaxed objective (best-bound-first strategy)","type":"standalone"},{"name":"BESTESTIMATE","aliases":["1"],"description":"chooses the node with the best estimate of the integer objective value (best-estimate-first strategy)","type":"standalone"},{"name":"DEPTH","aliases":["2"],"description":"chooses the most recently created node (depth-first strategy)","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"specifies the output data set to contain the solution to the traveling salesman problem.","help":"OUT=*SAS-data-set*","type":"dataSet"},{"name":"PROBE=","optional":true,"description":"specifies a probing option. By default, PROBE=NONE.","help":"PROBE=AUTOMATIC | NONE | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"AUTOMATIC","aliases":["-1"],"description":"uses an automatic probing strategy","type":"standalone"},{"name":"NONE","aliases":["0"],"description":"disables probing","type":"standalone"},{"name":"MODERATE","aliases":["1"],"description":"uses the probing moderately","type":"standalone"},{"name":"AGGRESSIVE","aliases":["2"],"description":"uses the probing aggressively","type":"standalone"}]},{"name":"RELOBJGAP=","optional":true,"description":"specifies a stopping criterion that is based on the best integer objective (BestInteger) and the objective of the best remaining node (BestBound). By default, RELOBJGAP=1E–4.","help":"RELOBJGAP=*number*","type":"value"},{"name":"STRONGITER=","optional":true,"description":"specifies the number of simplex iterations that PROC OPTNET performs for each variable in the candidate list when it uses the strong branching variable selection strategy. If you specify the keyword AUTOMATIC or the value –1, PROC OPTNET uses the default value, which it calculates automatically.","help":"STRONGITER=*number* | AUTOMATIC","type":"choice","arguments":[{"name":"number","placeholder":true,"type":"value"},{"name":"AUTOMATIC","type":"standalone"}]},{"name":"STRONGLEN=","optional":true,"description":"specifies the number of candidates that PROC OPTNET considers when it uses the strong branching variable selection strategy. If you specify the keyword AUTOMATIC or the value –1, PROC OPTNET uses the default value, which it calculates automatically.","help":"STRONGLEN=*number* | AUTOMATIC","type":"choice","arguments":[{"name":"number","placeholder":true,"type":"value"},{"name":"AUTOMATIC","type":"standalone"}]},{"name":"TARGET=","optional":true,"description":"specifies a stopping criterion for minimization problems. The value of number can be any number; the default is the negative number that has the largest absolute value that can be represented in your operating environment.","help":"TARGET=*number*","type":"value"},{"name":"VARSEL=","optional":true,"description":"specifies the rule for selecting the branching variable. By default, VARSEL=AUTOMATIC.","help":"VARSEL=AUTOMATIC |  MAXINFEAS | MININFEAS | PSEUDO | STRONG","type":"choice","arguments":[{"name":"AUTOMATIC","aliases":["-1"],"description":"uses automatic branching variable selection","type":"standalone"},{"name":"MAXINFEAS","aliases":["0"],"description":"chooses the variable with maximum infeasibility","help":" MAXINFEAS","type":"standalone"},{"name":"MININFEAS","aliases":["1"],"description":"chooses the variable with minimum infeasibility","type":"standalone"},{"name":"PESUDO","aliases":["2"],"description":"chooses a branching variable based on pseudocost","type":"standalone"},{"name":"STRONG","aliases":["3"],"description":"uses strong branching variable selection strategy","type":"standalone"}]}]}],"supportSiteInformation":{"docsetId":"ornoaug","docsetVersion":"v_001","docsetTargetFile":"ornoaug_optnet_toc.htm"}}