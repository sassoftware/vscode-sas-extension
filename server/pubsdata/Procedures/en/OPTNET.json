{"name":"OPTNET","statements":[{"name":"PROC OPTNET","description":"You can use the OPTNET procedure to analyze relationships between entities. These relationships are typically defined by using a graph. A graph G = (N,A) is defined over a set N of nodes and a set A of arcs. A node is an abstract representation of some entity (or object), and an arc defines some relationship (or connection) between two nodes. The terms node and vertex are often interchanged in describing an entity. The term arc is often interchanged with the term edge or link when describing a connection.","help":"PROC OPTNET <DATA_LINKS=SAS-data-set | LINKS=SAS-data-set><DATA_MATRIX=SAS-data-set | MATRIX=SAS-data-set><DATA_NODES=SAS-data-set | NODES=SAS-data-set><DATA_NODES_SUB=SAS-data-set | NODES_SUB=SAS-data-set><GRAPH_DIRECTION=DIRECTED | UNDIRECTED><GRAPH_INTERNAL_FORMAT=THIN | FULL><INCLUDE_SELFLINK><LOGLEVEL=NONE | BASIC | MODERATE... ><OUT_LINKS=SAS-data-set><OUT_NODES=SAS-data-set><STANDARDIZED_LABELS><TIMETYPE=CPU | REAL>;     \n\tBICONCOMP <LOGLEVEL=<NONE | BASIC | MODERATE>... > ;\n\tCLIQUE <LOGLEVEL=<NONE | BASIC | MODERATE>... ><MAXCLIQUES=number | ALL><MAXTIME=number> ...;\n\tCONCOMP <ALGORITHM=<DFS | UNION_FIND>><LOGLEVEL=<NONE | BASIC | MODERATE>... > ;\n\tCYCLE <LOGLEVEL=<NONE | BASIC | MODERATE>... ><MAXCYCLES=number><MAXLENGTH=number> ...;\n\tDATA_LINKS_VAR <FROM=column><LOWER=column><TO=column> ...;\n\tDATA_MATRIX_VAR column1 <,column2,...> ;\n\tDATA_NODES_VAR <NODE=column><WEIGHT2=column><WEIGHT=column> ...;\n\tLINEAR_ASSIGNMENT <ID=(column1 <,column2,...>)><LOGLEVEL=<NONE | BASIC | MODERATE>... ><OUT=SAS-data-set> ...;\n\tMINCOSTFLOW <LOGFREQ=number><LOGLEVEL=<NONE | BASIC | MODERATE>... ><MAXTIME=number> ...;\n\tMINCUT <LOGLEVEL=<NONE | BASIC | MODERATE>... ><MAXNUMCUTS=num><MAXWEIGHT=num> ...;\n\tMINSPANTREE <LOGLEVEL=<NONE|0 | BASIC|1 | MODERATE|2>... ><OUT=SAS-data-set> ;\n\tPERFORMANCE <DETAILS><NTHREADS=number | CPUCOUNT> ;\n\tSHORTPATH <LOGFREQ=number><LOGLEVEL=<NONE | BASIC | MODERATE>... ><OUT_PATHS | OUT==SAS-data-set> ...;\n\tTRANSITIVE_CLOSURE <LOGLEVEL=<NONE | BASIC | MODERATE>... ><OUT=SAS-data-set> ;\n\tTSP <ABSOBJGAP=num><CONFLICTSEARCH=<AUTOMATIC | NONE | MODERATE>... ><CUTOFF=number> ...;","arguments":[{"name":"DATA_LINKS=","optional":true,"aliases":["LINKS="],"description":"Specifies the input data set that contains the graph link information, where the links are defined as a list.","type":"value"},{"name":"DATA_MATRIX=","optional":true,"aliases":["MATRIX="],"description":"Specifies the input data set that contains the matrix to be processed. This is a generic matrix (as opposed to an adjacency matrix which defines an underlying graph).","type":"value"},{"name":"DATA_NODES=","optional":true,"aliases":["NODES="],"description":"Specifies the input data set that contains the graph node information.","type":"value"},{"name":"DATA_NODES_SUB=","optional":true,"aliases":["NODES_SUB="],"description":"Specifies the input data set that contains the graph node subset information.","type":"value"},{"name":"GRAPH_DIRECTION=","optional":true,"aliases":["DIRECTION="],"description":"Specifies whether the input graph should be considered directed or undirected.","help":"GRAPH_DIRECTION=DIRECTED | UNDIRECTED","type":"choice","arguments":[{"name":"DIRECTED","description":"Specifies the graph as directed.","type":"standalone"},{"name":"UNDIRECTED","description":"Specifies the graph as undirected.","type":"standalone"}]},{"name":"GRAPH_INTERNAL_FORMAT=","optional":true,"aliases":["INTERNAL_FORMAT="],"description":"Syntax: GRAPH_INTERNAL_FORMAT=THIN | FULL INTERNAL_FORMAT=THIN | FULL","help":"GRAPH_INTERNAL_FORMAT=THIN | FULL","type":"choice","arguments":[{"name":"THIN","description":"Stores the graph in thin format. This option can improve performance in some cases both by reducing memory and by simplifying the construction of the internal data structures. The thin format causes PROC OPTNET to skip the removal of duplicate links when it reads in the graph. So this option should be used with caution. For some algorithms, the thin format is not allowed and this option is ignored. The THIN option can often be helpful when you do calculations that are decomposed by subgraph.","type":"standalone"},{"name":"FULL","description":"Stores the graph in standard (full) format. This is the default.","type":"standalone"}]},{"name":"INCLUDE_SELFLINK","optional":true,"description":"Includes self links—for example, (i,i)—when an input graph is read. By default, when PROC OPTNET reads the DATA_LINKS= data set, it removes all self links.","type":"standalone"},{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information that is displayed in the SAS log. Each algorithm has its own specific log level. This setting sets the log level for all algorithms except those for which you specify the LOGLEVEL= option in the algorithm statement.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"Turns off all procedure-related messages in the SAS log","type":"standalone"},{"name":"BASIC","description":"Displays a basic summary of the input, output, and algorithmic processing","type":"standalone"},{"name":"MODERATE","description":"Displays a summary of the input, output, and algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","description":"Displays a detailed summary of the input, output, and algorithmic processing","type":"standalone"}]},{"name":"OUT_LINKS=","optional":true,"description":"Specifies the output data set to contain the graph link information along with any results from the various algorithms that calculate metrics on links.","help":"OUT_LINKS=*SAS-data-set*","type":"dataSet"},{"name":"OUT_NODES=","optional":true,"description":"Specifies the output data set to contain the graph node information along with any results from the various algorithms that calculate metrics on nodes.","help":"OUT_NODES=*SAS-data-set*","type":"dataSet"},{"name":"STANDARDIZED_LABELS","optional":true,"description":"Specifies that the input graph data are in a standardized format.","type":"standalone"},{"name":"TIMETYPE=","optional":true,"description":"Specifies whether CPU time or real time is used for each algorithm’s MAXTIME= option (where applicable).","help":"TIMETYPE=CPU | REAL","type":"choice","arguments":[{"name":"CPU","description":"Specifies units of CPU time.","type":"standalone"},{"name":"REAL","description":"Specifies units of real time.","type":"standalone"}]}]},{"name":"BICONCOMP","description":"The BICONCOMP statement requests that PROC OPTNET find biconnected components and articulation points of an undirected input graph.","help":"BICONCOMP &lt;LOGLEVEL=&lt;NONE | BASIC | MODERATE&gt;... &gt;","arguments":[{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information that is displayed in the SAS log.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"Turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","description":"Displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","description":"Displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","description":"Displays a detailed summary of the algorithmic processing","type":"standalone"}]}]},{"name":"CLIQUE","description":"The CLIQUE statement invokes an algorithm that finds maximal cliques in the input graph.","help":"CLIQUE &lt;LOGLEVEL=&lt;NONE | BASIC | MODERATE&gt;... &gt;&lt;MAXCLIQUES=number | ALL&gt;&lt;MAXTIME=number&gt; ...","arguments":[{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information that is displayed in the SAS log.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"Turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","description":"Displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","description":"Displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","description":"Displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"MAXCLIQUES=","optional":true,"description":"Specifies the maximum number of cliques to return during clique enumeration. You can specify either a number (which can be any 32-bit integer greater than or equal to 1) or ALL (which represents the maximum that can be represented by a 32-bit integer). By default, MAXCLIQUES=1.","type":"value"},{"name":"MAXTIME=","optional":true,"description":"Specifies the maximum amount of time to spend finding cliques. The type of time (either CPU time or real time) is determined by the value of the TIMETYPE= option in the PROC OPTNETWORK statement. The default is the largest number that can be represented by a double.","help":"MAXTIME=*number*","type":"value"},{"name":"OUT=","optional":true,"description":"Specifies the output data table to contain the maximal cliques. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"OUT=*CAS-libref.data-table*","type":"dataSet"}]},{"name":"CONCOMP","description":"The CONCOMP statement invokes an algorithm that finds the connected components of the input graph.","help":"CONCOMP &lt;ALGORITHM=&lt;DFS | UNION_FIND&gt;&gt;&lt;LOGLEVEL=&lt;NONE | BASIC | MODERATE&gt;... &gt;","arguments":[{"name":"ALGORITHM=","optional":true,"description":"Specifies the algorithm to use for calculating connected components.","help":"ALGORITHM=DFS | UNION_FIND","type":"choice","arguments":[{"name":"DFS","description":"Uses the depth-first search algorithm for connected components. This value cannot be used when you specify GRAPH_INTERNAL_FORMAT=THIN in the PROC OPTNET statement.","type":"standalone"},{"name":"UNION_FIND","description":"Uses the union-find algorithm for connected components. You can specify this value with either the THIN or FULL value for the GRAPH_INTERNAL_FORMAT option in the PROC OPTNET statement. This value can be faster than DFS when used with GRAPH_INTERNAL_FORMAT=THIN; however, you can use it only with undirected graphs.","type":"standalone"}]},{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information that is displayed in the SAS log.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"Turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","description":"Displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","description":"Displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","description":"Displays a detailed summary of the algorithmic processing","type":"standalone"}]}]},{"name":"CYCLE","description":"The CYCLE statement invokes an algorithm that finds the cycles (or the existence of a cycle) in the input graph.","help":"CYCLE &lt;LOGLEVEL=&lt;NONE | BASIC | MODERATE&gt;... &gt;&lt;MAXCYCLES=number&gt;&lt;MAXLENGTH=number&gt; ...","arguments":[{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information that is displayed in the SAS log.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"Turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","description":"Displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","description":"Displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","description":"Displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"MAXCYCLES=","optional":true,"description":"Specifies the maximum number of cycles to return. The default is the positive number that has the largest absolute value representable in your operating environment. This option works only when you also specify MODE=ALL_CYCLES.","help":"MAXCYCLES=*number*","type":"value"},{"name":"MAXLENGTH=","optional":true,"description":"Specifies the maximum number of links to allow in a cycle. Any cycle whose length is greater than number is removed from the results. The default is the positive number that has the largest absolute value that can be represented in your operating environment. By default, nothing is removed from the results. This option works only when you also specify MODE=ALL_CYCLES.","help":"MAXLENGTH=*number*","type":"value"},{"name":"MAXLINKWEIGHT=","optional":true,"description":"Specifies the maximum sum of link weights to allow in a cycle. Any cycle whose sum of link weights is greater than number is removed from the results. The default is the positive number that has the largest absolute value that can be represented in your operating environment. By default, nothing is filtered. This option works only when you also specify MODE=ALL_CYCLES.","help":"MAXLINKWEIGHT=*number*","type":"value"},{"name":"MAXNODEWEIGHT=","optional":true,"description":"Specifies the maximum sum of node weights to allow in a cycle. Any cycle whose sum of node weights is greater than number is removed from the results. The default is the positive number that has the largest absolute value that can be represented in your operating environment. By default, nothing is filtered. This option works only when you also specify MODE=ALL_CYCLES.","help":"MAXNODEWEIGHT=*number*","type":"value"},{"name":"MAXTIME","optional":true,"description":"Specifies the maximum amount of time to spend finding cycles. The type of time (either CPU time or real time) is determined by the value of the TIMETYPE= option. The value of number can be any positive number; the default value is the positive number that has the largest absolute value that can be represented in your operating environment. This option works only when you also specify MODE=ALL_CYCLES.","type":"standalone"},{"name":"MINLENGTH=","optional":true,"description":"Specifies the maximum amount of time to spend finding cycles. The type of time (either CPU time or real time) is determined by the value of the TIMETYPE= option. The value of number can be any positive number; the default value is the positive number that has the largest absolute value that can be represented in your operating environment. This option works only when you also specify MODE=ALL_CYCLES.","help":"MINLENGTH=*number*","type":"value"},{"name":"MINLINKWEIGHT=","optional":true,"description":"Specifies the minimum sum of link weights to allow in a cycle. Any cycle whose sum of link weights is less than number is removed from the results. The default is the negative number that has the largest absolute value that can be represented in your operating environment. By default, nothing is filtered. This option works only when you also specify MODE=ALL_CYCLES.","help":"MINLINKWEIGHT=*number*","type":"value"},{"name":"MINNODEWEIGHT=","optional":true,"description":"Specifies the minimum sum of node weights to allow in a cycle. Any cycle whose sum of node weights is less than number is removed from the results. The default is the negative number that has the largest absolute value that can be represented in your operating environment. By default, nothing is filtered. This option works only when you also specify MODE=ALL_CYCLES.","help":"MINNODEWEIGHT=*number*","type":"value"},{"name":"MODE=","optional":true,"description":"Specifies the mode for processing cycles.","help":"MODE=ALL_CYCLES | FIRST_CYCLE*option*","type":"value","arguments":[{"name":"ALL_CYCLES","description":"Returns all (unique, elementary) cycles found.","type":"standalone"},{"name":"FIRST_CYCLE","description":"Returns the first cycle found.","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"Specifies the output data set to contain the cycles found.","help":"OUT=*SAS-data-set*","type":"dataSet"}]},{"name":"DATA_LINKS_VAR","aliases":["LINKS_VAR"],"description":"LINKS_VAR < options > ; The DATA_LINKS_VAR statement enables you to explicitly define the data set variable names for PROC OPTNET to use when it reads the data set that is specified in the DATA_LINKS= option in the PROC OPTNET statement.","help":"DATA_LINKS_VAR &lt;FROM=column&gt;&lt;LOWER=column&gt;&lt;TO=column&gt; ...","arguments":[{"name":"FROM=","optional":true,"description":"Specifies the data set variable name for from nodes. The value of column can be numeric or character.","help":"FROM=*column*","type":"value"},{"name":"LOWER=","optional":true,"description":"Specifies the data set variable name for link flow lower bounds. The value of column must be numeric.","help":"LOWER=*column*","type":"value"},{"name":"TO=","optional":true,"description":"Specifies the data set variable name for to node. The value of column can be numeric or character.","help":"TO=*column*","type":"value"},{"name":"UPPER=","optional":true,"description":"Specifies the data set variable name for link flow upper bounds. The value of column must be numeric.","help":"UPPER=*column*","type":"value"},{"name":"WEIGHT=","optional":true,"description":"Specifies the data set variable name for link weights. The value of column must be numeric.","help":"WEIGHT=*column*","type":"value"}]},{"name":"DATA_MATRIX_VAR","aliases":["MATRIX_VAR"],"description":"MATRIX_VAR column1 <,column2,...> ; The DATA_MATRIX_VAR statement enables you to explicitly define the data set variable names for PROC OPTNET to use when it reads the data set that is specified in the DATA_MATRIX= option in the PROC OPTNET statement. The format of the matrix input data set is defined in the section Matrix Input Data. The value of each column variable must be numeric.","help":"DATA_MATRIX_VAR column1 &lt;,column2,...&gt; "},{"name":"DATA_NODES_VAR","aliases":["NODES_VAR"],"description":"NODES_VAR < options > ; The DATA_NODES_VAR statement enables you to explicitly define the data set variable names for PROC OPTNET to use when it reads the data set that is specified in the DATA_NODES= option in the PROC OPTNET statement.","help":"DATA_NODES_VAR &lt;NODE=column&gt;&lt;WEIGHT2=column&gt;&lt;WEIGHT=column&gt; ...","arguments":[{"name":"NODE=","optional":true,"description":"Specifies the data set variable name for the nodes. The value of column can be numeric or character.","help":"NODE=*column*","type":"value"},{"name":"WEIGHT2=","optional":true,"description":"Specifies the data set variable name for auxiliary node weights. The value of column must be numeric.","help":"WEIGHT2=*column*","type":"value"},{"name":"WEIGHT=","optional":true,"description":"Specifies the data set variable name for node weights. The value of column must be numeric.","help":"WEIGHT=*column*","type":"value"}]},{"name":"LINEAR_ASSIGNMENT","aliases":["LAP"],"description":"The LINEAR_ASSIGNMENT statement invokes an algorithm that solves the minimal-cost linear assignment problem. In graph terms, this problem is also known as the minimum link-weighted matching problem on a bipartite graph. The input data (the cost matrix) is typically defined in the input data set that is specified in the DATA_MATRIX= option in the PROC OPTNET statement. The data can also be defined as a directed graph by specifying the DATA_LINKS= option in the PROC OPTNET statement, where the costs are defined as link weights.","help":"LINEAR_ASSIGNMENT &lt;ID=(column1 &lt;,column2,...&gt;)&gt;&lt;LOGLEVEL=&lt;NONE | BASIC | MODERATE&gt;... &gt;&lt;OUT=SAS-data-set&gt; ...","arguments":[{"name":"ID=","optional":true,"description":"Specifies the data set variable names that identify the matrix rows (from nodes). The information in these columns is carried to the output data set that is specified in the OUT= option. The value of each column variable can be numeric or character.","type":"value"},{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information that is displayed in the SAS log.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"Turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","description":"Displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","description":"Displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","description":"Displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"Specifies the output data set to contain the solution to the linear assignment problem.","help":"OUT=*SAS-data-set*","type":"dataSet"},{"name":"WEIGHT=","optional":true,"description":"Specifies the data set variable names for the cost matrix. The value of each column variable must be numeric. If this option is not specified, the matrix is assumed to be defined by all of the numeric variables in the data set (excluding those specified in the ID= option).","type":"value"}]},{"name":"MINCOSTFLOW","aliases":["MCF"],"description":"The MINCOSTFLOW statement invokes an algorithm that solves the minimum-cost network flow problem on an input graph.","help":"MINCOSTFLOW &lt;LOGFREQ=number&gt;&lt;LOGLEVEL=&lt;NONE | BASIC | MODERATE&gt;... &gt;&lt;MAXTIME=number&gt; ...","arguments":[{"name":"LOGFREQ=","optional":true,"description":"Controls the frequency for displaying iteration logs for minimum-cost network flow calculations that use the network simplex algorithm. For graphs that contain one component, this option displays progress every number of simplex iterations; the default is 10,000. For graphs that contain multiple components, when you also specify LOGLEVEL=MODERATE, this option displays progress after processing every number of components; the default is based on the number of components. When you also specify LOGLEVEL=AGGRESSIVE, the simplex iteration log for each component is displayed with a frequency of number.","help":"LOGFREQ=*number*","type":"value"},{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information that is displayed in the SAS log.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"Turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","description":"Displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","description":"Displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","description":"Displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"MAXTIME=","optional":true,"description":"Specifies the maximum amount of time to spend calculating minimum-cost network flows. The type of time (either CPU time or real time) is determined by the value of the TIMETYPE= option in the PROC OPTNETWORK statement. The default is the largest number that can be represented by a double.","help":"MAXTIME=*number*","type":"value"}]},{"name":"MINCUT","description":"The MINCUT statement invokes an algorithm that finds the minimum link-weighted cut of an input graph.","help":"MINCUT &lt;LOGLEVEL=&lt;NONE | BASIC | MODERATE&gt;... &gt;&lt;MAXNUMCUTS=num&gt;&lt;MAXWEIGHT=num&gt; ...","arguments":[{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information that is displayed in the SAS log.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"Turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","description":"Displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","description":"Displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","description":"Displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"MAXNUMCUTS=","optional":true,"description":"Specifies the maximum number of cuts to return from the algorithm. The minimal cut and any others found during the search, up to num, are returned. The default is 1.","help":"MAXNUMCUTS=*num*","type":"value"},{"name":"MAXWEIGHT=","optional":true,"description":"Specifies the maximum weight of the cuts to return from the algorithm. Only cuts that have weight less than or equal to num are returned. The default is the positive number that has the largest absolute value representable in your operating environment.","help":"MAXWEIGHT=*num*","type":"value"},{"name":"OUT=","optional":true,"description":"Specifies the output data set to contain the solution to the minimum cut problem.","help":"OUT=*SAS-data-set*","type":"dataSet"}]},{"name":"MINSPANTREE","aliases":["MST"],"description":"The MINSPANTREE statement invokes an algorithm that solves the minimum link-weighted spanning tree problem on an input graph.","help":"MINSPANTREE &lt;LOGLEVEL=&lt;NONE|0 | BASIC|1 | MODERATE|2&gt;... &gt;&lt;OUT=SAS-data-set&gt;","arguments":[{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information that is displayed in the SAS log.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","aliases":["0"],"description":"Turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","aliases":["1"],"description":"Displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","aliases":["2"],"description":"Displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","aliases":["3"],"description":"Displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"Specifies the output data set to contain the solution to the minimum link-weighted spanning tree problem.","help":"OUT=*SAS-data-set*","type":"dataSet"}]},{"name":"PERFORMANCE","description":"The PERFORMANCE statement specifies performance options for multithreaded computing and requests detailed results about the performance characteristics of the OPTNET procedure.","help":"PERFORMANCE &lt;DETAILS&gt;&lt;NTHREADS=number | CPUCOUNT&gt;","arguments":[{"name":"DETAILS","optional":true,"description":"Requests that PROC OPTNET produce the Timing ODS table, which shows a breakdown of the time used in each step of the procedure.","type":"standalone"},{"name":"NTHREADS=","optional":true,"description":"Specifies the number of threads that PROC OPTNET can use. This option overrides the SAS system option THREADS | NOTHREADS. The value of number can be any integer between 1 and 256, inclusive. The default value is CPUCOUNT, which sets the thread count to the number determined by the SAS system option CPUCOUNT=.","type":"value"}]},{"name":"SHORTPATH","description":"The SHORTPATH statement invokes an algorithm that calculates shortest paths between sets of nodes on the input graph.","help":"SHORTPATH &lt;LOGFREQ=number&gt;&lt;LOGLEVEL=&lt;NONE | BASIC | MODERATE&gt;... &gt;&lt;OUT_PATHS | OUT==SAS-data-set&gt; ...","arguments":[{"name":"LOGFREQ=","optional":true,"description":"Displays iteration logs for shortest path calculations every number nodes. The value of number can be any integer greater than or equal to 1. The default is determined automatically based on the size of the graph. Setting this value too low can hurt performance on large-scale graphs.","help":"LOGFREQ=*number*","type":"value"},{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information that is displayed in the SAS log.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"Turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","description":"Displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","description":"Displays a summary of the algorithmic processing including a progress log using the interval dictated by the LOGFREQ option","type":"standalone"},{"name":"AGGRESSIVE","description":"Displays a detailed summary of the algorithmic processing including a progress log using the interval dictated by the LOGFREQ option","type":"standalone"}]},{"name":"OUT_PATHS=","optional":true,"aliases":["OUT="],"description":"Specifies the output data set to contain the shortest paths.","type":"value"},{"name":"OUT_WEIGHTS=","optional":true,"description":"Specifies the output data set to contain the shortest path summaries.","help":"OUT_WEIGHTS=*SAS-data-set*","type":"dataSet"},{"name":"PATHS=","optional":true,"description":"Specifies the type of output to produce in the output data set that is specified in the OUT_PATHS= option.","help":"PATHS=ALL | SHORTEST | LONGEST","type":"choice","arguments":[{"name":"ALL","description":"Outputs shortest paths for all pairs of source-sinks. This is the default.","type":"standalone"},{"name":"SHORTEST","description":"Outputs shortest paths for the source-sink pair with the longest (finite) length. If other source-sink pairs (up to 100) have equally long length, they are also output.","type":"standalone"},{"name":"LONGEST","description":"Outputs shortest paths for the source-sink pair with the shortest length. If other source-sink pairs (up to 100) have equally short length, they are also output.","type":"standalone"}]},{"name":"SINK=","optional":true,"description":"Specifies the sink node for shortest paths calculations. This setting overrides the use of the variable sink in the data set that is specified by the DATA_NODES_SUB= option in the PROC OPTNET statement.","help":"SINK=*sink-node*","type":"value"},{"name":"SOURCE=","optional":true,"description":"Specifies the source node for shortest paths calculations. This setting overrides the use of the variable source in the data set that is specified by the DATA_NODES_SUB= option in the PROC OPTNET statement.","help":"SOURCE=*source-node*","type":"value"},{"name":"USEWEIGHT=","optional":true,"description":"Specifies whether to use link weights (if they exist) in calculating shortest paths.","help":"USEWEIGHT=YES | NO","type":"choice","arguments":[{"name":"YES","description":"Uses weights (if they exist) in shortest path calculations. This is the default.","type":"standalone"},{"name":"NO","description":"Does not use weights in shortest path calculations.","type":"standalone"}]},{"name":"WEIGHT2=","optional":true,"description":"Specifies the data set variable name for the auxiliary link weights. The value of column must be numeric.","help":"WEIGHT2=*column*","type":"value"}]},{"name":"TRANSITIVE_CLOSURE","aliases":["TRANSCL"],"description":"The TRANSITIVE_CLOSURE statement invokes an algorithm that calculates the transitive closure of an input graph.","help":"TRANSITIVE_CLOSURE &lt;LOGLEVEL=&lt;NONE | BASIC | MODERATE&gt;... &gt;&lt;OUT=SAS-data-set&gt;","arguments":[{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information that is displayed in the SAS log.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"Turns off all algorithm-related messages in the SAS log","type":"standalone"},{"name":"BASIC","description":"Displays a basic summary of the algorithmic processing","type":"standalone"},{"name":"MODERATE","description":"Displays a summary of the algorithmic processing","type":"standalone"},{"name":"AGGRESSIVE","description":"Displays a detailed summary of the algorithmic processing","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"Specifies the output data set to contain the transitive closure results.","help":"OUT=*SAS-data-set*","type":"dataSet"}]},{"name":"TSP","description":"The TSP statement invokes an algorithm that solves the traveling salesman problem. The traveling salesman problem is described in the section Traveling Salesman Problem. The algorithm that is used to solve this problem is built around the same method as is used in PROC OPTMILP: a branch-and-cut algorithm.","help":"TSP &lt;ABSOBJGAP=num&gt;&lt;CONFLICTSEARCH=&lt;AUTOMATIC | NONE | MODERATE&gt;... &gt;&lt;CUTOFF=number&gt; ...","arguments":[{"name":"ABSOBJGAP=","optional":true,"description":"Specifies a stopping criterion. When the absolute difference between the best integer objective and the objective of the best remaining branch-and-bound node becomes less than the value of num, the procedure stops. The value of num can be any nonnegative number; the default value is 1E–6.","help":"ABSOBJGAP=*num*","type":"value"},{"name":"CONFLICTSEARCH=","optional":true,"description":"Specifies the level of conflict search that PROC OPTNET performs.","help":"CONFLICTSEARCH=AUTOMATIC | NONE | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"AUTOMATIC","description":"Performs conflict search based on a strategy determined by PROC OPTNET","type":"standalone"},{"name":"NONE","description":"Disables conflict search","type":"standalone"},{"name":"MODERATE","description":"Performs a moderate conflict search","type":"standalone"},{"name":"AGGRESSIVE","description":"Performs an aggressive conflict search","type":"standalone"}]},{"name":"CUTOFF=","optional":true,"description":"Cuts off any branch-and-bound nodes in a minimization problem with an objective value that is greater than num. The value of num can be any number; the default value is the positive number that has the largest absolute value that can be represented in your operating environment.","help":"CUTOFF=*number*","type":"value"},{"name":"CUTSTRATEGY=","optional":true,"description":"Specifies the level of mixed integer linear programming cutting planes to be generated by PROC OPTNET. TSP-specific cutting planes are always generated.","help":"CUTSTRATEGY=AUTOMATIC | NONE | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"AUTOMATIC","description":"Generates cutting planes based on a strategy determined by the mixed integer linear programming solver","type":"standalone"},{"name":"NONE","description":"Disables generation of mixed integer linear programming cutting planes (some TSP-specific cutting planes are still active for validity)","type":"standalone"},{"name":"MODERATE","description":"Uses a moderate cut strategy","type":"standalone"},{"name":"AGGRESSIVE","description":"Uses an aggressive cut strategy","type":"standalone"}]},{"name":"EMPHASIS=","optional":true,"description":"Specifies a search emphasis option.","help":"EMPHASIS=BALANCE | OPTIMAL | FEASIBLE","type":"choice","arguments":[{"name":"BALANCE","description":"Performs a balanced search.","type":"standalone"},{"name":"OPTIMAL","description":"Emphasizes optimality over feasibility.","type":"standalone"},{"name":"FEASIBLE","description":"Emphasizes feasibility over optimality.","type":"standalone"}]},{"name":"HEURISTICS=","optional":true,"description":"Controls the level of initial and primal heuristics that PROC OPTNET applies.","help":"HEURISTICS=AUTOMATIC | NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"AUTOMATIC","description":"Applies the default level of heuristics","type":"standalone"},{"name":"NONE","description":"Disables all initial and primal heuristics","type":"standalone"},{"name":"BASIC","description":"Applies basic intial and primal heuristics at low frequency","type":"standalone"},{"name":"MODERATE","description":"Applies most intial and primal heuristics at moderate frequency","type":"standalone"},{"name":"AGGRESSIVE","description":"Applies all intitial primal heuristics at high frequency","type":"standalone"}]},{"name":"LOGFREQ=","optional":true,"description":"Specifies how often to print information in the branch-and-bound node log. The value of num can be any nonnegative integer up to the largest four-byte signed integer, which is 2³¹ - 1. The default value is 100. If num is set to 0, then the node log is disabled. If num is positive, then an entry is made in the node log at the first node, at the last node, and at intervals that are dictated by the value of num. An entry is also made each time a better integer solution is found.","help":"LOGFREQ=*num*","type":"value"},{"name":"LOGLEVEL=","optional":true,"description":"Controls the amount of information displayed in the SAS log by the solver, from a short description of presolve information and summary to details at each branch-and-bound node.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"Turns off all solver-related messages in the SAS log","type":"standalone"},{"name":"BASIC","description":"Displays a solver summary after stopping","type":"standalone"},{"name":"MODERATE","description":"Prints a solver summary and a node log by using the interval dictated by the LOGFREQ= option","type":"standalone"},{"name":"AGGRESSIVE","description":"Prints a detailed solver summary and a node log by using the interval dictated by the LOGFREQ= option","type":"standalone"}]},{"name":"MAXNODES=","optional":true,"description":"Specifies the maximum number of branch-and-bound nodes to be processed. The value of number can be any nonnegative integer up to the largest four-byte signed integer, which is 2³¹ - 1.","help":"MAXNODES=*number*","type":"value"},{"name":"MAXSOLS=","optional":true,"description":"Specifies a stopping criterion. If num solutions have been found, then the procedure stops. The value of num can be any positive integer up to the largest four-byte signed integer, which is 2³¹ - 1. The default value is 2³¹ - 1.","help":"MAXSOLS=*num*","type":"value"},{"name":"MAXTIME","optional":true,"description":"Specifies the maximum amount of time to spend solving the traveling salesman problem. The type of time (either CPU time or real time) is determined by the value of the TIMETYPE= option. The value of num can be any positive number; the default value is the positive number that has the largest absolute value that can be represented in your operating environment.","type":"standalone"},{"name":"MILP=","optional":true,"description":"Specifies whether to use a mixed-integer linear programming (MILP) solver for solving the traveling salesman problem. The MILP solver attempts to find the overall best TSP tour by using a branch-and-bound based algorithm. This algorithm can be expensive for large-scale problems. If MILP=OFF, then PROC OPTNET uses its initial heuristics to find a feasible, but not necessarily optimal, tour as quickly as possible.","help":"MILP=ON | OFF","type":"choice","arguments":[{"name":"ON","description":"Uses a mixed-integer linear programming","type":"standalone"},{"name":"OFF","description":"Does not use a mixed-integer linear programming solver","type":"standalone"}]},{"name":"NODESEL=","optional":true,"description":"Specifies the branch-and-bound node selection strategy option.","help":"NODESEL=AUTOMATIC | BESTBOUND | BESTESTIMATE | DEPTH","type":"choice","arguments":[{"name":"AUTOMATIC","description":"Uses automatic node select","type":"standalone"},{"name":"BESTBOUND","description":"Chooses the node with the best relaxed objective (best-bound-first strategy)","type":"standalone"},{"name":"BESTESTIMATE","description":"Chooses the node with the best estimate of the integer objective value (best-estimate-first strategy)","type":"standalone"},{"name":"DEPTH","description":"Chooses the most recently created node (depth-first strategy)","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"Specifies the output data set to contain the solution to the traveling salesman problem.","help":"OUT=*SAS-data-set*","type":"dataSet"},{"name":"PROBE=","optional":true,"description":"Specifies a probing option.","help":"PROBE=AUTOMATIC | NONE | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"AUTOMATIC","description":"Uses an automatic probing strategy","type":"standalone"},{"name":"NONE","description":"Disables probing","type":"standalone"},{"name":"MODERATE","description":"Uses the probing moderately","type":"standalone"},{"name":"AGGRESSIVE","description":"Uses the probing aggressively","type":"standalone"}]},{"name":"RELOBJGAP=","optional":true,"description":"Specifies a stopping criterion that is based on the best integer objective (BestInteger) and the objective of the best remaining node (BestBound).","help":"RELOBJGAP=*number*","type":"value"},{"name":"STRONGITER=","optional":true,"description":"Specifies the number of simplex iterations that PROC OPTNET performs for each variable in the candidate list when it uses the strong branching variable selection strategy. The value of number can be any positive integer up to the largest four-byte signed integer, which is 2³¹ - 1. If you specify the keyword AUTOMATIC or the value –1, PROC OPTNET uses the default value, which it calculates automatically.","type":"value"},{"name":"STRONGLEN=","optional":true,"description":"Specifies the number of candidates that PROC OPTNET considers when it uses the strong branching variable selection strategy. The value of number can be any positive integer up to the largest four-byte signed integer, which is 2³¹ - 1. If you specify the keyword AUTOMATIC or the value –1, PROC OPTNET uses the default value, which it calculates automatically.","type":"value"},{"name":"TARGET=","optional":true,"description":"Specifies a stopping criterion for minimization (maximization) problems. If the best integer objective is better than or equal to num, the procedure stops. The value of num can be any number; the default is the negative (positive) number that has the largest absolute value that can be represented in your operating environment.","help":"TARGET=*number*","type":"value"},{"name":"VARSEL=","optional":true,"description":"Specifies the rule for selecting the branching variable.","help":"VARSEL=AUTOMATIC |  MAXINFEAS | MININFEAS | PESUDO | STRONG","type":"choice","arguments":[{"name":"AUTOMATIC","description":"Uses automatic branching variable selection","type":"standalone"},{"name":"MAXINFEAS","description":"Chooses the variable with maximum infeasibility","help":" MAXINFEAS","type":"standalone"},{"name":"MININFEAS","description":"Chooses the variable with minimum infeasibility","type":"standalone"},{"name":"PESUDO","description":"Chooses a branching variable based on pseudocost","type":"standalone"},{"name":"STRONG","description":"Uses strong branching variable selection strategy","type":"standalone"}]}]}],"supportSiteInformation":{"docsetId":"ornoaug","docsetVersion":"v_001","docsetTargetFile":"ornoaug_optnet_toc.htm"}}