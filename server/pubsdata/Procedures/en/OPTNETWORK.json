{"name":"OPTNETWORK","statements":[{"name":"PROC OPTNETWORK","description":"The OPTNETWORK procedure includes a number of graph theory and network optimization algorithms that can augment more generic mathematical optimization approaches. Many practical applications of optimization depend on an underlying network.","help":"PROC OPTNETWORK <options>;\n\tBICONNECTEDCOMPONENTS <options>;    \n\tBY variables;    \n\tCLIQUE <options>;    \n\tCONNECTEDCOMPONENTS <options>;    \n\tCYCLE <options>;    \n\tDISPLAY <table-list></ options>;    \n\tDISPLAYOUT table-spec-list</ options>;    \n\tLINEARASSIGNMENT <options>;    \n\tLINKSVAR <options>;    \n\tLOADGRAPH ;    \n\tMAXFLOW <options>;    \n\tMINCOSTFLOW <options>;    \n\tMINCUT <options>;    \n\tMINSPANTREE <options>;    \n\tNODESSUBSETVAR <options>;    \n\tNODESVAR <options>;    \n\tPATH <options>;    \n\tSHORTESTPATH <options>;    \n\tSUMMARY <options>;    \n\tTOPOLOGICALSORT ;    \n\tTRANSITIVECLOSURE <option>;    \n\tTSP <options>;    \n\tUNLOADGRAPH ;    \n\tVRP <options>;    ","arguments":[{"name":"DETERMINISTIC=","optional":true,"description":"specifies whether to enforce determinism. By default, DETERMINISTIC=TRUE, which ensures that each invocation (with the same machine configuration and parameter settings) produces the same final result.","help":"DETERMINISTIC=TRUE |  FALSE","type":"choice","arguments":[{"name":"TRUE","type":"standalone"},{"name":"FALSE","type":"standalone"}]},{"name":"DIRECTION=","optional":true,"description":"specifies whether the input graph should be considered directed or undirected. By default, DIRECTION=UNDIRECTED.","help":"DIRECTION=DIRECTED | UNDIRECTED","type":"choice","arguments":[{"name":"DIRECTED","description":"considers the input graph to be directed.","type":"standalone"},{"name":"UNDIRECTED","description":"considers the input graph to be undirected.","type":"standalone"}]},{"name":"DISTRIBUTED=","optional":true,"description":"specifies whether to use a distributed graph. By default, DISTRIBUTED=FALSE, which means that a distributed graph is not used.","help":"DISTRIBUTED=TRUE |  FALSE","type":"choice","arguments":[{"name":"TRUE","type":"standalone"},{"name":"FALSE","type":"standalone"}]},{"name":"GRAPH=","optional":true,"description":"specifies the in-memory graph to use. This option can be used with any algorithm that supports in-memory execution.","help":"GRAPH=*number*","type":"value"},{"name":"INDEXOFFSET=","optional":true,"description":"specifies the index offset for identifiers in the log and results output data tables.","help":"INDEXOFFSET=*number*","type":"value"},{"name":"LINKS=","optional":true,"description":"specifies the input data table that contains the graph link information.","help":"LINKS=*libref.data-table*","type":"dataSet"},{"name":"LOGFREQUENCYTIME=","optional":true,"aliases":["LOGFREQTIME="],"description":"controls the frequency (in number of seconds) for displaying iteration logs for some algorithms, where number can be any integer greater than or equal to 1. By default, LOGFREQTIME=5.","help":"LOGFREQUENCYTIME=*number*","type":"value"},{"name":"LOGLEVEL=","optional":true,"description":"controls the amount of information that is displayed in the SAS log. By default, LOGLEVEL=BASIC.","help":"LOGLEVEL=NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"NONE","description":"turns off all procedure-related messages in the SAS log.","type":"standalone"},{"name":"BASIC","description":"displays a brief summary of the algorithmic processing.","type":"standalone"},{"name":"MODERATE","description":"displays a moderately detailed summary of the input, output, and algorithmic processing.","type":"standalone"},{"name":"AGGRESSIVE","description":"displays a more detailed summary of the input, output, and algorithmic processing.","type":"standalone"}]},{"name":"MULTILINKS=","optional":true,"description":"specifies whether to include or aggregate multilinks when an input graph (specified by the LINKS= or LINKSQUERY= option) is read. By default, MULTILINKS=TRUE for algorithms that support multilinks.","help":"MULTILINKS=TRUE |  FALSE","type":"choice","arguments":[{"name":"TRUE","description":"includes multilinks.","type":"standalone"},{"name":"FALSE","description":"aggregates multilinks.","type":"standalone"}]},{"name":"NODES=","optional":true,"description":"specifies the input data table that contains the graph node information.","help":"NODES=*libref.data-table*","type":"dataSet"},{"name":"NODESSUBSET=","optional":true,"description":"specifies the input data table that contains the graph node subset information.","help":"NODESSUBSET=*libref.data-table*","type":"dataSet"},{"name":"NTHREADS=","optional":true,"description":"specifies the maximum number of threads to use for multithreaded processing. Some of the algorithms can take advantage of multicore machines and can run faster when number is greater than 1.","help":"NTHREADS=*number*","type":"value"},{"name":"OUTGRAPHLIST=","optional":true,"description":"specifies the output data table to contain summary information about in-memory graphs.","help":"OUTGRAPHLIST=*libref.data-table*","type":"dataSet"},{"name":"OUTLINKS=","optional":true,"description":"specifies the output data table to contain the graph link information along with any results from the algorithms that calculate metrics on links.","help":"OUTLINKS=*libref.data-table*","type":"dataSet"},{"name":"OUTNODES=","optional":true,"description":"specifies the output data table to contain the graph node information along with any results from the algorithms that calculate metrics on nodes.","help":"OUTNODES=*libref.data-table*","type":"dataSet"},{"name":"SELFLINKS=","optional":true,"description":"specifies whether to include or remove self-links when an input graph (specified by the LINKS= or LINKSQUERY= option) is read. By default, SELFLINKS=TRUE for algorithms that support self-links.","help":"SELFLINKS=TRUE |  FALSE","type":"choice","arguments":[{"name":"TRUE","description":"includes self-links.","type":"standalone"},{"name":"FALSE","description":"removes self-links.","type":"standalone"}]},{"name":"STANDARDIZEDLABELS","optional":true,"description":"specifies that the input graph data are in a standardized format.","type":"standalone"},{"name":"STANDARDIZEDLABELSOUT","optional":true,"description":"specifies that the output graph data include standardized format.","type":"standalone"},{"name":"TIMETYPE=","optional":true,"description":"specifies whether CPU time or real time is used for each algorithmâ€™s MAXTIME= option (where applicable). By default, TIMETYPE=REAL.","help":"TIMETYPE=CPU | REAL","type":"choice","arguments":[{"name":"CPU","description":"specifies units of CPU time. The time restriction is applied per processing machine (not across all machines).","type":"standalone"},{"name":"REAL","description":"specifies units of real time.","type":"standalone"}]}]},{"name":"BICONNECTEDCOMPONENTS","description":"The BICONNECTEDCOMPONENTS statement requests that PROC NETWORK find biconnected components and articulation points of an undirected input graph.","help":"BICONNECTEDCOMPONENTS &lt;*options*&gt;;    ","arguments":[{"name":"OUT=","optional":true,"description":"specifies the output data table to contain the biconnected components summary results.","help":"OUT=*libref.data-table*","type":"dataSet"},{"name":"OUTBCTREELINKS=","optional":true,"description":"specifies the output data table to contain the links of the block-cut tree.","help":"OUTBCTREELINKS=*libref.data-table*","type":"dataSet"},{"name":"OUTBCTREENODES=","optional":true,"description":"specifies the output data table to contain the nodes of the block-cut tree.","help":"OUTBCTREENODES=*libref.data-table*","type":"dataSet"}]},{"name":"BY","description":"You can specify a BY statement in PROC NETWORK to obtain separate analyses of observations in groups that are defined by the values of the BY variables.","help":"BY *variables*;    "},{"name":"CLIQUE","description":"The CLIQUE statement invokes an algorithm that finds maximal cliques in the input graph.","help":"CLIQUE &lt;*options*&gt;;    ","arguments":[{"name":"CLIQUENUMBER=","optional":true,"description":"specifies whether to calculate the clique number of the graph. By default, CLIQUENUMBER=FALSE.","help":"CLIQUENUMBER=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","type":"standalone"},{"name":"FALSE","type":"standalone"}]},{"name":"MAXCLIQUES=","optional":true,"description":"specifies the maximum number of cliques for clique enumeration to return. By default, MAXCLIQUES=1 when CLIQUENUMBER=FALSE; otherwise, MAXCLIQUES=ALL.","help":"MAXCLIQUES=*number* | ALL","type":"choice","arguments":[{"name":"number","placeholder":true,"type":"value"},{"name":"ALL","type":"standalone"}]},{"name":"MAXLINKWEIGHT=","optional":true,"description":"specifies the maximum sum of link weights in a clique. The default is the largest number that can be represented by a double. When the default is used, no cliques are removed from the results.","help":"MAXLINKWEIGHT=*number*","type":"value"},{"name":"MAXNODEWEIGHT=","optional":true,"description":"specifies the maximum sum of node weights in a clique. The default is the largest number that can be represented by a double. When the default is used, no cliques are removed from the results.","help":"MAXNODEWEIGHT=*number*","type":"value"},{"name":"MAXSIZE=","optional":true,"description":"specifies the maximum number of nodes in a clique. The default is the largest number that can be represented by a 32-bit integer. When the default is used, no cliques are removed from the results.","help":"MAXSIZE=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"specifies the maximum amount of time to spend finding cliques. The default is the largest number that can be represented by a double.","help":"MAXTIME=*number*","type":"value"},{"name":"MINLINKWEIGHT=","optional":true,"description":"specifies the minimum sum of link weights in a clique. The default is the largest (in magnitude) negative number that can be represented by a double. When the default is used, no cliques are removed from the results.","help":"MINLINKWEIGHT=*number*","type":"value"},{"name":"MINNODEWEIGHT=","optional":true,"description":"specifies the minimum sum of node weights in a clique. The default is the largest (in magnitude) negative number that can be represented by a double, which causes no cliques to be removed from the results.","help":"MINNODEWEIGHT=*number*","type":"value"},{"name":"MINSIZE=","optional":true,"description":"specifies the minimum number of nodes in a clique. By default, MINSIZE=1 and no cliques are removed from the results.","help":"MINSIZE=*number*","type":"value"},{"name":"OUT=","optional":true,"description":"specifies the output data table to contain the maximal cliques.","help":"OUT=*libref.data-table*","type":"dataSet"}]},{"name":"CONNECTEDCOMPONENTS","description":"The CONNECTEDCOMPONENTS statement invokes an algorithm that finds the connected components of the input graph.","help":"CONNECTEDCOMPONENTS &lt;*options*&gt;;    ","arguments":[{"name":"ALGORITHM=","optional":true,"description":"specifies the algorithm to use for calculating connected components. By default, ALGORITHM=AUTOMATIC.","help":"ALGORITHM=AUTOMATIC | AFFOREST | DFS | UNIONFIND","type":"choice","arguments":[{"name":"AUTOMATIC","description":"uses the union-find or afforest algorithm for undirected graphs and the depth-first search algorithm for directed graphs.","type":"standalone"},{"name":"AFFOREST","description":"uses the afforest algorithm for connected components. You can use this algorithm only with undirected graphs.","type":"standalone"},{"name":"DFS","description":"uses the depth-first search algorithm for connected components.","type":"standalone"},{"name":"UNIONFIND","description":"uses the union-find algorithm for connected components. You can use this algorithm only with undirected graphs.","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"specifies the output data table to contain the connected components summary results.","help":"OUT=*libref.data-table*","type":"dataSet"}]},{"name":"CYCLE","description":"The CYCLE statement invokes an algorithm that finds the cycles (or the existence of a cycle) in the input graph.","help":"CYCLE &lt;*options*&gt;;    ","arguments":[{"name":"ALGORITHM=","optional":true,"description":"specifies which algorithm to use in enumerating cycles. By default, ALGORITHM=BACKTRACK for MAXLENGTH greater than 20; otherwise, ALGORITHM=BUILD.","help":"ALGORITHM=BACKTRACK | BUILD","type":"choice","arguments":[{"name":"BACKTRACK","description":"uses a backtracking algorithm based on Johnson (1975).","type":"standalone"},{"name":"BUILD","description":"uses a building algorithm based on Liu and Wang (2006).","type":"standalone"}]},{"name":"MAXCYCLES=","optional":true,"description":"specifies the maximum number of cycles for cycle enumeration to return. By default, MAXCYCLES=1.","help":"MAXCYCLES=*number* | ALL","type":"choice","arguments":[{"name":"number","placeholder":true,"type":"value"},{"name":"ALL","type":"standalone"}]},{"name":"MAXLENGTH=","optional":true,"description":"specifies the maximum number of links in a cycle. The default is the largest number that can be represented by a 32-bit integer, which causes no cycles to be removed from the results.","help":"MAXLENGTH=*number*","type":"value"},{"name":"MAXLINKWEIGHT=","optional":true,"description":"specifies the maximum sum of link weights in a cycle. The default is the largest number that can be represented by a double. When the default is used, no cycles are removed from the results.","help":"MAXLINKWEIGHT=*number*","type":"value"},{"name":"MAXNODEWEIGHT=","optional":true,"description":"specifies the maximum sum of node weights in a cycle. The default is the largest number that can be represented by a double. When the default is used, no cycles are removed from the results.","help":"MAXNODEWEIGHT=*number*","type":"value"},{"name":"MAXTIME","optional":true,"description":"specifies the maximum amount of time to spend finding cycles. The default is the largest number that can be represented by a double.","type":"standalone"},{"name":"MINLENGTH=","optional":true,"description":"specifies the minimum number of links in a cycle. By default, MINLENGTH=1 and no cycles are removed from the results.","help":"MINLENGTH=*number*","type":"value"},{"name":"MINLINKWEIGHT=","optional":true,"description":"specifies the minimum sum of link weights in a cycle. The default is the largest (in magnitude) negative number that can be represented by a double. When the default is used, no cycles are removed from the results.","help":"MINLINKWEIGHT=*number*","type":"value"},{"name":"MINNODEWEIGHT=","optional":true,"description":"specifies the minimum sum of node weights in a cycle. The default is the largest (in magnitude) negative number that can be represented by a double, which causes no cycles to be removed from the results.","help":"MINNODEWEIGHT=*number*","type":"value"},{"name":"OUTCYCLESLINKS=","optional":true,"description":"specifies the output data table to contain the links of the cycles found.","help":"OUTCYCLESLINKS=*libref.data-table*","type":"dataSet"},{"name":"OUT=","optional":true,"aliases":["OUTCYCLESNODES="],"description":"specifies the output data table to contain the nodes of the cycles found.","help":"OUT=*libref.data-table*","type":"dataSet"}]},{"name":"DISPLAY","description":"The DISPLAY statement enables you to specify a list of display tables to display or exclude.","help":"DISPLAY &lt;*table-list*&gt;&lt;*/ options*&gt;;    ","arguments":[{"name":"CASESENSITIVE","optional":true,"followsDelimiter":"/","description":"performs a case-sensitive comparison of table names in the table-list to display table names when tables are subsetted for display. To preserve case, you must enclose table names in the table-list in quotation marks.","type":"standalone"},{"name":"EXCLUDE","optional":true,"followsDelimiter":"/","description":"displays all display tables except those that you specify in the table-list.","type":"standalone"},{"name":"EXCLUDEALL","optional":true,"followsDelimiter":"/","description":"suppresses display of all tables. This option takes precedence over the other options.","type":"standalone"},{"name":"TRACE","optional":true,"followsDelimiter":"/","description":"displays the display table names, labels, and paths.","type":"standalone"}]},{"name":"DISPLAYOUT","description":"The DISPLAYOUT statement enables you to create output tables from your displayed output.","help":"DISPLAYOUT *table-spec-list*&lt;*/ options*&gt;;    ","arguments":[{"name":"INCLUDEALL","optional":true,"followsDelimiter":"/","description":"creates output tables for all display tables.","type":"standalone"},{"name":"NOREPLACE","optional":true,"followsDelimiter":"/","description":"does not replace any existing output table of the same name.","type":"standalone"},{"name":"REPEATED","optional":true,"followsDelimiter":"/","description":"replicates all output tables on all nodes.","type":"standalone"}]},{"name":"LINEARASSIGNMENT","aliases":["LAP"],"description":"The LINEARASSIGNMENT statement invokes an algorithm that solves the minimal-cost linear assignment problem. In graph terms, this problem is also known as the minimum link-weighted matching problem on a bipartite graph.","help":"LINEARASSIGNMENT &lt;*options*&gt;;    ","arguments":[{"name":"MAXTIME=","optional":true,"description":"specifies the maximum amount of time to spend for linear assignment. The default is the largest number that can be represented by a double.","help":"MAXTIME=*number*","type":"value"},{"name":"OUT=","optional":true,"description":"specifies the output data table to contain the solution to the linear assignment problem.","help":"OUT=*libref.data-table*","type":"dataSet"}]},{"name":"LINKSVAR","description":"The LINKSVAR statement enables you to explicitly specify the data variable names for PROC NETWORK to use when it reads the data table that you specify in the LINKS= option in the PROC NETWORK statement.","help":"LINKSVAR &lt;*options*&gt;;    ","arguments":[{"name":"AUXWEIGHT=","optional":true,"description":"specifies the name of the data variable for the auxiliary link weights. The value of the column variable must be numeric.","help":"AUXWEIGHT=*column*","type":"value"},{"name":"FROM=","optional":true,"aliases":["FROMVAR="],"description":"specifies the name of the data variable for the from nodes. The default name is from.","help":"FROM=*column*","type":"value"},{"name":"LOWER=","optional":true,"description":"specifies the name of the data variable for the link lower bounds. The default name is lower.","help":"LOWER=*column*","type":"value"},{"name":"TO=","optional":true,"aliases":["TOVAR="],"description":"specifies the name of the data variable for the to nodes. The default name is to.","help":"TO=*column*","type":"value"},{"name":"UPPER=","optional":true,"description":"specifies the name of the data variable for the link upper bounds. The default name is upper.","help":"UPPER=*column*","type":"value"},{"name":"VARS=","optional":true,"description":"specifies the names of the additional data variables to read.","help":"VARS=(*columns*)","type":"value"},{"name":"VARSOUT=","optional":true,"description":"specifies the names of the additional data variables to write to the output results. By default, the variables to write are the same as the variables read (as specified in the VARS= option).","help":"VARSOUT=(*columns*)","type":"value"},{"name":"WEIGHT=","optional":true,"description":"specifies the name of the data variable for the link weights. The default name is weight.","help":"WEIGHT=*column*","type":"value"}]},{"name":"LOADGRAPH","description":"The LOADGRAPH statement reads the input graph from tables that are specified by the LINKS= option or the NODES= option (or both) in the PROC NETWORK statement, and it retains the graph in memory.","help":"LOADGRAPH ;    "},{"name":"MAXFLOW","description":"The MAXFLOW statement invokes an algorithm that solves the maximum network flow problem on an input graph.","help":"MAXFLOW &lt;*options*&gt;;    ","arguments":[{"name":"SINK=","optional":true,"description":"specifies the sink node for maximum network flow calculations.","help":"SINK=*t* ","type":"value"},{"name":"SOURCE=","optional":true,"description":"specifies the source node for maximum network flow calculations.","help":"SOURCE=*s*","type":"value"}]},{"name":"MINCOSTFLOW","aliases":["MCF"],"description":"The MINCOSTFLOW statement invokes an algorithm that solves the minimum-cost network flow problem on an input graph.","help":"MINCOSTFLOW &lt;*options*&gt;;    ","arguments":[{"name":"LOGFREQUENCY=","optional":true,"aliases":["LOGFREQ="],"description":"controls the frequency for displaying iteration logs for minimum-cost network flow calculations that use the network simplex algorithm. For graphs that contain one component, this option displays progress every number of simplex iterations, and the default is 10,000. For graphs that contain multiple components, when you also specify LOGLEVEL=MODERATE, this option displays progress after processing every number of components, and the default is based on the number of components.","help":"LOGFREQUENCY=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"specifies the maximum amount of time to spend calculating minimum-cost network flows. The default is the largest number that can be represented by a double.","help":"MAXTIME=*number*","type":"value"}]},{"name":"MINCUT","description":"The MINCUT statement invokes an algorithm that finds the minimum link-weighted cut of an input graph.","help":"MINCUT &lt;*options*&gt;;    ","arguments":[{"name":"MAXCUTS=","optional":true,"description":"specifies the maximum number of cuts for the algorithm to return. By default, MAXCUTS=1.","help":"MAXCUTS=*number*","type":"value"},{"name":"MAXWEIGHT=","optional":true,"description":"specifies the maximum weight of the cuts for the algorithm to return. The default is the largest number that can be represented by a double.","help":"MAXWEIGHT=*number*","type":"value"},{"name":"OUTCUTSETS=","optional":true,"aliases":["OUT="],"description":"specifies the output data table to contain the minimum cut sets to the minimum-cut problem.","type":"value"},{"name":"OUTPARTITIONS=","optional":true,"description":"specifies the output data table to contain the minimum cut partitions to the minimum-cut problem.","help":"OUTPARTITIONS=*libref.data-table*","type":"dataSet"},{"name":"SINK=","optional":true,"description":"specifies the sink node for minimum cut calculations. If this option is specified, the SOURCE= option must also be specified.","help":"SINK=*t*","type":"value"},{"name":"SOURCE=","optional":true,"description":"specifies the source node for minimum cut calculations. If this option is specified, the SINK= option must also be specified.","help":"SOURCE=*s*","type":"value"}]},{"name":"MINSPANTREE","aliases":["MST"],"description":"The MINSPANTREE statement invokes an algorithm that solves the minimum link-weighted spanning tree problem on an input graph.","help":"MINCUT &lt;*options*&gt;;    ","arguments":[{"name":"OUT=","optional":true,"description":"specifies the output data table to contain the solution to the minimum link-weighted spanning tree problem.","help":"OUT=*libref.data-table*","type":"dataSet"},{"name":"SOURCE=","optional":true,"description":"specifies a source node for directed graphs. If the graph is undirected, this option is ignored.","help":"SOURCE=*s*","type":"value"}]},{"name":"NODESSUBSETVAR","description":"The NODESSUBSETVAR statement enables you to explicitly specify the data variable names for PROC NETWORK to use when it reads the data table that you specify in the NODESSUBSET= option in the PROC NETWORK statement.","help":"NODESSUBSETVAR &lt;*options*&gt;;    ","arguments":[{"name":"NODE=","optional":true,"description":"specifies the name of the data variable for the nodes. The value of the column variable can be numeric or character.","help":"NODE=*column*","type":"value"},{"name":"SINK=","optional":true,"description":"specifies the name of the data variable for the sink indicator. The value of the column variable must be numeric.","help":"SINK=*column*","type":"value"},{"name":"SOURCE=","optional":true,"description":"specifies the name of the data variable for the source indicator. The value of the column variable must be numeric.","help":"SOURCE=*column*","type":"value"}]},{"name":"NODESVAR","description":"The NODESVAR statement enables you to explicitly specify the data variable names for PROC NETWORK to use when it reads the data table that you specify in the NODES= option in the PROC NETWORK statement.","help":"NODESVAR &lt;*options*&gt;;    ","arguments":[{"name":"LOWER=","optional":true,"description":"specifies the name of the data variable for the node lower bounds. The default name is lower.","help":"LOWER=*column*","type":"value"},{"name":"NODE=","optional":true,"description":"specifies the name of the data variable for the nodes. The value of the column variable can be numeric or character. The default name is node.","help":"NODE=*column*","type":"value"},{"name":"UPPER=","optional":true,"description":"specifies the name of the data variable for the node upper bounds. The default name is upper.","help":"UPPER=*column*","type":"value"},{"name":"VARS=","optional":true,"description":"specifies the names of the additional data variables to read. The value of the variables can be numeric or character.","help":"VARS=(*column(s)*)","type":"value"},{"name":"VARSOUT=","optional":true,"description":"specifies the names of the additional data variables to write to the output results. The value of the variables can be numeric or character. By default, the variables to write are the same as the variables read (as specified in the VARS= option).","help":"VARSOUT=(*column(s)*)","type":"value"},{"name":"WEIGHT=","optional":true,"description":"specifies the name of the data variable for the node weights. The value of the column variable must be numeric. The default name is weight.","help":"WEIGHT=*column*","type":"value"}]},{"name":"PATH","description":"The PATH statement invokes an algorithm that finds the paths in the input graph.","help":"PATH &lt;*options*&gt;;    ","arguments":[{"name":"MAXLENGTH=","optional":true,"description":"specifies the maximum number of links in a path. The default is the largest number that can be represented by a 32-bit integer. When the default is used, no paths are removed from the results.","help":"MAXLENGTH=*number*","type":"value"},{"name":"MAXLINKWEIGHT=","optional":true,"description":"specifies the maximum sum of link weights in a path. The default is the largest number that can be represented by a double. When the default is used, no paths are removed from the results.","help":"MAXLINKWEIGHT=*number*","type":"value"},{"name":"MAXNODEWEIGHT=","optional":true,"description":"specifies the maximum sum of node weights in a path. The default is the largest number that can be represented by a double. When the default is used, no paths are removed from the results.","help":"MAXNODEWEIGHT=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"specifies the maximum amount of time to spend finding paths. The default is the largest number that can be represented by a double.","help":"MAXTIME=*number*","type":"value"},{"name":"MINLENGTH=","optional":true,"description":"specifies the minimum number of links in a path. By default, MINLENGTH=1 and no paths are removed from the results.","help":"MINLENGTH=*number*","type":"value"},{"name":"MINLINKWEIGHT=","optional":true,"description":"specifies the minimum sum of link weights in a path. The default is the largest (in magnitude) negative number that can be represented by a double. When the default is used, no paths are removed from the results.","help":"MINLINKWEIGHT=*number*","type":"value"},{"name":"MINNODEWEIGHT=","optional":true,"description":"specifies the minimum sum of node weights in a path. The default is the largest (in magnitude) negative number that can be represented by a double, which causes no paths to be removed from the results.","help":"MINNODEWEIGHT=number","type":"value"},{"name":"OUTPATHSLINKS=","optional":true,"aliases":["OUTPATHS="],"description":"specifies the output data table to contain the path links.","help":"OUTPATHSLINKS=*libref.data-table*","type":"dataSet"},{"name":"OUTPATHSNODES=","optional":true,"description":"specifies the output data table to contain the path nodes.","help":"OUTPATHSNODES=*libref.data-table*","type":"dataSet"},{"name":"SINK=","optional":true,"description":"specifies the sink node for path calculations.","help":"SINK=*sink-node*","type":"value"},{"name":"SOURCE=","optional":true,"description":"specifies the source node for path calculations.","help":"SOURCE=*source-node*","type":"value"}]},{"name":"SHORTESTPATH","description":"The SHORTESTPATH statement invokes an algorithm that calculates shortest paths between pairs of nodes in the input graph. By default, PROC NETWORK finds a shortest path for each possible combination of source and sink nodes.","help":"SHORTESTPATH &lt;*options*&gt;;    ","arguments":[{"name":"MAXABSOLUTEOBJECTIVEGAP=","optional":true,"aliases":["MAXABSOBJGAP="],"description":"specifies an acceptance criterion for the sum of link weights (CandidatePath) in paths relative to the sum of link weights in the shortest path (ShortestPath). The default is the largest number that can be represented by a double. When the default is used, no paths are removed from the results.","help":"MAXABSOLUTEOBJECTIVEGAP=*number*","type":"value"},{"name":"MAXPATHWEIGHT=","optional":true,"aliases":["MAXLINKWEIGHT="],"description":"specifies the maximum path weight. The default is the largest number that can be represented by a double, which causes no paths to be removed from the results.","help":"MAXPATHWEIGHT=*number*","type":"value"},{"name":"MAXPATHSPERPAIR=","optional":true,"description":"specifies the maximum number of ranked paths to find for each source-sink pair. By default, MAXPATHSPERPAIR=1 and the algorithm finds one shortest path between each source-sink pair.","help":"MAXPATHSPERPAIR=*number*","type":"value"},{"name":"MAXRELATIVEOBJECTIVEGAP=","optional":true,"aliases":["MAXRELOBJGAP="],"description":"specifies an acceptance criterion for the sum of link weights (CandidatePath) in paths relative to the sum of link weights in the shortest path (ShortestPath). The default is the largest number that can be represented by a double. When the default is used, no paths are removed from the results.","help":"MAXRELATIVEOBJECTIVEGAP=*number*","type":"value"},{"name":"MINPATHWEIGHT=","optional":true,"aliases":["MINLINKWEIGHT="],"description":"specifies the minimum sum of link weights in a path. The default is the largest (in magnitude) negative number that can be represented by a double. When the default is used, no paths are removed from the results.","help":"MINPATHWEIGHT=*number*","type":"value"},{"name":"OUTPATHS=","optional":true,"aliases":["OUT=","OUTPATHSLINKS="],"description":"specifies the output data table to contain the shortest path links.","help":"OUTPATHS=*libref.data-table*","type":"dataSet"},{"name":"OUTPATHSNODES=","optional":true,"description":"specifies the output data table to contain the shortest path nodes.","help":"OUTPATHSNODES=*libref.data-table*","type":"dataSet"},{"name":"OUTSUMMARY=","optional":true,"description":"specifies the output data table to contain descriptive statistics of the finite shortest paths for each source.","help":"OUTSUMMARY=*libref.data-table*","type":"dataSet"},{"name":"OUTWEIGHTS=","optional":true,"description":"specifies the output data table to contain the total weight of the shortest path for each source-sink pair.","help":"OUTWEIGHTS=*libref.data-table*","type":"dataSet"},{"name":"SEQUENCE=","optional":true,"description":"specifies which data variable in the nodes subset table defines the sequence of nodes to visit.","help":"SEQUENCE=*column*","type":"value"},{"name":"SINK=","optional":true,"description":"specifies the sink node for shortest path calculations.","help":"SINK=*sink-node*","type":"value"},{"name":"SOURCE=","optional":true,"description":"specifies the source node for shortest path calculations.","help":"SOURCE=*source-node*","type":"value"}]},{"name":"SUMMARY","description":"The SUMMARY statement invokes an algorithm that calculates various summary metrics for an input graph.","help":"SUMMARY &lt;*options*&gt;;    ","arguments":[{"name":"ASSORTATIVITYDEGREE=","optional":true,"description":"calculates degree assortativity and specifies which type of calculation to perform.","help":"ASSORTATIVITYDEGREE=WEIGHT | UNWEIGHT | BOTH","type":"choice","arguments":[{"name":"WEIGHT","description":"calculates degree assortativity by using the weighted graph.","type":"standalone"},{"name":"UNWEIGHT","description":"calculates degree assortativity by using the unweighted graph.","type":"standalone"},{"name":"BOTH","description":"calculates degree assortativity by using both the weighted and unweighted graphs.","type":"standalone"}]},{"name":"ASSORTATIVITYNOMINAL=","optional":true,"description":"specifies the name of the data variable for computing the nominal assortativity.","help":"ASSORTATIVITYNOMINAL=*column*","type":"value"},{"name":"ASSORTATIVITYNUMERIC=","optional":true,"description":"specifies the name of the data variable for computing the numeric assortativity.","help":"ASSORTATIVITYNUMERIC=*column*","type":"value"},{"name":"BICONNECTEDCOMPONENTS","optional":true,"description":"calculates information about biconnected components. You can use this option only for an undirected graph.","type":"standalone"},{"name":"CLUSTERINGCOEFFICIENT","optional":true,"aliases":["CLUSTERINGCOEF"],"description":"calculates information about clustering coefficients. You can use this option only for an undirected graph.","type":"standalone"},{"name":"CONNECTEDCOMPONENTS","optional":true,"description":"calculates information about connected components.","type":"standalone"},{"name":"DIAMETERAPPROX=","optional":true,"description":"calculates information about the approximate diameter and specifies which type of calculation to perform.","help":"DIAMETERAPPROX=WEIGHT | UNWEIGHT | BOTH","type":"choice","arguments":[{"name":"WEIGHT","description":"calculates the approximate diameter by using the weighted graph.","type":"standalone"},{"name":"UNWEIGHT","description":"calculates the approximate diameter by using the unweighted graph.","type":"standalone"},{"name":"BOTH","description":"calculates the approximate diameter by using both the weighted and unweighted graphs.","type":"standalone"}]},{"name":"FINITEPATH","optional":true,"description":"includes only finite values when calculating descriptive statistics that are related to shortest paths (eccentricity, diameter, and so on).","type":"standalone"},{"name":"OUT=","optional":true,"description":"specifies the output data table to contain the summary results.","help":"OUT=*libref.data-table*","type":"dataSet"},{"name":"SHORTESTPATH=","optional":true,"description":"calculates information about shortest paths and specifies which type of calculation to perform.","help":"SHORTESTPATH=WEIGHT | UNWEIGHT | BOTH","type":"choice","arguments":[{"name":"WEIGHT","description":"calculates shortest paths by using the weighted graph.","type":"standalone"},{"name":"UNWEIGHT","description":"calculates shortest paths by using the unweighted graph.","type":"standalone"},{"name":"BOTH","description":"calculates shortest paths by using both the weighted and unweighted graphs.","type":"standalone"}]}]},{"name":"TOPOLOGICALSORT","description":"The TOPOLOGICALSORT statement calculates a topological ordering of the nodes of a directed acyclic input graph.","help":"TOPOLOGICALSORT ;    "},{"name":"TRANSITIVECLOSURE","description":"The TRANSITIVECLOSURE statement invokes an algorithm that calculates the transitive closure of an input graph.","help":"TRANSITIVECLOSURE &lt;*option*&gt;;    ","arguments":[{"name":"OUT=","optional":true,"description":"specifies the output data table to contain the transitive closure results.","help":"OUT=*libref.data-table*","type":"dataSet"}]},{"name":"TSP","description":"The TSP statement invokes an algorithm that solves the traveling salesman problem, which is described in the section Traveling Salesman Problem.","help":"TSP &lt;*options*&gt;;    ","arguments":[{"name":"ABSOBJGAP=","optional":true,"aliases":["ABSOLUTEOBJECTIVEGAP="],"description":"specifies a stopping criterion. When the absolute difference between the best integer objective and the objective of the best remaining branch-and-bound node becomes less than the value of number, the solver stops. The default value is 1Eâ€“6.","type":"value"},{"name":"CUTOFF=","optional":true,"description":"cuts off any branch-and-bound nodes in a minimization problem that has an objective value greater than number. The default is the largest number that can be represented by a double.","help":"CUTOFF=*number*","type":"value"},{"name":"CUTSTRATEGY=","optional":true,"description":"specifies the level of mixed integer linear programming cutting planes to be generated. By default, CUTSTRATEGY=NONE.","help":"CUTSTRATEGY=AUTOMATIC | NONE | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"AUTOMATIC","description":"generates cutting planes on the basis of a strategy that is determined by the mixed integer linear programming solver.","type":"standalone"},{"name":"NONE","description":"disables the generation of mixed integer linear programming cutting planes (some TSP-specific cutting planes are still active for validity).","type":"standalone"},{"name":"MODERATE","description":"uses a moderate cutting strategy.","type":"standalone"},{"name":"AGGRESSIVE","description":"uses an aggressive cutting strategy.","type":"standalone"}]},{"name":"HEURISTICS=","optional":true,"description":"determines how frequently to apply primal heuristics during the branch-and-bound tree search, and affects the maximum number of iterations that are allowed in iterative heuristics. By default, HEURISTICS=AUTOMATIC.","help":"HEURISTICS=AUTOMATIC | NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"AUTOMATIC","description":"applies the default level of heuristics.","type":"standalone"},{"name":"NONE","description":"disables all primal heuristics.","type":"standalone"},{"name":"BASIC","description":"applies basic primal heuristics at low frequency.","type":"standalone"},{"name":"MODERATE","description":"applies most primal heuristics at moderate frequency.","type":"standalone"},{"name":"AGGRESSIVE","description":"applies most primal heuristics at moderate frequency.","type":"standalone"}]},{"name":"LOGFREQUENCY=","optional":true,"aliases":["LOGFREQ="],"description":"specifies the time interval (in seconds) for printing information in the node log, where number can be any integer greater than or equal to 0. By default, LOGFREQ=5.","help":"LOGFREQUENCY=*number*","type":"value"},{"name":"MAXNODES=","optional":true,"description":"specifies the maximum number of branch-and-bound nodes to be processed. The default is the largest number that can be represented by a 32-bit integer.","help":"MAXNODES=*number*","type":"value"},{"name":"MAXSOLS=","optional":true,"description":"specifies a stopping criterion. When the number of solutions are found, the procedure stops. The default is the largest number that can be represented by a 32-bit integer.","help":"MAXSOLS=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"specifies the maximum amount of time to spend solving the traveling salesman problem. The default is the largest number that can be represented by a double.","help":"MAXTIME=*number*","type":"value"},{"name":"MILP=","optional":true,"description":"specifies whether to use a mixed integer linear programming (MILP) solver to solve the traveling salesman problem (TSP). By default, MILP=TRUE.","help":"MILP=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"uses a mixed integer linear programming","type":"standalone"},{"name":"FALSE","description":"does not use a mixed integer linear programming solver","type":"standalone"}]},{"name":"OUT=","optional":true,"description":"specifies the output data table to contain the solution to the traveling salesman problem.","help":"OUT=*libref.data-table*","type":"dataSet"},{"name":"RELOBJGAP=","optional":true,"aliases":["RELATIVEOBJECTIVEGAP="],"description":"specifies a stopping criterion that is based on the best integer objective (BestInteger) and the objective of the best remaining node (BestBound). By default, RELOBJGAP=1Eâ€“4.","help":"RELOBJGAP=*number*","type":"value"},{"name":"TARGET=","optional":true,"description":"specifies a stopping criterion for minimization problems. If the best integer objective is less than or equal to number, the solver stops. The default is the largest (in magnitude) negative number that can be represented by a double.","help":"TARGET=*number*","type":"value"}]},{"name":"UNLOADGRAPH","description":"The UNLOADGRAPH statement deletes the in-memory graph that is specified in the GRAPH= option in the PROC NETWORK statement.","help":"UNLOADGRAPH ;    "},{"name":"VRP","description":"The VRP statement invokes an algorithm that solves the vehicle routing problem. The algorithm that is used to solve this problem is built around the same branch-and-cut algorithm that the OPTMILP procedure uses.","help":"VRP &lt;*options*&gt;;    ","arguments":[{"name":"ABSOBJGAP=","optional":true,"aliases":["ABSOLUTEOBJECTIVEGAP="],"description":"specifies a stopping criterion. When the absolute difference between the best integer objective and the objective of the best remaining branch-and-bound node becomes less than the value of number, the solver stops. The default value is 1Eâ€“6.","help":"ABSOBJGAP=*number*","type":"value"},{"name":"CAPACITY=","optional":true,"description":"specifies the capacity of each vehicle. The capacity is the maximum amount of goods that a vehicle can pick up from the depot to be delivered to customers.The default is the largest number that can be represented by a double.","help":"CAPACITY=*number*","type":"value"},{"name":"CUTOFF=","optional":true,"description":"cuts off any branch-and-bound nodes in a minimization problem that have an objective value at or above number. The default is the largest number that can be represented by a double..","help":"CUTOFF=*number*","type":"value"},{"name":"CUTSTRATEGY=","optional":true,"description":"specifies the level of mixed integer linear programming cutting planes to be generated. VRP-specific cutting planes are always generated. By default, CUTSTRATEGY=NONE.","help":"CUTSTRATEGY=AUTOMATIC | NONE | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"AUTOMATIC","description":"generate cutting planes based on a strategy determined by the mixed integer linear programming solver.","type":"standalone"},{"name":"NONE","description":"disables the generation of mixed integer linear programming cutting planes (some VRP-specific cutting planes are still active for validity).","type":"standalone"},{"name":"MODERATE","description":"uses a moderate cutting strategy.","type":"standalone"},{"name":"AGGRESSIVE","description":"uses an aggressive cutting strategy.","type":"standalone"}]},{"name":"DEMAND=","optional":true,"description":"specifies which data variable in the nodes table defines the demand values. The demand represents a quantity of goods to be delivered to or picked up from a customer.","help":"DEMAND=*column*","type":"value"},{"name":"DEPOT=","optional":true,"description":"specifies the depot node for the vehicle routing problem. The centralized depot is the source of goods to be delivered to customers (nodes). This option is required, because the depot must be specified..","help":"DEPOT=*depot-node*","type":"value"},{"name":"HEURISTICS=","optional":true,"description":"determines the level of heuristics that the algorithm uses. The value AUTOMATIC gives a balanced level of heuristics that is based on the algorithm. By default, HEURISTICS=AUTOMATIC.","help":"HEURISTICS=AUTOMATIC | NONE | BASIC | MODERATE | AGGRESSIVE","type":"choice","arguments":[{"name":"AUTOMATIC","type":"standalone"},{"name":"NONE","type":"standalone"},{"name":"BASIC","type":"standalone"},{"name":"MODERATE","type":"standalone"},{"name":"AGGRESSIVE","type":"standalone"}]},{"name":"LOGFREQUENCY=","optional":true,"aliases":["LOGFREQ="],"description":"specifies the time interval (in seconds) for printing information in the node log, where number can be any integer greater than or equal to 0. By default, LOGFREQ=5.","help":"LOGFREQUENCY=*number*","type":"value"},{"name":"MAXNODES=","optional":true,"description":"specifies the maximum number of branch-and-bound nodes to be processed. The default is the largest number that can be represented by a 32-bit integer.","help":"MAXNODES=*number*","type":"value"},{"name":"MAXROUTES=","optional":true,"description":"specifies the maximum number of routes allowed to service demand. The default is the largest number that can be represented by a 32-bit integer.","help":"MAXROUTES=*number*","type":"value"},{"name":"MAXSOLS=","optional":true,"description":"specifies a stopping criterion. When the number of solutions are found, the procedure stops. The default is the largest number that can be represented by a 32-bit integer.","help":"MAXSOLS=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"specifies the maximum amount of time to spend solving the vehicle routing problem. The default is the largest number that can be represented by a double.","help":"MAXTIME=*number*","type":"value"},{"name":"MILP=","optional":true,"description":"specifies whether to use a mixed integer linear programming (MILP) solver to solve the vehicle routing problem (VRP). The MILP solver attempts to find the overall best VRP solution by using a branch-and-cut algorithm. By default, MILP=TRUE.","help":"MILP=TRUE | FALSE","type":"choice","arguments":[{"name":"TRUE","description":"uses a mixed-integer linear programming","type":"standalone"},{"name":"FALSE","description":"does not use a mixed-integer linear programming solver","type":"standalone"}]},{"name":"MINROUTES=","optional":true,"description":"specifies the minimum number of routes allowed to service demand. By default, MINROUTES=1..","help":"MINROUTES=*number*","type":"value"},{"name":"OUT=","optional":true,"description":"specifies the output data table to contain the solution to the vehicle routing problem.","help":"OUT=*libref.data-table*","type":"dataSet"},{"name":"RELOBJGAP=","optional":true,"aliases":["RELATIVEOBJECTIVEGAP="],"description":"specifies a stopping criterion that is based on the best integer objective (BestInteger) and the objective of the best remaining node (BestBound). By default, RELOBJGAP=1Eâ€“4.","help":"RELOBJGAP=*number*","type":"value"},{"name":"SERVICETIME=","optional":true,"description":"specifies which data variable in the nodes table defines the service time of the customers (nodes).","help":"SERVICETIME=*column*","type":"value"},{"name":"TARGET=","optional":true,"description":"specifies a stopping criterion for minimization problems. If the best integer objective is less than or equal to number, the solver stops. The default is the largest (in magnitude) negative number that can be represented by a double.","help":"TARGET=*number*","type":"value"},{"name":"TIMEWINDOWLOWER=","optional":true,"description":"specifies which data variable in the nodes table defines the lower time limits within which a delivery vehicle can arrive at the customer locations (nodes).","help":"TIMEWINDOWLOWER=*column*","type":"value"},{"name":"TIMEWINDOWUPPER=","optional":true,"description":"specifies which data variable in the nodes table defines the upper time limits within which a delivery vehicle can arrive at the customer locations (nodes).","help":"TIMEWINDOWUPPER=*column*","type":"value"},{"name":"TRAVELTIME=","optional":true,"description":"specifies which data variable in the links table defines the travel times of the links.","help":"TRAVELTIME=*column*","type":"value"}]}],"supportSiteInformation":{"docsetId":"casnopt","docsetVersion":"v_013","docsetTargetFile":"casnopt_optnet_toc.htm"}}