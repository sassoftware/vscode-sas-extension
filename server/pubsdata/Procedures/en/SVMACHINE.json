{"name":"SVMACHINE","statements":[{"name":"PROC SVMACHINE","description":"The SVMACHINE procedure implements the support vector machines (SVM) algorithm in SAS Viya. A popular data mining area classification method, the SVM algorithm computes support vector machine learning classifiers for the binary pattern recognition problem; it has been broadly used in the fields such as image classification, handwriting recognition, financial decision, text mining, and so on. † Like other predictive modeling tools, the SVMACHINE procedure uses input data to train a model and provides information about the model. The SVMACHINE procedure executes the SVM algorithm (applying the interior-point optimization technique during training) and can generate SAS code for scoring future data. PROC SVMACHINE uses both linear and low-degree polynomial kernels to conduct computation, and it can run on multiple threads in a single machine or on multiple threads on multiple machines. It can load data from multiple nodes and perform computation in parallel.","help":"PROC SVMACHINE <C=number> <> <ITERATIONREPORT> <MAXITER=number> <NOPRINT> <NOSCALE> <NTHREADS=number-of-threads> <SCALE> <TOLERANCE=number> <USEMISS>;     \n\tAUTOTUNE <EVALHISTORY=<ALL | LOG | NONE>... > <FRACTION=number> <KFOLD=number> ...;\n    \n\tCODE <FILE=filename> ;\n    \n\tID variables;\n    \n\tINPUT <LEVEL=<INTERVAL | NOMINAL>> ;\n    \n\tKERNEL <DEGREE=number> LINEAR POLYNOMIAL < / DEGREE=number > ...;\n    \n\tOUTPUT <> <OUT=CAS-libref.data-table> <ROLE<=variable>> ...;\n    \n\tPARTITION <FRACTION(< TEST=fraction > < VALIDATE=fraction > < SEED=number >)> <ROLE=|ROLEVAR=variable (< TEST='value' > < TRAIN='value' > < VALIDATE='value' >)> ;\n    \n\tSAVESTATE <RSTORE=CAS-libref.data-table> ;\n    \n\tTARGET <ASCENDING> <DESCENDING> ;\n","arguments":[{"name":"C=","optional":true,"description":"Specifies the penalty value, where number must be a real number greater than 0.","help":"C=*number*","type":"value"},{"name":"DATA=","optional":true,"description":"names the input data table for PROC SVMACHINE to use. CAS-libref.data-table is a two-level name, where","type":"value"},{"name":"ITERATIONREPORT","optional":true,"description":"Generates a table named \"Iteration Report,\" which displays the training accuracy for each iteration.","type":"standalone"},{"name":"MAXITER=","optional":true,"description":"Specifies the maximum number of iterations before the process stops, where number is a positive integer.","help":"MAXITER=*number*","type":"value"},{"name":"NOPRINT","optional":true,"description":"Suppresses the generation of ODS outputs. If you specify this option, no ODS tables are generated.","type":"standalone"},{"name":"NOSCALE","optional":true,"description":"Uses the original data during training.","type":"standalone"},{"name":"NTHREADS=","optional":true,"description":"Specifies the number of threads that are used in the computation. The default value is the number of CPUs available in the machine.","help":"NTHREADS=*number-of-threads*","type":"value"},{"name":"SCALE","optional":true,"description":"Scales the input variables to between 0 and 1 during training. By default, all numerical data are scaled before the training.","type":"standalone"},{"name":"TOLERANCE=","optional":true,"description":"Specifies the minimal absolute tolerance at which the iteration stops. The tolerance number must be equal to or greater than 1.0E–12.","help":"TOLERANCE=*number*","type":"value"},{"name":"USEMISS","optional":true,"description":"Uses missing values for input variables. Missing is treated as a special level for a categorical variable, and missing values for a continuous variable are imputed to the mean before training. By default, all observations that have missing values are dropped during the training process.","type":"standalone"}]},{"name":"AUTOTUNE","description":"The AUTOTUNE statement searches for the best combination of values of the LASSO=, LEARNINGRATE=, NTREES=, RIDGE=, SAMPLINGRATE=, and VARS_TO_TRY= options in the PROC GRADBOOST statement. You cannot specify both the AUTOTUNE statement and the CROSSVALIDATION statement in the same procedure run.","help":"AUTOTUNE &lt;EVALHISTORY=&lt;ALL | LOG | NONE&gt;... &gt; &lt;FRACTION=number&gt; &lt;KFOLD=number&gt; ...","arguments":[{"name":"EVALHISTORY=","optional":true,"description":"Specifies how to report the evaluation history of the tuner.","help":"EVALHISTORY=ALL | LOG | NONE | TABLE","type":"choice","arguments":[{"name":"ALL","description":"Reports each evaluation in the log and creates the EvaluationHistory ODS table.","type":"standalone"},{"name":"LOG","description":"Prints the following information to the log for each evaluation: evaluation number, objective value, best objective value up to that point, evaluation time, and elapsed time since the beginning of the tuning process.","type":"standalone"},{"name":"NONE","description":"Suppresses reporting of evaluations in the log and does not create the EvaluationHistory ODS table.","type":"standalone"},{"name":"TABLE","description":"Creates the EvaluationHistory ODS table, which contains all evaluated points. The table contains columns for the evaluation number, all tuning parameters, and the objective function value.","type":"standalone"}]},{"name":"FRACTION=","optional":true,"description":"Specifies the fraction of all data to be used for validation, where number must be between 0.01 and 0.99, inclusive. If you specify this option, the tuner uses a single partition validation for finding the objective value (validation error estimate). This option might not be advisable for small or unbalanced data tables where the random assignment of the validation subset might not provide a good estimate of error. For large, balanced data tables, a single validation partition is usually sufficient for estimating error; a single partition is more efficient than cross validation in terms of the total execution time. By default, FRACTION=0.3. You cannot specify this option in combination with the KFOLD= option.","help":"FRACTION=*number*","type":"value"},{"name":"KFOLD=","optional":true,"description":"Specifies the number of partition folds in the cross validation process, where number must be between 2 and 20, inclusive. If you specify this option, the tuner uses cross validation to find the objective value. In cross validation, each model evaluation requires number of training executions (on number–1 data folds) and number of scoring executions (on 1 hold-out fold). Thus, the evaluation time is increased by approximately number. For small to medium data tables or for unbalanced data tables, cross validation provides on average a better representation of error across the entire data table (a better generalization error). By default, KFOLD=5. You cannot specify this option in combination with the FRACTION= option.","help":"KFOLD=*number*","type":"value"},{"name":"MAXBAYES=","optional":true,"description":"Specifies the maximum number of points in the Kriging model. This option is only honored when SEARCHMETHOD=BAYESIAN, and has a minimum value of 10.","help":"MAXBAYES=*number*","type":"value"},{"name":"MAXEVALS=","optional":true,"description":"Specifies the maximum number of configuration evaluations allowed for the tuner, where number must be an integer greater than or equal to 3. When the number of evaluations is reached, the tuner terminates the search and returns the results. To produce a single objective function value (validation error estimate), each configuration evaluation requires either a single model training and scoring execution on a validation partition, or a number of training and scoring executions equal to the value of the KFOLD= option for cross validation. The MAXEVALS= option might lead to termination before the value of the MAXITER= option or the MAXTIME= option is reached. By default, MAXEVALS=50.","help":"MAXEVALS=*number*","type":"value"},{"name":"MAXITER=","optional":true,"description":"Specifies the maximum number of iterations of the optimization tuner, where number must be greater than or equal to 1. Each iteration normally involves a number of objective evaluations up to the value of the POPSIZE= option. The MAXITER= option might lead to termination before the value of the MAXEVALS= option or the MAXTIME= option is reached. By default, MAXITER=5.","help":"MAXITER=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"Specifies the maximum time (in seconds) allowed for the tuner, where number must be greater than or equal to 1. When this value is reached, the tuner terminates the search and returns results. The actual run time for optimization might be longer because it includes the remaining time needed to finish the current evaluation. For long-running model training (large data tables), the actual run time might significantly exceed number. The MAXTIME= option might lead to termination before the value of the MAXEVALS= option or the MAXITER= option is reached. By default, MAXTIME=36000.","help":"MAXTIME=*number*","type":"value"},{"name":"MAXTRAINTIME=","optional":true,"description":"Specifies the maximum time allowed for a single model train. The model train is terminated if it exceeds this time, and the objective value is set to missing.","help":"MAXTRAINTIME=*number*","type":"value"},{"name":"NPARALLEL=","optional":true,"description":"Specifies the number of evaluations to be performed in parallel, where number must be greater than or equal to 0. When SEARCHMETHOD=GA is specified, the value of number is equal to the value of the POPSIZE= option minus one. When SEARCHMETHOD=LHS or SEARCHMETHOD=RANDOM is specified, the value of number is equal to the value of SAMPLESIZE= option.","help":"NPARALLEL=*number*","type":"value"},{"name":"NSUBSESSIONWORKERS=","optional":true,"description":"Specifies the number of workers to use in parallel subsessions. When evaluating alternative configurations in parallel, a number of subsessions is created by the tuner, with each subsession potentially using multiple workers. The number of workers used in a parallel subsession is determined by using either NSUBSESSIONWORKERS=number, if specified, or determined automatically based upon the size of the data.","help":"NSUBSESSIONWORKERS=*number*","type":"value"},{"name":"OBJECTIVE=","optional":true,"description":"Specifies which measure of model performance the tuner uses as the objective function.","help":"OBJECTIVE=ASE | AUC | F05 | F1 | GAMMA | GINI | KS | MAE | MCE | MCLL | MISC | MSE | MSLE | RASE | RMAE | RMSLE | TAU*function*","type":"value","arguments":[{"name":"ASE","description":"Uses average squared error as the objective function.","type":"standalone"},{"name":"AUC","description":"Uses area under the curve as the objective function (nominal type only).","type":"standalone"},{"name":"F05","description":"Uses the F0.5 coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"F1","description":"Uses the F1 coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"GAMMA","description":"Uses the gamma coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"GINI","description":"Uses the Gini coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"KS","description":"Uses the Kolmogorov-Smirnov coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"MAE","description":"Uses the mean absolute error as the objective function (interval type only).","type":"standalone"},{"name":"MCE","description":"Uses the misclassification rate as the objective function (nominal type only).","type":"standalone"},{"name":"MCLL","description":"Uses the multiclass log loss as the objective function (nominal type only).","type":"standalone"},{"name":"MISC","description":"Uses the misclassification error percentage as the objective function (nominal type only).","type":"standalone"},{"name":"MSE","description":"Uses the mean squared error as the objective function (interval type only).","type":"standalone"},{"name":"MSLE","description":"Uses the mean squared logarithmic error as the objective function (interval type only).","type":"standalone"},{"name":"RASE","description":"Uses the root average squared error as the objective function.","type":"standalone"},{"name":"RMAE","description":"Uses the root mean absolute error as the objective function (interval type only).","type":"standalone"},{"name":"RMSLE","description":"Uses the root mean squared logarithmic error as the objective function (interval type only).","type":"standalone"},{"name":"TAU","description":"Uses the tau coefficient as the objective function (nominal type only).","type":"standalone"}]},{"name":"POPSIZE=","optional":true,"description":"Specifies the maximum number of evaluations in one iteration (population), where number must be greater than or equal to 1. In some cases, the tuner algorithm might generate a number of new configurations smaller than number. By default, POPSIZE=10.","help":"POPSIZE=*number*","type":"value"},{"name":"SAMPLESIZE=","optional":true,"description":"Specifies the total number of evaluations, where number must be greater than or equal to 1. You can specify this option when SEARCHMETHOD=RANDOM or SEARCHMETHOD=LHS. This option is ignored when SEARCHMETHOD=GA.","help":"SAMPLESIZE=*number*","type":"value"},{"name":"SEARCHMETHOD=","optional":true,"description":"Specifies the search method to use for tuning.","help":"SEARCHMETHOD=BAYESIAN | GA | LHS | RANDOM","type":"choice","arguments":[{"name":"BAYESIAN","description":"Builds a Kriging surrogate model to approximate the objective value, and uses this surrogate model for generating new alternative configurations at each iteration.","type":"standalone"},{"name":"GA","description":"Uses an initial Latin hypercube sample that seeds a genetic algorithm to generate a new population of alternative configurations at each iteration.","type":"standalone"},{"name":"LHS","description":"Uses a Latin hypercube to generate a single sample of configurations that is uniform in each tuning parameter, but random in combinations.","type":"standalone"},{"name":"RANDOM","description":"Generates a single sample of purely random configurations.","type":"standalone"}]},{"name":"TARGETEVENT=","optional":true,"description":"Specifies the target event to use for calculating the selected objective function. This option is ignored when the value of the OBJECTIVE= option is not AUC, F1, F05, GINI, GAMMA, TAU, or KS.","help":"TARGETEVENT=*string*","type":"value"},{"name":"TRAINFRACTION=","optional":true,"description":"Specifies the fraction of all data to be used for training, where number must be between 0.01 and 0.99, inclusive. If you specify this option, the tuner uses a single-partition validation to find the objective value (validation error estimate). Using this option might not be advisable for small or unbalanced data tables, where the random assignment of the validation subset might not provide a good estimate of error. For large, balanced data tables, a single-partition validation is usually sufficient for estimating error; a single partition is more efficient than cross validation in terms of the total execution time.","help":"TRAINFRACTION=*number*","type":"value"},{"name":"TUNINGPARAMETERS=","optional":true,"description":"Specifies which parameters to tune and which ranges to tune over. If USEPARAMETERS=STANDARD, this option is ignored.","help":"TUNINGPARAMETERS=NFACTORS | LB= | UB= | VALUES= | INIT= | EXCLUDE | LEARNSTEP | MAXITER","type":"choice","arguments":[{"name":"NFACTORS","type":"standalone"},{"name":"LB=","type":"value"},{"name":"UB=","type":"value"},{"name":"VALUES=","type":"value"},{"name":"INIT=","type":"value"},{"name":"EXCLUDE","type":"standalone"},{"name":"LEARNSTEP","type":"standalone"},{"name":"MAXITER","type":"standalone"}]},{"name":"USEPARAMETERS=","optional":true,"description":"Specifies how to handle the TUNINGPARAMETERS= option.","help":"USEPARAMETERS=STANDARD | CUSTOM | COMBINED*tuning-parameter-option*","type":"value","arguments":[{"name":"STANDARD","description":"Tunes using the default bounds and initial values for all parameters.","type":"standalone"},{"name":"CUSTOM","description":"Tunes only the parameters that are specified in the TUNINGPARAMETERS= option.","type":"standalone"},{"name":"COMBINED","description":"Tunes the parameters that are specified in the TUNINGPARAMETERS= option and uses default bounds and initial values to tune all other parameters.","type":"standalone"}]}]},{"name":"CODE","description":"The CODE statement generates SAS DATA step code that mimics the computations that are done by the OUTPUT statement. The CODE statement is optional.","help":"CODE &lt;FILE=filename&gt; ","arguments":[{"name":"FILE=","optional":true,"description":"Specifies the filename of the file to write the SAS score code to.","help":"FILE=*filename*","type":"value"}]},{"name":"ID","description":"The ID statement lists one or more variables that are to be copied from the input data table to the output data tables that are specified in the OUT= option in the OUTPUT statement and the RSTORE= option in the SAVESTATE statement.","help":"ID variables"},{"name":"INPUT","description":"The INPUT statement specifies the names of variables to be used in training. Only interval, binary, and nominal variables are accepted. If you want to use different options for different variables, you can specify multiple INPUT statements.","help":"INPUT &lt;LEVEL=&lt;INTERVAL | NOMINAL&gt;&gt; ","arguments":[{"name":"LEVEL=","optional":true,"followsDelimiter":"/","description":"Specifies whether the specified input variables are continuous or categorical.","help":"LEVEL=INTERVAL | NOMINAL","type":"choice","arguments":[{"name":"INTERVAL","followsDelimiter":"/","description":"Specifies that the input variables are continuous.","type":"standalone"},{"name":"NOMINAL","followsDelimiter":"/","description":"Specifies that the input variables are categorical.","type":"standalone"}]}]},{"name":"KERNEL","description":"The KERNEL statement specifies the type of kernel and any associated parameters to be used during training.","help":"KERNEL &lt;DEGREE=number&gt; LINEAR POLYNOMIAL &lt; / DEGREE=number &gt; ...","arguments":[{"name":"LINEAR","description":"Uses a linear kernel during training. No kernel-parameter is needed.","type":"standalone"},{"name":"POLYNOMIAL","description":"Uses a polynomial kernel during training. Specify the polynomial degree as the kernel-parameter, in the form DEGREE=number, where number must be 2 or 3 (the default is 2).","type":"standalone"},{"name":"DEGREE=","optional":true,"followsDelimiter":"/","description":"[FOR POLYNOMIAL KERNEL TYPE ONLY] Specify the polynomial degree as the kernel-parameter, in the form DEGREE=number, where number must be 2 or 3 (the default is 2).","help":"DEGREE=*number*","type":"value"}]},{"name":"OUTPUT","description":"The OUTPUT statement creates an output data table that contains the predicted values of the training data table.","help":"OUTPUT &lt;&gt; &lt;OUT=CAS-libref.data-table&gt; &lt;ROLE&lt;=variable&gt;&gt; ...","arguments":[{"name":"COPYVAR=","optional":true,"aliases":["COPYVARS="],"description":"Lists one or more variables from the input data table that are transferred to the output data table.","type":"value"},{"name":"OUT=","optional":true,"description":"Names the output data table for PROC SVMACHINE to use. CAS-libref.data-table is a two-level name, where CAS-libref refers to a collection of information that is defined in the LIBNAME statement and includes the caslib, which includes a path to where the data table is to be stored, and a session identifier, which defaults to the active session but which can be explicitly defined in the LIBNAME statement.","help":"OUT=*CAS-libref.data-table*","type":"dataSet"},{"name":"ROLE=","optional":true,"description":"Specifies a numeric variable that indicates the role that each observation plays in fitting the model. The default name is _ROLE_.","type":"value"}]},{"name":"PARTITION","description":"The PARTITION statement specifies how observations in the input data set are logically partitioned into disjoint subsets for model training, validation, and testing.","help":"PARTITION &lt;FRACTION(&lt; TEST=fraction &gt; &lt; VALIDATE=fraction &gt; &lt; SEED=number &gt;)&gt; &lt;ROLE=|ROLEVAR=variable (&lt; TEST='value' &gt; &lt; TRAIN='value' &gt; &lt; VALIDATE='value' &gt;)&gt; ","arguments":[{"name":"FRACTION=","optional":true,"description":"Randomly assigns specified proportions of the observations in the input data table to the roles. You specify the proportions for testing and validation by using the TEST= and VALIDATE= suboptions. If you specify both the TEST= and VALIDATE= suboptions, then the sum of the specified fractions must be less than 1 and the remaining fraction of the observations are assigned to the training role. The SEED= option specifies an integer that is used to start the pseudorandom number generator for random partitioning of data for training, testing, and validation. If you do not specify SEED=number or if number is less than or equal to 0, the seed is generated by reading the time of day from the computer’s clock.","help":"FRACTION=VALIDATE= | TEST= | SEED=","type":"choice","arguments":[{"name":"VALIDATE=","type":"value"},{"name":"TEST=","type":"value"},{"name":"SEED=","type":"value"}]},{"name":"ROLE=","optional":true,"aliases":["ROLEVAR="],"description":"Names the variable in the input data table whose values are used to assign roles to each observation. This variable cannot also appear as an analysis variable in other statements or options. The TEST=, TRAIN=, and VALIDATE= suboptions specify the formatted values of this variable that are used to assign observation roles. If you do not specify the TRAIN= suboption, then all observations whose role is not determined by the TEST= or VALIDATE= suboption are assigned to the training role.","help":"ROLE=TRAIN= | VALIDATE= | TEST=","type":"choice","arguments":[{"name":"TRAIN=","type":"value"},{"name":"VALIDATE=","type":"value"},{"name":"TEST=","type":"value"}]}]},{"name":"SAVESTATE","description":"The SAVESTATE statement creates an analytic store for the model and saves it as a binary object in a data table. You can use the analytic store in the ASTORE procedure to score new data.","help":"SAVESTATE &lt;RSTORE=CAS-libref.data-table&gt; ","arguments":[{"name":"RSTORE=","optional":true,"description":"Specifies a data table in which to save the analytic store for the model. CAS-libref.data-table is a two-level name, where CAS-libref refers to the caslib and session identifier, and data-table specifies the name of the output data table.","help":"RSTORE=*CAS-libref.data-table*","type":"dataSet"}]},{"name":"TARGET","description":"The TARGET statement names the target variable whose values PROC SVMACHINE predicts. The target variable must be binary and must be different from the variables in the INPUT statement.","help":"TARGET &lt;ASCENDING&gt; &lt;DESCENDING&gt; ","arguments":[{"name":"ASCENDING","optional":true,"followsDelimiter":"/","aliases":["ASC"],"description":"Levelizes the target values in ascending order.","type":"standalone"},{"name":"DESCENDING","optional":true,"followsDelimiter":"/","aliases":["DESC"],"description":"Levelizes the target values in descending order. By default, the order is DESCENDING.","type":"standalone"}]}],"supportSiteInformation":{"docsetId":"casml","docsetVersion":"v_032","docsetTargetFile":"casml_svmachine_toc.htm"}}