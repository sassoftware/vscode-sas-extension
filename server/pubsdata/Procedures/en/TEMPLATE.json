{"name":"TEMPLATE","statements":[{"name":"DEFINE COLUMN","description":"Creates a template for a column.","help":"DEFINE COLUMN  column-path | Base.Template.Column  \n\t< / STORE=libref.template-store>;\n\t\t<column-attribute-1<column-attribute-2> ...>;\n\tCELLSTYLE  expression-1 AS  <style-element-name><[style-attribute-specification(s)] >\n\t\t<, expression-n AS  <style-element-name><[style-attribute-specification(s)]>>;\n\tCOMPUTE AS  expression;\n\tDEFINE HEADER  | Base.Template.Header  template-path;  \n\t\tstatements-and-attributes\n\t\tEND ;\n\tDYNAMIC  variable-1 <=default-variable-1>\n\t\t<'text-1'> \n\t\t< ...variable-n<=default-variable-n><'text-n'>>;  \n\tMVAR  variable-1 <=default-variable-1><'text-1'> \n\t\t< ...variable-n<=default-variable-n><'text-n'>>;  \n\tNMVAR  variable-1 <=default-variable-1><'text-1'> \n\t\t< ...variable-n<=default-variable-n><'text-n'>>;  \n\tNOTES  \"text\";  \n\tTRANSLATE  expression-1 INTO  expression-2  \n\t\t<, expression-n INTO  expression-m>;  \n\tEND ;","arguments":[{"name":"column-path","placeholder":true,"description":"specifies where to store the column template. A column-path consists of one or more names that are separated by periods. Each name represents a directory in a template store, which is a type of SAS file. PROC TEMPLATE writes the template to the first writable template store in the current path.","help":"*column-path* ","type":"value"},{"name":"Base.Template.Column","description":"creates a top-level column template that is globally applied to all of your tabular output. After you create this template, you do not need to specify it explicitly in your SAS programs. It is automatically applied to all tabular output until you specifically remove the template from the item store.","type":"standalone"},{"name":"STORE=","optional":true,"description":"specifies the template store in which to store the template. If the template store does not exist, it is created.","help":"STORE=*libref*.*template-store*","type":"dataSet"}]},{"name":"DEFINE CROSSTABS","description":"Creates a crosstabulation table template.","help":"DEFINE CROSSTABS  table-path </ STORE=libref.template-store>;  \n\t<table-attribute-1; <table-attribute-n>;>  \n\tCELLVALUE  cellvalues;  \n\tDEFINE CELLVALUE  cellvalue;  \n\t\tstatements-and-attributes;  \n\tEND ;  \n\tDEFINE HEADER  header-name;  \n\t\tstatements-and-attributes;  \n\tEND ;  \n\tDEFINE FOOTER  footer-name;  \n\t\tstatements-and-attributes;  \n\tEND ;  \n\tDYNAMIC  variable-1 <'text-1'> <variable-n<'text-n'>>;  \n\tFOOTER  footer-name(s);  \n\tHEADER  header-name(s);  \n\tNOTES  text; END ;","arguments":[{"name":"table-path","placeholder":true,"description":"specifies where to store the crosstabulation table template. A table-path consists of one or more names, separated by periods. Each name represents a directory in a template store, which is a type of SAS file. For more information about template stores, see . PROC TEMPLATE writes the template to the first writable template store in the current path.","type":"dataSet"},{"name":"STORE=","optional":true,"description":"Specify the template store in which to store the crosstabulation template.","help":"STORE= *template-store*","type":"value"},{"name":"CELL_STYLE=","optional":true,"description":"Specify a style element and any changes to its attributes to use for the cellvalues in the non-summary rows and columns","help":"CELL_STYLE=&lt;*style-element-name*&gt;&lt;[*style-attribute-specification(s)*]&gt; | *style-name*","type":"choice","arguments":[{"name":"style-element-name[style-attribute-specification","placeholder":true,"type":"standaloneOrValue"},{"name":"style-name","placeholder":true,"type":"value"}]},{"name":"COLS_HEADER=","optional":true,"description":"Specify the name of the header to use over the column variable value columns in the table","help":"COLS_HEADER=*header-name*  ","type":"value"},{"name":"COL_TOTAL_STYLE=","optional":true,"description":"Specify the style element and any changes to its attributes to use for the cellvalues in the last row in the table","help":"COL_TOTAL_STYLE=&lt;*style-element-name*&gt;&lt;[*style-attribute-specification(s)*]&gt; ","type":"choice","arguments":[{"name":"style-element-name[style-attribute-specification","placeholder":true,"type":"standaloneOrValue"}]},{"name":"COL_VAR_STYLE=","optional":true,"description":"Specify the style element and any changes to its attributes to use for the column variable values used as headers over the column variable value columns","help":"COL_VAR_STYLE=&lt;*style-element-name*&gt;&lt;[*style-attribute-specification(s)*]&gt;","type":"choice","arguments":[{"name":"style-element-name[style-attribute-specification","placeholder":true,"type":"standaloneOrValue"}]},{"name":"GRAND_TOTAL_STYLE=","optional":true,"description":"Specify the style element and any changes to its attributes to use for the cellvalues in the rightmost column of the last row in the table","help":"GRAND_TOTAL_STYLE=&lt;*style-element-name*&gt;&lt;[*style-attribute-specification(s)*]&gt; ","type":"choice","arguments":[{"name":"style-element-name[style-attribute-specification","placeholder":true,"type":"standaloneOrValue"}]},{"name":"LABEL=","optional":true,"description":"Specify a label for the table","help":"LABEL=\"*text*\" ","type":"value"},{"name":"LEGEND_STYLE=","optional":true,"description":"Specify the style element and any changes to its attributes to use for the legend table that appears near the upper left corner of the table","help":"LEGEND_STYLE=&lt;*style-element-name*&gt;&lt;[*style-attribute-specification(s)*]&gt;","type":"choice","arguments":[{"name":"style-element-name[style-attribute-specification","placeholder":true,"type":"standaloneOrValue"}]},{"name":"ROWS_HEADER=","optional":true,"description":"Specify the name of the header to use over the row variable values (leftmost) column in the table","help":"ROWS_HEADER=*header-name*  ","type":"value"},{"name":"ROW_TOTAL_STYLE=","optional":true,"description":"Specify the style element and any changes to its attributes to use for the cellvalues in the cells that contain row totals","help":"ROW_TOTAL_STYLE=&lt;*style-element-name*&gt;&lt;[*style-attribute-specification(s)*]&gt; ","type":"choice","arguments":[{"name":"style-element-name[style-attribute-specification","placeholder":true,"type":"standaloneOrValue"}]},{"name":"ROW_VAR_STYLE=","optional":true,"description":"Specify the style element and any changes to its attributes to use for the row variable values in the leftmost column of the table","help":"ROW_VAR_STYLE=&lt;*style-element-name*&gt;&lt;[*style-attribute-specification(s)*]&gt;","type":"choice","arguments":[{"name":"style-element-name[style-attribute-specification","placeholder":true,"type":"standaloneOrValue"}]},{"name":"STYLE=","optional":true,"description":"Specify a style element and any changes to its attributes to use for the table","help":"STYLE=&lt;*style-element-name*&gt;&lt;[*style-attribute-specification(s)*]&gt;","type":"choice","arguments":[{"name":"style-element-name","placeholder":true,"description":"is the name of the style element to use to display the table. The style element must be part of a style that is registered with the Output Delivery System. SAS provides some style. You can create customized styles with PROC TEMPLATE. For more information, see . By default, ODS produces different parts of ODS output with different elements. For example, by default, a table is produced with the style element Table. The Table style element that SAS is provides is uniquely designed to describe elements necessary to a table. However, you might have a user-defined style element at your site that would be appropriate to specify.","type":"value"},{"name":"style-attribute-specification","placeholder":true,"description":"describes the style attribute to change.","help":"*style-attribute-specification* ","type":"value"}]}]},{"name":"DEFINE FOOTER","description":"Creates a template for a table footer.","help":"DEFINE FOOTER  footer-path | Base.Template.Footer   \n\t< / STORE=libref.template-store>;\n\t<header/footer-attribute-1<header/footer-attribute-2> ...>;\n\tDYNAMIC  variable-1 <=default-variable-1>\n\t\t<'text-1'> \n\t\t\t< ...variable-n<=default-variable-n><'text-n'>>;\n\tMVAR  variable-1 <=default-variable-1><'text-1'> \n\t\t< ...variable-n<=default-variable-n><'text-n'>>;\n\tNMVAR  variable-1 <=default-variable-1><'text-1'> \n\t\t< ...variable-n<=default-variable-n><'text-n'>>;\n\tNOTES  \"text\";\n\tTEXT  footer-specification;\n\tTEXT2  footer-specification;\n\tTEXT3  footer-specification;\n\tEND ;"},{"name":"DEFINE HEADER","description":"Creates a template for a table header or a header inside a column template.","help":"DEFINE HEADER  header-path | Base.Template.Header  \n\t</ STORE=libref.template-store>;\n\t<header/footer-attribute-1<header/footer-attribute-2> ...>;\n\tDYNAMIC  variable-1 <=default-variable-1> \n\t\t<'text-1'>\n\t\t< ...variable-n<=default-variable-n><'text-n'>>;\n\tMVAR  variable-1 <=default-variable-1><'text-1'> \n\t\t< ...variable-n<=default-variable-n><'text-n'>>;\n\tNMVAR  variable-1 <=default-variable-1><'text-1'> \n\t\t< ...variable-n<=default-variable-n><'text-n'>>;\n\tNOTES  \"text\";\n\tTEXT  header-specification;\n\tTEXT2  header-specification;\n\tTEXT3  header-specification;\n\tEND ;","arguments":[{"name":"header-path","placeholder":true,"description":"specifies where to store the header template. A header-path consists of one or more names, separated by periods. Each name represents a directory in a template store. (A template store is a type of SAS file.) PROC TEMPLATE writes the template to the first writable template store in the current path.","help":"*header-path* ","type":"value"},{"name":"Base.Template.Header","description":"creates a top-level header template that is globally applied to all of your tabular output. After this template is created, you do not need to explicitly specify it in your SAS programs. It is automatically applied to all tabular output until you specifically remove it from the item store.","type":"standalone"},{"name":"Base.Template.Footer","description":"creates a top-level header template that is globally applied to all of your tabular output. After this template is created, you do not need to explicitly specify it in your SAS programs. It is automatically applied to all tabular output until you specifically remove it from the item store.","type":"standalone"},{"name":"STORE=","optional":true,"description":"specifies the template store in which to store the template. If the template store does not exist, it is created.","help":"STORE=*libref*.*template-store*","type":"dataSet"}]},{"name":"DEFINE STYLE","description":"Creates a style for any destination that supports the STYLE= option. The DEFINE STYLE statement begins a DEFINE STYLE statement block.","help":"DEFINE STYLE  style-path | Base.Template.Style </ STORE=libref.template-store>;   \n\tPARENT= style-path;\n\tNOTES  \"text\";\n\tCLASS  style-element-name(s)<\"text\">\n\t\t </ style-attribute-specification(s)>;\n\tIMPORT  style-specification <media-type-1<, media-type-2> ...>;\n\tSTYLE  style-element-name(s) <FROM style-element-name | _SELF_ > <\"text\">\n\t\t </ style-attribute-specification(s)>;END; ","arguments":[{"name":"style-path","placeholder":true,"description":"specifies where to store the style. A style-path consists of one or more names, separated by periods. Each name represents a directory in a template store. PROC TEMPLATE writes the style to the first writable template store in the current path.","help":"*style-path* ","type":"value"},{"name":"Base.Template.Style","description":"creates a style that is the parent of all styles that do not explicitly specify a parent. After this template is created, you do not need to explicitly specify it in your SAS programs. It is automatically applied to all output until you specifically remove it from the item store.","type":"standalone"},{"name":"STORE=","optional":true,"description":"specifies the template store in which to store the style. If the template store does not exist, then it is created.","help":"STORE=*libref*.*template-store*","type":"dataSet"}]},{"name":"DEFINE TABLE","description":"Creates a table template.","help":"DEFINE TABLE  table-path | Base.Template.Table\n\t</ STORE=libref.template-store>;\n\t<table-attribute-1<table-attribute-2> ...>;\n\tCELLSTYLE  expression-1 AS  <style-element-name><[style-attribute-specification(s)] >\n\t\t<, expression-n AS  <style-element-name><[style-attribute-specification(s)]>>;\n\tCOLUMN  column(s);\n\tDEFINE  template-type template-name </ options>;  \n\t\tstatements-and-attributes\n\t\tEND ;\n\tDYNAMIC  variable-1 <=default-variable-1>\n\t\t<'text-1'> < ...variable-n<=default-variable-n><'text-n'>>;\n\tFOOTER  footer-name(s);\n\tHEADER  header-name(s);\n\tMVAR  variable-1 <=default-variable-1><'text-1'> \n\t\t< ...variable-n<=default-variable-n><'text-n'>>;\n\tNMVAR  variable-1 <=default-variable-1><'text-1'> \n\t\t< ...variable-n<=default-variable-n><'text-n'>>;\n\tNOTES  \"text\";\n\tTRANSLATE  expression-1 INTO  expression-2  < , expression-n INTO  expression-m;>\n\tEND ;","arguments":[{"name":"table-path","placeholder":true,"description":"specifies where to store the table template. A table-path consists of one or more names that are separated by periods. Each name represents a directory in a template store, which is a type of SAS file. PROC TEMPLATE writes the template to the first writable template store in the current path.","help":"*table-path* ","type":"dataSet"},{"name":"Base.Template.Table","description":"creates a top-level table template that is globally applied to all of your tabular output. Once this template is created, you do not need to explicitly specify it in your SAS programs. It is automatically applied to all tabular output until you specifically remove it from the item store.","type":"standalone"},{"name":"STORE=","optional":true,"description":"specifies the template store in which to store the template. If the template store does not exist, it is created.","help":"STORE=*libref*.*template-store*","type":"dataSet"}]},{"name":"DEFINE TAGSET","description":"Creates a tagset.","help":"DEFINE TAGSET  tagset-path | Base.Template.Tagset \n \n\t</ STORE=libref.template-store <(READ | WRITE | UPDATE) >>;\n\t\n\t\t<tagset-attribute-1; <tagset-attribute-n;>>  \n\tDEFINE EVENT  event-name;statements and attributes  \n\tNOTES  'text';  \n\tEND ;","arguments":[{"name":"tagset-path","placeholder":true,"description":"specifies where to store the tagset.","help":"*tagset-path* ","type":"value"},{"name":"Base.Template.Tagset","description":"creates a tagset that is the parent of all tagsets that do not explicitly specify a parent. After this template is created, you do not need to explicitly specify it in your SAS programs. It is automatically applied to all output until you specifically remove it from the item store.","type":"standalone"},{"name":"STORE=","optional":true,"description":"specifies the template store where the template is stored.","help":"STORE=*libref*.*template-store* *access-options*","type":"dataSet","arguments":[{"name":"libref.template-store","placeholder":true,"description":"specifies the current template store.","type":"dataSet"},{"name":"READ","description":"provides Read-Only access.","type":"standalone"},{"name":"WRITE","description":"provides Write access as well as Read access. If the tagset does not exist, then WRITE access creates a new tagset. If the tagset does exist, then WRITE access does not replace an existing tagset.","type":"standalone"},{"name":"UPDATE","description":"provides Update access as well as Read access. If the tagset does not exist, then UPDATE does not create a new tagset. If the tagset does exist, then UPDATE replaces it.","type":"standalone"}]},{"name":"BREAKTEXT_LENGTH=","optional":true,"description":"Specify the maximum number of characters that will be considered for forced line breaks by ODS","help":"BREAKTEXT_LENGTH=*number*","type":"value"},{"name":"BREAKTEXT_RATIO=","optional":true,"description":"Specify the maximum ratio of the width of space available for text entry to the length of the text that is supposed to fit in that space","help":"BREAKTEXT_RATIO=*number*","type":"value"},{"name":"BREAKTEXT_WIDTH=","optional":true,"description":"Specify the maximum width of space available for text entry that ODS will consider for placement of automatic line breaks","help":"BREAKTEXT_WIDTH=*number*","type":"value"},{"name":"COPYRIGHT=","optional":true,"description":"Specify the text to use as a copyright","help":"COPYRIGHT= '(*text*)'","type":"value"},{"name":"DEFAULT_EVENT=","optional":true,"description":"Specify the name of the event to use by default","help":"DEFAULT_EVENT= '*event-name*'","type":"value"},{"name":"EMBEDDED_STYLESHEET=","optional":true,"description":"Specify whether the tagset supports embedded style sheets","help":"EMBEDDED_STYLESHEET= YES | NO","type":"choice","arguments":[{"name":"YES","aliases":["ON"],"description":"supports embedded style sheets.","type":"standalone"},{"name":"NO","aliases":["OFF"],"description":"does not support embedded style sheets.","type":"standalone"}]},{"name":"IMAGE_FORMATS=","optional":true,"description":"Specify a comma-delimited list of image types or file extensions that are valid for an output destination","help":"IMAGE_FORMATS= '*image-type(s)*'","type":"value"},{"name":"INDENT=","optional":true,"description":"Specify the number of spaces the NDENT and XDENT event statements indent the output","help":"INDENT=*n*","type":"value","arguments":[{"name":"n","placeholder":true,"description":"specifies a numeric value for the number of spaces that you want the output to indent.","type":"value"}]},{"name":"LOG_NOTE=","optional":true,"description":"Specify a string, which is printed to the SAS log when the tagset is used","help":"LOG_NOTE= '*string*'","type":"value","arguments":[{"name":"string","placeholder":true,"description":"specifies the text that is printed to the SAS log.","type":"value"}]},{"name":"MAP=","optional":true,"description":"Specify special characters and their translations","help":"MAP= '*characters*'","type":"value","arguments":[{"name":"characters","placeholder":true,"description":"specifies one or more special characters.","type":"value"}]},{"name":"MAPSUB=","optional":true,"description":"Specify strings to substitute for special characters","help":"MAPSUB= '*strings*'","type":"value","arguments":[{"name":"strings","placeholder":true,"description":"specifies the text strings to substitute for the characters that are specified in the MAP= statement.","type":"value"}]},{"name":"NOBREAKSPACE=","optional":true,"description":"Define a nonbreaking space for the markup output","help":"NOBREAKSPACE= '*string*'","type":"value","arguments":[{"name":"string","placeholder":true,"description":"specifies the character that defines a nonbreaking space.","type":"value"}]},{"name":"NO_BYTE_ORDER_MARK=","optional":true,"description":"Specify whether a byte-order mark is written to the output files when using a UTF character set","help":"NO_BYTE_ORDER_MARK=YES | ON | NO | OFF","type":"choice","arguments":[{"name":"YES","type":"standalone"},{"name":"ON","type":"standalone"},{"name":"NO","type":"standalone"},{"name":"OFF","type":"standalone"}]},{"name":"OUTPUT_TYPE=","optional":true,"description":"Set a category for the output","help":"OUTPUT_TYPE= CSV | HTML | LATEX | WML | XML","type":"choice","arguments":[{"name":"CSV","type":"standalone"},{"name":"HTML","type":"standalone"},{"name":"LATEX","type":"standalone"},{"name":"WML","type":"standalone"},{"name":"XML","type":"standalone"}]},{"name":"PARENT=","optional":true,"description":"Specify the tagset from which the current template inherits","help":"PARENT= *tagset-path*","type":"value","arguments":[{"name":"tagset-path","placeholder":true,"description":"specifies the name of a directory in a template store.","type":"value"}]},{"name":"PURE_STYLE=","optional":true,"description":"Specify whether all style attributes are available at all times","help":"PURE_STYLE=YES | NO","type":"choice","arguments":[{"name":"YES","type":"standalone"},{"name":"NO","type":"standalone"}]},{"name":"REGISTERED_TM=","optional":true,"description":"Specify the text to use as a registered trademark","help":"REGISTERED_TM= '(*text*)'","type":"value"},{"name":"SPLIT=","optional":true,"description":"Define a string to use for line breaks in the markup output","help":"SPLIT= '*string*'","type":"value"},{"name":"STACKED_COLUMNS=","optional":true,"description":"Specify whether the tagset lets procedures place columns on top of each other, or side by side","help":"STACKED_COLUMNS= YES | NO","type":"choice","arguments":[{"name":"YES","aliases":["ON"],"description":"stacks columns on top of each other.","type":"standalone"},{"name":"NO","aliases":["OFF"],"description":"stacks columns side by side.","type":"standalone"}]},{"name":"TRADEMARK=","optional":true,"description":"Specify the text to use as a trademark","help":"TRADEMARK= '(*text*)'","type":"value"}]},{"name":"PROC TEMPLATE","description":"Begins a PROC TEMPLATE template.","help":"PROC TEMPLATE \n        \n\tDEFINE STYLE \n          style-path            | Base.Template.Style \n          </                 STORE=libref               .template-store\n            >           ; \n\t\tPARENT= style-path;\n          \n\t\tNOTES                \"text\";\n          \n\t\tCLASS \n            style-element-name(s)\n            <\"text\">\n\t\t\t\n            </                   style-attribute-specification(s)>;\n          \n\t\tSTYLE \n            style-element-name(s)\n            <FROM                   style-element-name | _SELF_ >\n            <\"text\">\n\t\t\t\n            </                   style-attribute-specification(s)>;\n          \n\t\tEND ;\n        \n        \n\tEND            ;\n        \n\tEDIT \n          template-path-1\n          <AS                 template-path-2\n            >\n          < /                 STORE=libref               .template-store\n            >            ;             \n\t\tstatements-and-attributes\n          \n\t\tEND ;\n        \n        \n\tDEFINE COLUMN \n          column-path            | Base.Template.Column \n          \n\t\t< /                   STORE=libref.template-store>;\n          \n\t\tstatements-and-attributes\n          \n\t\tEND ;\n        \n        \n\tDEFINE FOOTER \n          footer-path            | Base.Template.Footer \n          \n\t\t< /                   STORE=libref.template-store>;\n          \n\t\tstatements-and-attributes\n          \n\t\tEND ;\n        \n        \n\tDEFINE HEADER \n          template-name            | Base.Template.Header            ;             \n\t\tstatements-and-attributes\n          \n\t\tEND ;\n        \n        \n\tDEFINE TABLE \n          table-path            | Base.Template.Table \n          \n\t\t</                   STORE=libref.template-store>;\n          \n\t\tstatements-and-attributes\n          \n\t\tEND ;\n        \n        \n\tDEFINE CROSSTABS \n          table-path\n          </                 STORE=libref.template-store\n            >           ; \n\t\t<table-attribute-1               ; <table-attribute-n>               ;>\n          \n\t\tCELLVALUE \n            cellvalues;\n          \n\t\tDEFINE CELLVALUE \n            cellvalue;                 \n\t\t\tstatements-and-attributes               ;\n          \n          \n\t\tEND ;\n          \n\t\tDEFINE HEADER \n            header-name;                 \n\t\t\tstatements-and-attributes               ;\n          \n          \n\t\tEND ;\n          \n\t\tDEFINE FOOTER \n            footer-name;                 \n\t\t\tstatements-and-attributes               ;\n          \n          \n\t\tEND ;\n          \n\t\tDYNAMIC \n            variable-1\n            <'text-1'>\n            <variable-n<'text-n                   '>>;\n          \n\t\tFOOTER \n            footer-name(s);\n          \n\t\tHEADER  header-name(s);\n          \n\t\tNOTES \n            text; \n        \n        \n\tDEFINE TAGSET \n          tagset-path\n          </                 STORE=libref               .template-store\n            >           ; \n\t\t<tagset-attribute-1               ; <...                     tagset-attribute-n                   ;>>\n          \n\t\tDEFINE EVENT \n            event-name;                   \n\t\t\t<event-attribute-1;<event-attribute-n                   ;>>\n            \n            \n\t\t\tBLOCK \n              event-name\n              < /                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tBREAK \n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tCLOSE \n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tCONTINUE \n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tDELSTREAM                 $$stream-variable-name\n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tDO \n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tDONE                ;\n            \n\t\t\tELSE \n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tEVAL                 $<$>\n              user-defined-variable\n              where-expression\n              < / event-statement-condition(s)\n                >               ;\n            \n\t\t\tFLUSH \n              </event-statement-condition(s)\n                >               ;\n            \n\t\t\tITERATE                 $dictionary-variable                | $list-variable\n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tNDENT \n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tNEXT                 $dictionary-variable                | $list-variable\n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tOPEN                 $$stream-variable-name\n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tPUT \n              <function>\n              <NL>\n              <variable>\n              <'text                   ' >\n              < /                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tPUTL                 (<variable>                | <'text                   ' >               | <function>                | <NL>               ) < /                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tPUTLOG                 (<variable>\n              <'text                   ' >\n              <function>               )</                     event-statement-condition(s)\n                >               ;\n            \n\t\t\t\n              PUTQ                 (<variable>                | <'text                   ' >               | <function>                | <NL>               )</                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tPUTSTREAM                 $$stream-variable-name\n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\t\n              PUTVARS \n              variable-group\n              variable-group-value\n              < /                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tSET                 $<$>\n              user-defined-variable-name\n              user-defined-variable-value\n              \n\t\t\t\t</                       event-statement-condition(s)>;\n            \n            \n\t\t\tSTOP \n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tTRIGGER \n              event-name\n              <START | FINISH >\n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tUNBLOCK \n              event-name\n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tUNSET \n              ALL                | $memory-variable                | $$stream-variable\n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tXDENT \n              </                     event-statement-condition(s)\n                >               ;\n            \n\t\t\tEND                ;\n          \n          \n\t\tNOTES ;\n          \n\t\tEND ;\n        \n        \n\tDELETE \n          item-path\n          < /                 STORE=libref               .template-store\n            >           ;\n        \n\tLINK \n          item-path-1\n          TO  \n          item-path-2\n          </options\n            >           ;\n        \n\tLIST \n          <starting-path>\n          </                 options\n            >           ;\n        \n\tPATH \n          location(s)           ;\n        \n\tSOURCE \n          item-path\n          </options\n            >\n          <STORE=libref               .template-store\n            >           ;\n        \n\tTEST             DATA=data-set\n          < /                 STORE=libref               .template-store\n            >           ;\n        \n\tEND            ;\n      "},{"name":"DEFINE","description":"Creates a template inside of a table template.","help":"DEFINE  <COLUMN | FOOTER | HEADER> template-name < / NOLIST>;   \n\tstatements-and-attributes;END ;","arguments":[{"name":"template-name","placeholder":true,"description":"specifies the name of the new template.","help":"*template-name* ","type":"value"},{"name":"COLUMN","optional":true,"description":"specifies to create a column template. For statements and attributes that can be used within a column template, see .","type":"standalone"},{"name":"FOOTER","optional":true,"description":"specifies to create a footer template. For statements and attributes that can be used within a footer template, see .","type":"standalone"},{"name":"HEADER","optional":true,"description":"specifies to create a header template. For statements and attributes that can be used within a header template, see .","type":"standalone"},{"name":"NOLIST","optional":true,"followsDelimiter":"/","description":"preserves the template-type when inheriting it from another table template.","type":"standalone"}]},{"name":"DELETE","description":"Deletes the specified item.","help":"DELETE  *item-path* &lt; /  STORE= *template-store*; &gt;","arguments":[{"name":"item-path","placeholder":true,"description":"specifies an item to delete. An item-path consists of one or more names, separated by periods. Each name represents a directory in a template store. (A template store is a type of SAS file.) If the same item exists in multiple template stores, PROC TEMPLATE deletes the item from the first template store in the current path where you have Write access.","type":"value"},{"name":"STORE=","optional":true,"description":"specifies the template store where the template that you want to delete is stored.","help":"STORE= *template-store*","type":"value"}]},{"name":"EDIT","description":"Edits an existing template. The EDIT statement replaces the DEFINE statement in a template block when editing. You can use the EDIT statement in place of any DEFINE statement.","help":"EDIT  template-path-1 <AS template-path-2 > </ STORE=libref.template-store>;   \n\ttemplate-statements;  \n\tEND ;","arguments":[{"name":"template-path-1","placeholder":true,"description":"specifies a template to edit. template-path-1 consists of one or more names that are separated by periods. Each name represents a directory in a template store, which is a type of SAS file.","type":"value"},{"name":"AS","optional":true,"description":"specifies the location in which to store the edited template, where template-path-2 consists of one or more names that are separated by periods. Each name represents a directory in a template store, which is a type of SAS file. By default, PROC TEMPLATE writes the edited template to the first writable template store in the current path.","help":"AS *template-path-2*","type":"value"},{"name":"STORE=","optional":true,"description":"specifies the template store from which to read template-path-1 and in which to store template-path-2.","help":"STORE=*libref*.*template-store*","type":"dataSet"},{"name":"template-statements","optional":true,"placeholder":true,"description":"template-statements are any statements or attributes that are valid between the DEFINE statement and the END statement.","type":"value"}]},{"name":"LINK","description":"Creates a link to an existing item.","help":"LINK  *item-path-1* TO  *item-path-2* &lt;/ *options*&gt;;","arguments":[{"name":"item-path-1","placeholder":true,"description":"specifies the path of the item to create. PROC TEMPLATE creates the item in the first template store in the path that you can write to.","type":"value"},{"name":"item-path-2","placeholder":true,"description":"specifies the path of the item to link to. If the same item exists in multiple template stores, PROC TEMPLATE uses the one from the first template store in the current path that you can read.","type":"value"},{"name":"NOTES=","optional":true,"description":"specifies notes to store in the item.","help":"NOTES= '*text*'","type":"value"},{"name":"STORE=","optional":true,"description":"specifies the location where the link is created.","help":"STORE=*libref*.*template-store*","type":"dataSet"}]},{"name":"LIST","description":"Lists the items in one or more template stores.","help":"LIST  &lt;*starting-path*&gt;&lt;/ *options*&gt;;","arguments":[{"name":"starting-path","optional":true,"placeholder":true,"description":"specifies a level within each template store where PROC TEMPLATE starts listing items. For example, if starting-path is base.univariate, PROC TEMPLATE lists only base.univariate and the items within it and within all the levels that it contains.","type":"value"},{"name":"SORT=","optional":true,"description":"sorts the list of items by the specified statistic in the specified sorting order.","help":"SORT=*statistic* &lt;*sorting-order*&gt;","type":"value","arguments":[{"name":"CREATED","description":"is the date on which the item was created.","type":"standalone"},{"name":"NOTES","aliases":["LABEL"],"description":"is the content of any NOTES statement in the PROC TEMPLATE step that created the item.","type":"standalone"},{"name":"LINK","description":"is the name of the item that the current item links to (see ).","type":"standalone"},{"name":"PATH","description":"is the path to the current item in the template store. (The path does not include the name of the template store).","type":"standalone"},{"name":"SIZE","description":"is the size of the item.","type":"standalone"},{"name":"TYPE","description":"is the type of the item: COLUMN, FOOTER, HEADER, STYLE, TABLE, or LINK. If the item is simply a level in the item store, its type is DIR.","type":"standalone"},{"name":"ASCENDING","aliases":["A"],"description":"sorts from low values to high values.","type":"standalone"},{"name":"DESCENDING","aliases":["D"],"description":"sorts from high values to low values.","type":"standalone"}]},{"name":"STATS=","optional":true,"description":"specifies the information to include in the list of items.","help":"STATS=ALL | STORE | *(statistic-1 &lt;, … statistic-n&gt;)*","type":"choice","arguments":[{"name":"ALL","description":"includes all available information.","type":"standalone"},{"name":"STORE","description":"specifies the name of the template store that contains the items.","type":"standalone"},{"name":"CREATED","description":"is the date on which the item was created.","type":"standalone"},{"name":"NOTES","aliases":["LABEL"],"description":"is the content of any NOTES statement in the PROC TEMPLATE step that created the item.","type":"standalone"},{"name":"LINK","description":"is the name of the item that the current item links to (see ).","type":"standalone"},{"name":"SIZE","description":"is the size of the item.","type":"standalone"}]},{"name":"STORE=","optional":true,"description":"specifies the template store to process.","help":"STORE=*libref*.*template-store* ","type":"dataSet"},{"name":"WHERE=","optional":true,"description":"selects, for listing, items that meet a particular condition. For example, the following statement lists items that contain the word \"Default\" in the path to the current template:","help":"WHERE=*where-expression*","type":"value","arguments":[{"name":"PATH","aliases":["NAME","_NAME_","TEMPLATE","_TEMPLATE_"],"description":"is the fully qualified path of a template.","type":"standalone"},{"name":"_PATH_","aliases":["NAME","_NAME_","TEMPLATE","_TEMPLATE_"],"description":"is the fully qualified path of a template.","type":"standalone"},{"name":"STORE","description":"is the name of the template store that contains the item.","type":"standalone"},{"name":"TYPE","description":"is the type of the item. TYPE is one of the following:","type":"standalone"},{"name":"_TYPE_","description":"is the type of the item. TYPE is one of the following:","type":"standalone"},{"name":"NOTES","aliases":["LABEL"],"description":"is the content of any NOTES statement in the PROC TEMPLATE step that created the item. The contents is displayed in the LABEL field.","type":"standalone"},{"name":"SIZE","description":"is the size of the item in bytes.","type":"standalone"},{"name":"CREATED","description":"is the date on which the item was created.","type":"standalone"},{"name":"CDATE","description":"is the creation date of the item.","type":"standalone"},{"name":"_CDATE_","description":"is the creation date of the item.","help":"_CDATE_ ","type":"standalone"},{"name":"CDATETIME","description":"is the creation datetime of the item.","type":"standalone"},{"name":"_CDATETIME_","description":"is the creation datetime of the item.","type":"standalone"},{"name":"CTIME","description":"is the creation time of the item.","type":"standalone"},{"name":"_CTIME_","description":"is the creation time of the item.","type":"standalone"},{"name":"MDATE","description":"is the modification date of the item.","type":"standalone"},{"name":"_MDATE_","description":"is the modification date of the item.","type":"standalone"},{"name":"MDATETIME","description":"is the modification datetime of the item.","type":"standalone"},{"name":"_MDATETIME_","description":"is the modification datetime of the item.","help":"_MDATETIME_   ","type":"standalone"},{"name":"MODIFIED","description":"is the date on which the item was modified.","type":"standalone"},{"name":"MTIME","description":"is the modification time of the item.","type":"standalone"},{"name":"_MTIME_","description":"is the modification time of the item.","type":"standalone"},{"name":"comparison-operator","placeholder":true,"description":"compares a variable with a value or with another variable. The following table lists the comparison operators:","help":"*comparison-operator*","type":"value"}]}]},{"name":"PATH","description":"Specifies locations to write to or read from when you create or use PROC TEMPLATE templates or definitions, and specifies the order in which to search for them. This statement overrides the ODS PATH statement for the duration of the PROC TEMPLATE step.","help":"PATH  &lt;(APPEND | )(PREPEND | )(REMOVE)&gt; *location(s)*;PATH  *path-argument*;","arguments":[{"name":"<libref.>item-store","placeholder":true,"description":"identifies an item store to read from, to write to, or to update. If an item store does not already exist, then the PATH statement creates it.","type":"dataSet"},{"name":"(READ","description":"specifies the access mode for the item. An access mode is one of the following:","type":"standalone"},{"name":"UPDATE","description":"specifies the access mode for the item. An access mode is one of the following:","type":"standalone"},{"name":"WRITE)","description":"specifies the access mode for the item. An access mode is one of the following:","help":"WRITE) ","type":"standalone"},{"name":"RESET","description":"sets the ODS path to the default settings Sasuser.Templat (UPDATE) and Sashelp.Tmplmst (READ).","type":"standalone"},{"name":"SHOW","description":"displays the current ODS path.","type":"standalone"},{"name":"VERIFY","description":"sets the ODS path to include only templates supplied by SAS. Specifying VERIFY is the same as specifying ODS PATH Sashelp.Tmplmst (READ).","type":"standalone"},{"name":"(APPEND","optional":true,"description":"adds one or more locations to a path, or removes one or more locations from a path.","type":"standalone"},{"name":"PREPEND","optional":true,"description":"adds one or more locations to a path, or removes one or more locations from a path.","type":"standalone"},{"name":"REMOVE","optional":true,"description":"adds one or more locations to a path, or removes one or more locations from a path.","help":"REMOVE )","type":"standalone"}]},{"name":"SOURCE","description":"Writes the source code for the template specified to the SAS log.","help":"SOURCE  *item-path* &lt;/ *options*&gt;; ","arguments":[{"name":"item-path","placeholder":true,"description":"specifies the path of the item that you want to write to the SAS log. If the same item exists in multiple template stores, PROC TEMPLATE uses the one from the first template store that you can read in the current path.","type":"value"},{"name":"EXPAND","optional":true,"description":"prints the source of all parents of a template.","type":"standalone"},{"name":"FILE=","optional":true,"description":"specifies a file to write the item to.","help":"FILE= '*file-specification*' | *fileref*","type":"choice","arguments":[{"name":"'file-specification'","placeholder":true,"description":"is the name of an external file to write to.","type":"value"},{"name":"fileref","placeholder":true,"description":"is a file reference that has been assigned to an external file. Use the FILENAME statement to assign a fileref.","help":"*fileref* ","type":"value"}]},{"name":"NOFOLLOW","optional":true,"description":"specifies that the program does not resolve links in the PARENT= statement, which specifies the item that the current item inherits from. For information about the PARENT= statement, see in the styles attribute section.","type":"standalone"},{"name":"STORE=","optional":true,"description":"specifies the template store where the item is located.","help":"STORE= *libref.template-store*","type":"dataSet"},{"name":"WHERE=","optional":true,"description":"selects items that meet a particular condition. For example, the following statement displays the source code for items that contain the word \"Default\" in the path to the current template: source / where=(path ? 'Default');","help":"WHERE=(*where-expression*)","type":"value","arguments":[{"name":"PATH","aliases":["NAME","_NAME_","TEMPLATE","_TEMPLATE_"],"description":"is the fully qualified path of a template.","type":"standalone"},{"name":"_PATH_","aliases":["NAME","_NAME_","TEMPLATE","_TEMPLATE_"],"description":"is the fully qualified path of a template.","type":"standalone"},{"name":"TYPE","description":"is the type of the item. TYPE is one of the following:","type":"standalone"},{"name":"_TYPE_","description":"is the type of the item. TYPE is one of the following:","type":"standalone"},{"name":"NOTES","aliases":["LABEL"],"description":"is the content of any NOTES statement in the PROC TEMPLATE step that created the item. The contents is displayed in the LABEL field.","type":"standalone"},{"name":"SIZE","description":"is the size of the item in bytes.","type":"standalone"},{"name":"CREATED","description":"is the date on which the item was created.","type":"standalone"},{"name":"CDATE","description":"is the creation date of the item.","type":"standalone"},{"name":"_CDATE_","description":"is the creation date of the item.","help":"_CDATE_ ","type":"standalone"},{"name":"CDATETIME","description":"is the creation datetime of the item.","type":"standalone"},{"name":"_CDATETIME_","description":"is the creation datetime of the item.","type":"standalone"},{"name":"CTIME","description":"is the creation time of the item.","type":"standalone"},{"name":"_CTIME_","description":"is the creation time of the item.","type":"standalone"},{"name":"MDATE","description":"is the modification date of the item.","type":"standalone"},{"name":"_MDATE_","description":"is the modification date of the item.","type":"standalone"},{"name":"MDATETIME","description":"is the modification datetime of the item.","type":"standalone"},{"name":"_MDATETIME_","description":"is the modification datetime of the item.","help":"_MDATETIME_  ","type":"standalone"},{"name":"MODIFIED","description":"is the date on which the item was modified.","type":"standalone"},{"name":"MTIME","description":"is the modification time of the item.","type":"standalone"},{"name":"_MTIME_","description":"is the modification time of the item.","type":"standalone"},{"name":"comparison-operator","placeholder":true,"description":"compares a variable with a value or with another variable. The following table lists the comparison operators:","help":"*comparison-operator*","type":"value"}]}]},{"name":"TEST","description":"Tests the most recently created item by binding it to the specified data set.","help":"TEST   DATA=*data-set* &lt;/ STORE=*libref*.*template-store*&gt;;  ","arguments":[{"name":"DATA=","description":"specifies the SAS data set to bind to the most recently created item. ODS sends this output object to all open ODS destinations.","help":"DATA=*data-set*","type":"dataSet"},{"name":"STORE=","optional":true,"description":"specifies the template store where the item is located.","help":"STORE=*libref*.*template-store*","type":"dataSet"}]}],"supportSiteInformation":{"docsetId":"odsproc","docsetVersion":"v_003","docsetTargetFile":"p1e7inim7w83xun1oq20jg6z2uez.htm"}}