{"name":"TEXTCATEGORY","statements":[{"name":"PROC TEXTCATEGORY","description":"The TEXTCATEGORY procedure provides development packages for a category model. The procedure checks the syntax of textual category rules and generates information about syntax errors in the rules. It uses textual category rules to generate a category model. The procedure also creates an analytic store for the category model.","help":"PROC TEXTCATEGORY  DATA=libref.data-table CONCEPT=libref.data-table LANGUAGE=language SYNTAXERRORS=libref.data-table TOKENIZER=BASIC|STANDARD ;\n\tASTORESETTINGS  ALGORITHM=FREQUENCY|WEIGHTED DOCTYPE=TEXT|XML MAXCHAR=n OUTPUTMODE=DATAGRID|DEFAULT TEXT=\"string\";\n\tID  variable;\n\tINPUT  variable;\n\tOUTPUT  OUT=libref.data-table;\n\tSAVESTATE  RSTORE=libref.data-table;\n            ","arguments":[{"name":"DATA=","description":"names the input data table for PROC TEXTCATEGORY to use. Each row of the input data table must contain one character variable and one ID variable that correspond to the textual category rule and the unique ID of each row, respectively.","help":"DATA=*libref.data-table*","type":"dataSet"},{"name":"CONCEPT=","optional":true,"description":"specifies an input table that contains a language interpretation and text interpretation (LITI) model. The LITI model, which is also called the concept model, is used for concept definition and extraction. You can use the category rules to reference the concepts that are defined in the LITI model. You can create a LITI model by using the TEXTCONCEPT procedure.","help":"CONCEPT=*libref.data-table*","type":"dataSet"},{"name":"LANGUAGE=","optional":true,"description":"specifies the language to use for generating the category model. This value is either the name or the two-letter ISO 639-1 language code of a licensed language. The category model is a language-specific model. If you omit this option, then the default language (English) is used.","help":"LANGUAGE=*language*","type":"value"},{"name":"SYNTAXERRORS=","optional":true,"description":"specifies the output table that contains information about syntax errors in the category rules.","help":"SYNTAXERRORS=*libref.data-table*","type":"dataSet"},{"name":"TOKENIZER=","optional":true,"description":"specifies which tokenizer to use in the category model. You can specify the following values:","help":"TOKENIZER=BASIC | STANDARD","type":"choice","arguments":[{"name":"BASIC","description":"applies a basic tokenizer that treats all characters as separate words. It is used only when you the set the LANGUAGE= option to a value of CHINESE, JAPANESE, or KOREAN.","type":"standalone"},{"name":"STANDARD","description":"applies a language-specific tokenizer. All licensed languages support the default standard value.","type":"standalone"}]}]},{"name":"ASTORESETTINGS","description":"The ASTORESETTINGS statement enables you to configure the category analytic store that you save by using the SAVESTATE statement.","help":"ASTORESETTINGS  *ALGORITHM=FREQUENCY|WEIGHTED* *DOCTYPE=TEXT|XML* *MAXCHAR=n* *OUTPUTMODE=DATAGRID|DEFAULT* *TEXT=\"string\"*;","arguments":[{"name":"ALGORITHM=","optional":true,"description":"specifies the type of scoring algorithm to use. By default, ALGORITHM=FREQUENCY.","help":"ALGORITHM=FREQUENCY | WEIGHTED","type":"choice","arguments":[{"name":"FREQUENCY","description":"applies the frequency-based algorithm in scoring. This algorithm calculates the scores by using a count of the total number of instances of matching terms that are found in an input document. This is the default.","type":"standalone"},{"name":"WEIGHTED","description":"applies the relevancy-based (weighted) algorithm in scoring. This algorithm calculates the scores according to a number of criteria, such as the occurrence of words or phrases, the specified weighting of those words, their location, and so on.","type":"standalone"}]},{"name":"DOCTYPE=","optional":true,"description":"specifies how to treat the input document to be used in scoring. You can specify the following values:","help":"DOCTYPE=TEXT | XML","type":"choice","arguments":[{"name":"TEXT","description":"treats the input documents as raw text in scoring. This is the default.","type":"standalone"},{"name":"XML","description":"treats the input documents as XML in scoring.","type":"standalone"}]},{"name":"MAXCHAR=","optional":true,"description":"specifies the length of output character variables to use in scoring the category analytic store model. By default, MAXCHAR=1024. When you use the DS2 language to score an analytic store model, the VARCHAR output is truncated if the output text exceeds the VARCHAR length. You can use this option to modify the VARCHAR length. When you score an analytic store model by using the EPCODE= option in the DESCRIBE statement in PROC ASTORE, the value that you specify in the MAXCHAR= option must be greater than or equal to the value necessary to avoid truncating the output columns. The maximum width of column output when you score an analytic store model in this way on the client is 32,767 characters. Wider column output is truncated.","help":"MAXCHAR=*n*","type":"value"},{"name":"OUTPUTMODE=","optional":true,"description":"specifies which output tables to generate when the category analytic store model is scored. You can specify the following values:","help":"OUTPUTMODE=DATAGRID | DEFAULT","type":"choice","arguments":[{"name":"DATAGRID","description":"specifies that the category analytic store model create one output table that includes category results.","type":"standalone"},{"name":"DEFAULT","description":"specifies that the category analytic store model create three output tables from the input table.","type":"standalone"}]},{"name":"TEXT=","optional":true,"description":"specifies the name of the variable that contains documents for scoring the model. This is the name of the text variable that will be saved in the analytic store model. The default value is \"_text_\". When the analytic store is used, a procedure requires a table that has this variable name. This value can be used by PROC ASTORE in a subsequent scoring step.","help":"TEXT=*\"string\"*","type":"value"}]},{"name":"ID","description":"The ID statement specifies the variable that contains the rule IDs. In the input data table, each row corresponds to one or more rules. The ID of each row must be unique; it can be either a number or a string of characters. The TEXTCATEGORY procedure excludes the rules that have missing ID values from the syntax checking.","help":"ID  *variable*;","arguments":[{"name":"variable","placeholder":true,"description":"names the ID variable.","type":"value"}]},{"name":"INPUT","description":"The INPUT statement specifies the variable that contains the category rules.","help":"INPUT  *variable*;","arguments":[{"name":"variable","placeholder":true,"description":"names the INPUT variable.","type":"value"}]},{"name":"OUTPUT","description":"The OUTPUT statement creates an output data set that contains the category model.","help":"OUTPUT  *OUT=libref.data-table*;","arguments":[{"name":"OUT=","description":"names the table to contain the category model.","help":"OUT=*libref.data-table*","type":"dataSet"}]},{"name":"SAVESTATE","description":"The SAVESTATE statement saves a category analytic store model in a data table. The analytic store contains the necessary information for scoring a category model by using the ASTORE procedure.","help":"SAVESTATE  *RSTORE=libref.data-table*;","arguments":[{"name":"RSTORE=","description":"specifies a data table in which to save the category analytic store model.","help":"RSTORE=*libref.data-table*","type":"dataSet"}]}],"supportSiteInformation":{"docsetId":"casvta","docsetVersion":"latest","docsetTargetFile":"casvta_textcategory_toc.htm"}}