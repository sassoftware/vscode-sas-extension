{"name":"TREESPLIT","statements":[{"name":"PROC TREESPLIT","description":"The TREESPLIT procedure builds tree-based statistical models for classification and regression in SAS Viya. The procedure produces a classification tree, which models a categorical response, or a regression tree, which models a continuous response. Both types of trees are referred to as decision trees, because the model is expressed as a series of if-then statements. For each type of tree, you specify a response variable (also called a target variable), whose values you want PROC TREESPLIT to predict, and one or more input variables (called predictor variables), whose values the procedure uses to predict the values of the target variable.","help":"PROC TREESPLIT <ASSIGNMISSING=BRANCH | MACSMALL | POPULAR... >\n        <BINMETHOD=BUCKET | QUANTILE>\n        <CLUSTERSPLIT>\n        <CVCC>\n        <DATA=CAS-libref.data-table>\n        <INMODEL=< CAS-libref. >data-table>\n        <MAXBRANCH=b>\n        <MAXDEPTH= integer >= 1>\n        <MINLEAFSIZE=number>\n        <MINUSEINSEARCH=number>\n        <NOPRINT>\n        <NSURROGATES=number>\n        <NUMBIN=number>\n        <OUTMODEL=CAS-libref.data-table>\n        <PLOTS < (global-plot-option) > < = plot-request < (options) > >PLOTS < (global-plot-option) > < = (plot-request < (options) > < . . . plot-request < (options) > >) >>\n        <PRINTTARGET>\n        <PRUNINGTABLE>\n        <RBAIMP>\n        <SEED=number>\n        <SPLITONCE>\n        <VII=2 | 3>; \n\tAUTOTUNE <EVALHISTORY=<ALL | LOG | NOE>... >\n          <FRACTION=number>\n          <KFOLD=number> ...;\n        \n\tCLASS variables;\n        \n\tCODE <FILE=filename> ;\n        \n\tCROSSVALIDATION           <KFOLD=number | NOPARALLEL | NSUBSESSIONWORKERS=number>\n        \n\tFREQ variable ;\n        \n\tGROW <CHAID < (options) >>\n          <CHISQUARE < (options) >>\n          <ENTROPY (<options>) | GAIN < option >> ...;\n        \n\tINPUT           <LEVEL=<INTERVAL | NOMINAL>>           ;\n        \n\tMODEL response = variable ;\n        \n\tOUTPUT <>\n          <OUT=CAS-libref.data-table> ;\n        \n\tPARTITION <FRACTION(< TEST=fraction > < VALIDATE=fraction > < SEED=number >)>\n          <ROLE=|ROLEVAR=variable (< TEST='value' > < TRAIN='value' > < VALIDATE='value' >)>           ;\n        \n\tPRUNE <C45 < (CONFIDENCE=confidence-level) >>\n          <COSTCOMPLEXITY < (prune-options) > | CC < (prune-options) >>\n          <OFF> ...;\n        \n\tSCORE <COPYVAR=variable | COPYVARS=(variables)>\n          <OUT=CAS-libref.data-table> ;\n        \n\tTARGET           <LEVEL=<INTERVAL | NOMINAL>>           ;\n        \n\tWEIGHT variable;\n      ","arguments":[{"name":"ASSIGNMISSING=","optional":true,"description":"Specifies how to handle missing values of predictor variables during training and how to handle missing values and unknown levels of predictor variables after all surrogate rules have been applied during scoring. An unknown level of a categorical predictor variable is a level that does not exist in the training data but is encountered during scoring. During scoring, unknown levels are treated as missing values.","help":"ASSIGNMISSING=BRANCH | MACSMALL | POPULAR | SIMILAR | USEINSEARCH | NONE","type":"choice","arguments":[{"name":"BRANCH","description":"During the training phase, assigns any observation that has a missing value for the predictor variable to a specially created child node (branch). If all observations have nonmissing values for a predictor variable, then no branch is created to contain observations with missing values.","type":"standalone"},{"name":"MACSMALL","description":"During the training phase, treats a missing value in a categorical predictor variable as a separate, legitimate value. If all observations have nonmissing values for a categorical predictor variable, then no branch is selected to contain observations with missing values.","type":"standalone"},{"name":"POPULAR","description":"During the training phase, assigns any observation that has a missing value in the predictor variable to the child node that has the most training observations","type":"standalone"},{"name":"SIMILAR","description":"During the training phase, assigns any observation that has a missing value in the predictor variable to the child node whose observations are most similar to it. This similarity is determined using the chi-square criterion for categorical responses or the F-test criterion for continuous responses. If all observations have nonmissing values for a predictor variable, then no branch is selected to contain observations with missing values.","type":"standalone"},{"name":"USEINSEARCH","description":"During the training phase, treats a missing value in a predictor variable as a separate, legitimate value. If all observations have nonmissing values for a predictor variable, then no branch is selected to contain observations with missing values.","type":"standalone"},{"name":"NONE","description":"During the training phase, excludes any observation that has a missing value for any predictor variable. In the scoring phase, if an observation has a missing value or an unknown level for a predictor variable, then the observation is assigned to the child node that contains the most training observations.","type":"standalone"}]},{"name":"BINMETHOD=","optional":true,"description":"Specifies how to bin interval input variables prior to growing the decision tree. The number of bins that are created is determined by the NUMBIN= option.","help":"BINMETHOD=BUCKET | QUANTILE","type":"choice","arguments":[{"name":"BUCKET","description":"Bins interval input variables into fixed-width bins.","type":"standalone"},{"name":"QUANTILE","description":"Bins interval input variables into bins according to their quantile.","type":"standalone"}]},{"name":"CLUSTERSPLIT","optional":true,"description":"Determines the splits at each node using clustering on each input variable, and then chooses the splitting variable on the basis of which variable and split optimize the criterion that is specified in the GROW statement.","type":"standalone"},{"name":"CVCC","optional":true,"aliases":["CVCOSTCOMPLEXITY"],"description":"Requests a table of the results of cost-complexity pruning based on cross validation. For each penalty parameter in the cross validation, the table provides the penalty parameter, the minimum, the maximum, and the average error. The error is the misclassification rate when the response variable is categorical and is the average square error (ASE) when the response variable is continuous. You can use the PLOTS=CVCC option to request a plot of the information in this table.","type":"standalone"},{"name":"DATA=","optional":true,"description":"Names the input data table for PROC TREESPLIT to use. CAS-libref.data-table is a two-level name, where","help":"DATA=*CAS-libref.data-table*","type":"dataSet"},{"name":"INMODEL=","optional":true,"description":"Specifies the data table that you have previously saved as a tree model by using the OUTMODEL= option in a previous run of PROC TREESPLIT. CAS-libref.data-table is a two-level name, where CASlibref refers to the caslib and session identifier, and data-table specifies the name of the input data table.","type":"value"},{"name":"MAXBRANCH=","optional":true,"description":"Specifies the maximum number of child nodes per parent node in the tree. PROC TREESPLIT tries to create this number of children unless it is impossible (for example, if a split variable does not have enough levels). By default, MAXBRANCH=2.","help":"MAXBRANCH=*b*","type":"value"},{"name":"MAXDEPTH=","optional":true,"description":"Specifies the maximum depth to which you wish to grow your decision tree.","type":"value"},{"name":"MINLEAFSIZE=","optional":true,"description":"Specifies the minimum number of observations in the training data that each child of a split must contain in order for the split to be considered. By default, MINLEAFSIZE=1.","help":"MINLEAFSIZE=*number*","type":"value"},{"name":"MINUSEINSEARCH=","optional":true,"description":"Specifies a threshold for using missing values in the split search when ASSIGNMISSING= USEINSEARCH as the missing value policy. If the number of observations that have missing values for the splitting variable is greater than or equal to number, then PROC TREESPLIT uses the USEINSEARCH policy for missing values.","help":"MINUSEINSEARCH=*number*","type":"value"},{"name":"NOPRINT","optional":true,"description":"Specifies to turn off all printing of ODS tables and graphics.","type":"standalone"},{"name":"NSURROGATES=","optional":true,"description":"Specifies the number of surrogate rules to create for each splitting rule, where number is an integer greater than 0. Surrogate rules are backup splitting rules that are used when the variable that corresponds to the primary splitting rule is missing. Both this option and the ASSIGNMISSING= affect training and scoring.","help":"NSURROGATES=*number*","type":"value"},{"name":"NUMBIN=","optional":true,"description":"Specifies the number of bins to use for binning interval predictor variables. PROC TREESPLIT bins continuous predictors to a fixed bin size. This option controls the number of bins and thereby also the size of the bins.","help":"NUMBIN=*number*","type":"value"},{"name":"OUTMODEL=","optional":true,"description":"Names the output data table to which you want to save the decision tree model. CAS-libref.data-table is a two-level name, where","help":"OUTMODEL=*CAS-libref.data-table*","type":"dataSet"},{"name":"PLOTS=","optional":true,"description":"Controls the plots that are produced through ODS Graphics. When you specify only one plot-request, you can omit the parentheses around it. global-plot-option: ONLY suppresses the default plots. Only plots that you specifically request are displayed.","help":"PLOTS=LINKSTYLE | CURVED | ORTHOGONAL | STRAIGHT | LINKWIDTH | CONSTANT | PROPORTIONAL | NOLEGEND | DEPTH | NODES | ONLY","type":"choice","arguments":[{"name":"LINKSTYLE","type":"standalone"},{"name":"CURVED","type":"standalone"},{"name":"ORTHOGONAL","type":"standalone"},{"name":"STRAIGHT","type":"standalone"},{"name":"LINKWIDTH","type":"standalone"},{"name":"CONSTANT","type":"standalone"},{"name":"PROPORTIONAL","type":"standalone"},{"name":"NOLEGEND","type":"standalone"},{"name":"DEPTH","type":"standalone"},{"name":"NODES","type":"standalone"},{"name":"ONLY","type":"standalone"}]},{"name":"PRINTTARGET","optional":true,"description":"Outputs tables that indicate generated columns in the OUT= table from the OUTPUT statement.","type":"standalone"},{"name":"PRUNINGTABLE","optional":true,"description":"Outputs a table of the pruning results.","type":"standalone"},{"name":"RBAIMP","optional":true,"description":"Creates a variable importance table by using random branch assignment (RBA). This table is created in addition to the normal variable importance table that is calculated using the residual sum of squares (RSS) error.","type":"standalone"},{"name":"SEED=","optional":true,"description":"Specifies the initial seed for random number generation for cross validation. The value of number must be an integer. By default, the seed is generated by reading the time of day from the computer’s clock.","help":"SEED=*number*","type":"value"},{"name":"SPLITONCE","optional":true,"description":"Specifies the that an input variable should only be split once.","type":"standalone"},{"name":"VII=","optional":true,"aliases":["INTERACTIONIMP="],"description":"Calculates the variable interaction importance, which is described in the section Variable nteraction Importance.","help":"VII=2 | 3","type":"choice","arguments":[{"name":"2","description":"Calculates the importance of all two-way variable interactions.","type":"standalone"},{"name":"3","description":"Calculates the importance of all three-way and all two-way variable interactions.","type":"standalone"}]}]},{"name":"AUTOTUNE","description":"The AUTOTUNE statement searches for the best growing parameters based on the problem and the options. When you specify the AUTOTUNE statement, the NUMBIN= and MAXDEPTH= options in the PROC TREESPLIT statement and the GROW statement are ignored, because PROC TREESPLIT searches for the best of these parameters for tree growth. Trees created as a result of using autotuning are not pruned. You cannot specify the AUTOTUNE statement in conjunction with the PARTITION statement.","help":"AUTOTUNE <EVALHISTORY=<ALL | LOG | NOE>... >\n            <FRACTION=number>\n            <KFOLD=number> ...","arguments":[{"name":"CRITERION=","optional":true,"description":"Specifies information about the splitting criteria to use for tuning the decision tree. You can specify the following additional suboptions: VALUES=value-list specifies a list of splitting criteria to consider during tuning, where value-list is a space separated list that can include one or more of the following values: CHAID, CHISQUARE, FTEST, GAIN, GINI, and VARIANCE. INIT=value specifies the initial splitting criterion for the tuner to use. You can specify the following values: CHAID, CHISQUARE, FTEST, GAIN, GINI, IGR, RSS, or VARIANCE.","help":"CRITERION=VALUES= | INIT= | EXCLUDE","type":"choice","arguments":[{"name":"VALUES=","type":"value"},{"name":"INIT=","type":"value"},{"name":"EXCLUDE","type":"standalone"}]},{"name":"EVALHISTORY=","optional":true,"description":"Specifies how to report the evaluation history of the tuner.","help":"EVALHISTORY=ALL | LOG | NOE | TABLE","type":"choice","arguments":[{"name":"ALL","description":"Reports each evaluation in the log and creates the EvaluationHistory ODS table.","type":"standalone"},{"name":"LOG","description":"Prints the following information to the log for each evaluation: evaluation number, objective value, best objective value up to that point, evaluation time, and elapsed time since the beginning of the tuning process.","type":"standalone"},{"name":"NOE","description":"Suppresses reporting of evaluations in the log and does not create the EvaluationHistory ODS table.","type":"standalone"},{"name":"TABLE","description":"Creates the EvaluationHistory ODS table, which contains all evaluated points. The table contains columns for the evaluation number, all tuning parameters, and the objective function value.","type":"standalone"}]},{"name":"FRACTION=","optional":true,"description":"Specifies the fraction of all data to be used for validation, where number must be between 0.01 and 0.99, inclusive. If you specify this option, the tuner uses a single partition validation for finding the objective value (validation error estimate). This option might not be advisable for small or unbalanced data tables where the random assignment of the validation subset might not provide a good estimate of error. For large, balanced data tables, a single validation partition is usually sufficient for estimating error; a single partition is more efficient than cross validation in terms of the total execution time. By default, FRACTION=0.3. You cannot specify this option in combination with the KFOLD= option.","help":"FRACTION=*number*","type":"value"},{"name":"KFOLD=","optional":true,"description":"Specifies the number of partition folds in the cross validation process, where number must be between 2 and 20, inclusive. If you specify this option, the tuner uses cross validation to find the objective value. In cross validation, each model evaluation requires number of training executions (on number–1 data folds) and number of scoring executions (on 1 hold-out fold). Thus, the evaluation time is increased by approximately number. For small to medium data tables or for unbalanced data tables, cross validation provides on average a better representation of error across the entire data table (a better generalization error). By default, KFOLD=5. You cannot specify this option in combination with the FRACTION= option.","help":"KFOLD=*number*","type":"value"},{"name":"MAXDEPTH=","optional":true,"description":"Specifies information about the maximum depth to grow the decision tree to use for tuning the decision tree. You can specify the following additional suboptions: LB=number specifies the minimum depth to consider during tuning. If you specify this suboption, you cannot specify the VALUES= suboption. By default, LB=1. UB=number specifies the maximum depth to consider during tuning. If you specify this suboption, you cannot specify the VALUES= suboption. By default, UB=19. VALUES=value-list specifies a list of depth values to consider during tuning, where value-list is a space-separated list of positive integers. If you specify this suboption, you cannot specify either the LB= or UB= suboption. INIT=number specifies the initial depth for the tuner to use. By default, INIT=10. EXCLUDE excludes depth from the tuning process.","help":"MAXDEPTH=LB= | UB= | VALUES= | INIT= | EXCLUDE","type":"choice","arguments":[{"name":"LB=","type":"value"},{"name":"UB=","type":"value"},{"name":"VALUES=","type":"value"},{"name":"INIT=","type":"value"},{"name":"EXCLUDE","type":"standalone"}]},{"name":"MAXEVALS=","optional":true,"description":"Specifies the maximum number of configuration evaluations allowed for the tuner, where number must be an integer greater than or equal to 3. When the number of evaluations is reached, the tuner terminates the search and returns the results. To produce a single objective function value (validation error estimate), each configuration evaluation requires either a single model training and scoring execution on a validation partition, or a number of training and scoring executions equal to the value of the KFOLD= option for cross validation. The MAXEVALS= option might lead to termination before the value of the MAXITER= option or the MAXTIME= option is reached. By default, MAXEVALS=50.","help":"MAXEVALS=*number*","type":"value"},{"name":"MAXITER=","optional":true,"description":"Specifies the maximum number of iterations of the optimization tuner, where number must be greater than or equal to 1. Each iteration normally involves a number of objective evaluations up to the value of the POPSIZE= option. The MAXITER= option might lead to termination before the value of the MAXEVALS= option or the MAXTIME= option is reached. By default, MAXITER=5.","help":"MAXITER=*number*","type":"value"},{"name":"MAXTIME=","optional":true,"description":"Specifies the maximum time (in seconds) allowed for the tuner, where number must be greater than or equal to 1. When this value is reached, the tuner terminates the search and returns results. The actual run time for optimization might be longer because it includes the remaining time needed to finish the current evaluation. For long-running model training (large data tables), the actual run time might significantly exceed number. The MAXTIME= option might lead to termination before the value of the MAXEVALS= option or the MAXITER= option is reached. By default, MAXTIME=36000.","help":"MAXTIME=*number*","type":"value"},{"name":"NPARALLEL=","optional":true,"description":"Specifies the number of evaluations to be performed in parallel, where number must be greater than or equal to 0. When SEARCHMETHOD=GA is specified, the value of number is equal to the value of the POPSIZE= option minus one. When SEARCHMETHOD=LHS or SEARCHMETHOD=RANDOM is specified, the value of number is equal to the value of SAMPLESIZE= option.","help":"NPARALLEL=*number*","type":"value"},{"name":"NUMBIN=","optional":true,"description":"Specifies information about the number of bins in which to bin the interval inputs while tuning the decision tree. You can specify the following additional suboptions: LB=number specifies the minimum number of bins to consider during tuning. If you specify this suboption, you cannot specify the VALUES= suboption. By default, LB=20. UB=number specifies the maximum number of bins to consider during tuning. If you specify this suboption, you cannot specify the VALUES= suboption. By default, UB=200. VALUES=value-list specifies a list of numbers of bins to consider during tuning, where value-list is a space-separated list of positive integers. If you specify this suboption, you cannot specify either the LB= or UB= suboption. INIT=number specifies the initial number of bins for the tuner to use.","help":"NUMBIN=LB= | UB= | VALUES= | INIT= | EXCLUDE","type":"choice","arguments":[{"name":"LB=","type":"value"},{"name":"UB=","type":"value"},{"name":"VALUES=","type":"value"},{"name":"INIT=","type":"value"},{"name":"EXCLUDE","type":"standalone"}]},{"name":"OBJECTIVE=","optional":true,"description":"Specifies which measure of model performance the tuner uses as the objective function.","help":"OBJECTIVE=ASE | AUC | F05 | F1 | GAMMA | GINI | KS | MAE | MCE | MCLL | MISC | MSE | MSLE | RASE | RMAE | RMSLE | TAU*function*","type":"value","arguments":[{"name":"ASE","description":"Uses average squared error as the objective function.","type":"standalone"},{"name":"AUC","description":"Uses area under the curve as the objective function (nominal type only).","type":"standalone"},{"name":"F05","description":"Uses the F0.5 coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"F1","description":"Uses the F1 coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"GAMMA","description":"Uses the gamma coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"GINI","description":"Uses the Gini coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"KS","description":"Uses the Kolmogorov-Smirnov coefficient as the objective function (nominal type only).","type":"standalone"},{"name":"MAE","description":"Uses the mean absolute error as the objective function (interval type only).","type":"standalone"},{"name":"MCE","description":"Uses the misclassification rate as the objective function (nominal type only).","type":"standalone"},{"name":"MCLL","description":"Uses the multiclass log loss as the objective function (nominal type only).","type":"standalone"},{"name":"MISC","description":"Uses the misclassification error percentage as the objective function (nominal type only).","type":"standalone"},{"name":"MSE","description":"Uses the mean squared error as the objective function (interval type only).","type":"standalone"},{"name":"MSLE","description":"Uses the mean squared logarithmic error as the objective function (interval type only).","type":"standalone"},{"name":"RASE","description":"Uses the root average squared error as the objective function.","type":"standalone"},{"name":"RMAE","description":"Uses the root mean absolute error as the objective function (interval type only).","type":"standalone"},{"name":"RMSLE","description":"Uses the root mean squared logarithmic error as the objective function (interval type only).","type":"standalone"},{"name":"TAU","description":"Uses the tau coefficient as the objective function (nominal type only).","type":"standalone"}]},{"name":"POPSIZE=","optional":true,"description":"Specifies the maximum number of evaluations in one iteration (population), where number must be greater than or equal to 1. In some cases, the tuner algorithm might generate a number of new configurations smaller than number. By default, POPSIZE=10.","help":"POPSIZE=*number*","type":"value"},{"name":"SAMPLESIZE=","optional":true,"description":"Specifies the total number of evaluations, where number must be greater than or equal to 1. You can specify this option when SEARCHMETHOD=RANDOM or SEARCHMETHOD=LHS. This option is ignored when SEARCHMETHOD=GA.","help":"SAMPLESIZE=*number*","type":"value"},{"name":"SEARCHMETHOD=","optional":true,"description":"Specifies the search method to use for tuning.","help":"SEARCHMETHOD=GA | LHS | RANDOM","type":"choice","arguments":[{"name":"GA","description":"Uses an initial Latin hypercube sample that seeds a genetic algorithm to generate a new population of alternative configurations at each iteration.","type":"standalone"},{"name":"LHS","description":"Uses a Latin hypercube to generate a single sample of configurations that is uniform in each tuning parameter, but random in combinations.","type":"standalone"},{"name":"RANDOM","description":"Generates a single sample of purely random configurations.","type":"standalone"}]},{"name":"TARGETEVENT=","optional":true,"description":"Specifies the target event to use for calculating the selected objective function. This option is ignored when the value of the OBJECTIVE= option is not AUC, F1, F05, GINI, GAMMA, TAU, or KS.","help":"TARGETEVENT=*string*","type":"value"},{"name":"USEPARAMETERS=","optional":true,"description":"Specifies which set of parameters to tune.","help":"USEPARAMETERS=STANDARD | CUSTOM | COMBINED*tuning-parameter-option*","type":"value","arguments":[{"name":"STANDARD","description":"Tunes using the default bounds and initial values for all parameters.","type":"standalone"},{"name":"CUSTOM","description":"Tunes only the parameters that are specified in the TUNINGPARAMETERS= option.","type":"standalone"},{"name":"COMBINED","description":"Tunes the parameters that are specified in the TUNINGPARAMETERS= option and uses default bounds and initial values to tune all other parameters.","type":"standalone"}]}]},{"name":"CLASS","description":"The CLASS statement causes the specified variables to be treated as categorical variables in the analysis. These variables enter the analysis not through their values but through levels to which the unique values are mapped. You can specify only one CLASS statement. Note: All classification levels are padded or truncated to 32 characters.","help":"CLASS variables"},{"name":"CODE","description":"The CODE statement converts the final tree to SAS DATA step code that you can use for scoring. If you do not specify this statement, no SAS DATA step code is output.","help":"CODE <FILE=filename>\n          ","arguments":[{"name":"FILE=","optional":true,"description":"Specifies the name of the file to write the SAS score code to.","help":"FILE=*filename*","type":"value"}]},{"name":"CROSSVALIDATION","description":"The CROSSVALIDATION statement performs k-fold cross validation to find the average estimated validation error. You cannot specify this statement if you specify either the AUTOTUNE statement or the PARTITION statement. Note: The CROSSVALIDATION statement does not support any pruning method. If you specify this statement, you must also disable pruning by specifying the OFF option in the PRUNE statement.","help":"CROSSVALIDATION             &lt;KFOLD=*number* | NOPARALLEL | NSUBSESSIONWORKERS=*number*&gt;","arguments":[{"name":"KFOLD=","optional":true,"description":"specifies the number of partition folds in the cross validation process, where number is between 2 and 20, inclusive. By default, KFOLD=5.","help":"KFOLD=*number*","type":"value"},{"name":"NOPARALLEL","optional":true,"description":"specifies that k-fold cross validation not be run in parallel. By default, the process runs in parallel.","type":"standalone"},{"name":"NSUBSESSIONWORKERS=","optional":true,"description":"specifies the number of worker nodes to use in parallel subsessions. If you omit this option or if the number is 0, the number of worker nodes is determined automatically.","help":"NSUBSESSIONWORKERS=*number*","type":"value"}]},{"name":"FREQ","description":"The variable in the FREQ statement identifies a numeric variable in the data set that contains the frequency of occurrence of each observation. PROC TREESPLIT treats each observation as if it appears f times, where f is the value of the FREQ variable for the observation. If f is not an integer, it is truncated to an integer. If f is less than 1 or missing, the observation is not used in the analysis. When the FREQ statement is not specified, each observation is assigned a frequency of 1.","help":"FREQ variable "},{"name":"GROW","description":"The GROW statement specifies the criterion by which to split a parent node into child nodes. As it grows the tree, PROC TREESPLIT calculates the specified criterion for each predictor variable and then splits on the predictor variable whose criterion is closest to the value specified for that criterion.","help":"GROW <CHAID < (options) >>\n            <CHISQUARE < (options) >>\n            <ENTROPY (<options>) | GAIN < option >> ...","arguments":[{"name":"CHAID=","optional":true,"description":"For categorical predictor variables, CHAID uses the value (as specified in the ALPHA= option) of a chi-square statistic (for a classification tree) or an F statistic (for a regression tree) to merge similar levels of the predictor variable until the number of children in the proposed split reaches the number that you specify in the MAXBRANCH= option. The p-values for the final split determine the variable on which to split. For continuous predictor variables, CHAID chooses the best single split until the number of children in the proposed split reaches the value that you specify in the MAXBRANCH= option.","help":"CHAID=ALPHA= | BONFERRONI","type":"choice","arguments":[{"name":"ALPHA=","type":"value"},{"name":"BONFERRONI","type":"standalone"}]},{"name":"CHISQUARE=","optional":true,"description":"Uses a chi-square statistic to split each variable and then uses the p-values that correspond to the resulting splits to determine the splitting variable.","help":"CHISQUARE=ALPHA= | BONFERRONI","type":"choice","arguments":[{"name":"ALPHA=","type":"value"},{"name":"BONFERRONI","type":"standalone"}]},{"name":"ENTROPY=","optional":true,"aliases":["GAIN"],"description":"Uses the gain in information (decrease in entropy) to split each variable and then to determine the split.","help":"ENTROPY=MINENTROPY= | MINGAIN=","type":"choice","arguments":[{"name":"MINENTROPY=","type":"value"},{"name":"MINGAIN=","type":"value"}]},{"name":"FTEST=","optional":true,"description":"Uses an F statistic to split each variable and then uses the resulting p-value to determine the split variable.","help":"FTEST=ALPHA= | BONFERRONI","type":"choice","arguments":[{"name":"ALPHA=","type":"value"},{"name":"BONFERRONI","type":"standalone"}]},{"name":"GINI","optional":true,"description":"Uses the decrease in the Gini index to split each variable and then to determine the split.","type":"standalone"},{"name":"IGR","optional":true,"description":"Uses the entropy metric to split each variable and then uses the information gain ratio to determine the split.","type":"standalone"},{"name":"RSS","optional":true,"aliases":["VARIANCE"],"description":"Uses the change in response variance to split each variable and then to determine the split.","type":"standalone"}]},{"name":"INPUT","description":"The INPUT statement specifies predictor variables for the decision tree or regression tree. The value of variable can be a range such as \"var_1–var_1000\" or the special \"_ALL_\" value to include all variables in the data tables. As with CLASS variables, all nominal INPUT variables are padded or truncated to 32 characters. You cannot use an INPUT statement with a MODEL or CLASS statement.","help":"INPUT             <LEVEL=<INTERVAL | NOMINAL>>\n          ","arguments":[{"name":"LEVEL=","optional":true,"followsDelimiter":"/","description":"Specifies whether the specified predictor variables are interval or nominal.","help":"LEVEL=INTERVAL | NOMINAL","type":"choice","arguments":[{"name":"INTERVAL","followsDelimiter":"/","description":"Treats all numeric variables as interval predictors.","type":"standalone"},{"name":"NOMINAL","followsDelimiter":"/","description":"Treats all variables as nominal predictors.","type":"standalone"}]}]},{"name":"MODEL","description":"The MODEL statement causes PROC TREESPLIT to create a tree model by using response as the response variable and one or more variables as predictors. By default, variables are treated as a continuous predictors if they are numeric variables, or as categorical variables if they also appear in a CLASS statement. NOTE: Specifying a character variable in a MODEL statement without previously declaring it in a CLASS statement results in an error.","help":"MODEL response = variable "},{"name":"OUTPUT","description":"The OUTPUT statement creates an output data table that contains the results of PROC TREESPLIT.","help":"OUTPUT <>\n            <OUT=CAS-libref.data-table>\n          ","arguments":[{"name":"COPYVAR=","optional":true,"aliases":["COPYVARS="],"description":"Lists one or more variables from the input data table to be transferred to the output data table.","type":"value"},{"name":"OUT=","optional":true,"description":"Names the output data table for PROC TREESPLIT to use. CAS-libref.data-table is a two-level name, where","help":"OUT=*CAS-libref.data-table*","type":"dataSet"}]},{"name":"PARTITION","description":"The PARTITION statement specifies how observations in the input data set are logically partitioned into disjoint subsets for model training, validation, and testing.","help":"PARTITION <FRACTION(< TEST=fraction > < VALIDATE=fraction > < SEED=number >)>\n            <ROLE=|ROLEVAR=variable (< TEST='value' > < TRAIN='value' > < VALIDATE='value' >)>\n          ","arguments":[{"name":"FRACTION=","optional":true,"description":"Randomly assigns specified proportions of the observations in the input data table to the roles. You specify the proportions for testing and validation by using the TEST= and VALIDATE= suboptions. If you specify both the TEST= and VALIDATE= suboptions, then the sum of the specified fractions must be less than 1 and the remaining fraction of the observations are assigned to the training role. The SEED= option specifies an integer that is used to start the pseudorandom number generator for random partitioning of data for training, testing, and validation. If you do not specify SEED=number or if number is less than or equal to 0, the seed is generated by reading the time of day from the computer’s clock.","help":"FRACTION=VALIDATE= | TEST= | SEED=","type":"choice","arguments":[{"name":"VALIDATE=","type":"value"},{"name":"TEST=","type":"value"},{"name":"SEED=","type":"value"}]},{"name":"ROLE=","optional":true,"aliases":["ROLEVAR="],"description":"Names the variable in the input data table whose values are used to assign roles to each observation. This variable cannot also appear as an analysis variable in other statements or options. The TEST=, TRAIN=, and VALIDATE= suboptions specify the formatted values of this variable that are used to assign observation roles. If you do not specify the TRAIN= suboption, then all observations whose role is not determined by the TEST= or VALIDATE= suboption are assigned to the training role.","help":"ROLE=TRAIN= | VALIDATE= | TEST=","type":"choice","arguments":[{"name":"TRAIN=","type":"value"},{"name":"VALIDATE=","type":"value"},{"name":"TEST=","type":"value"}]}]},{"name":"PRUNE","description":"The PRUNE statement specifies the pruning method and related options.","help":"PRUNE <C45 < (CONFIDENCE=confidence-level) >>\n            <COSTCOMPLEXITY < (prune-options) > | CC < (prune-options) >>\n            <OFF> ...","arguments":[{"name":"C45=","optional":true,"description":"Requests C4.5 pruning (Quinlan 1993), which is based on the upper confidence limit for the error rate. For more information, see the section “Pruning” on page 499. This pruning method is available only for classification trees (which have a categorical response). PROC TREESPLIT uses the error rate from the training data only. You can specify the following prune-option:","help":"C45=CONFIDENCE=","type":"choice","arguments":[{"name":"CONFIDENCE=","type":"value"}]},{"name":"COSTCOMPLEXITY=","optional":true,"aliases":["CC"],"description":"Requests cost-complexity pruning (Breiman et al. 1984; Quinlan 1987; Zhang and Singer 2010). You can specify this pruning method for both classification trees (which have a categorical response) and regression trees (which have a continuous response).","help":"COSTCOMPLEXITY=ALPHA= | KFOLD= | LEAVES=","type":"choice","arguments":[{"name":"ALPHA=","type":"value"},{"name":"KFOLD=","type":"value"},{"name":"LEAVES=","type":"value"}]},{"name":"OFF","optional":true,"aliases":["NONE"],"description":"Turns off pruning completely. No pruning is performed, and no pruning plots are generated.","type":"standalone"},{"name":"REDUCEDERROR=","optional":true,"aliases":["REP"],"description":"Requests reduced-error pruning (Quinlan 1986). Reduced-error pruning has two stages: subtree sequence generation and subtree selection. The validation data are used for both stages. The PARTITION statement is required. You can specify the following prune-options:","help":"REDUCEDERROR=LEAVES=","type":"choice","arguments":[{"name":"LEAVES=","type":"value"}]}]},{"name":"SCORE","description":"The SCORE statement creates a new data table that is the result of prediction from using the input data and the model.","help":"SCORE <COPYVAR=variable | COPYVARS=(variables)>\n            <OUT=CAS-libref.data-table>\n          ","arguments":[{"name":"COPYVAR=","optional":true,"aliases":["COPYVARS="],"description":"Lists one or more variables from the input data table to be transferred to the output data table.","type":"value"},{"name":"OUT=","optional":true,"description":"Names the output data table for PROC NNET to use. CAS-libref.data-table is a two-level name, where","help":"OUT=*CAS-libref.data-table*","type":"dataSet"}]},{"name":"TARGET","description":"The TARGET statement names the variable whose values PROC TREESPLIT predicts. Missing values in the target are ignored except during scoring. You cannot use a TARGET statement with a MODEL or CLASS statement.","help":"TARGET             <LEVEL=<INTERVAL | NOMINAL>>\n          ","arguments":[{"name":"LEVEL=","optional":true,"followsDelimiter":"/","description":"Specifies whether the specified response variable is interval or nominal.","help":"LEVEL=INTERVAL | NOMINAL","type":"choice","arguments":[{"name":"INTERVAL","followsDelimiter":"/","description":"Treats the response as an interval variable and creates a regression tree.","type":"standalone"},{"name":"NOMINAL","followsDelimiter":"/","description":"Treats the response as a nominal variable and creates a decision tree.","type":"standalone"}]}]},{"name":"WEIGHT","description":"The variable in the WEIGHT statement is used as a weight to perform a weighted analysis of the data. Observations that have nonpositive or missing weights are not included in the analysis. If a WEIGHT statement is not included, all observations that are used in the analysis are assigned a weight of 1.","help":"WEIGHT variable"}],"supportSiteInformation":{"docsetId":"casstat","docsetVersion":"v_040","docsetTargetFile":"casstat_treesplit_toc.htm"}}